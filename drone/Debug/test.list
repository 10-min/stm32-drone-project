
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a06c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800a180  0800a180  0000b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5a8  0800a5a8  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5a8  0800a5a8  0000b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b0  0800a5b0  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b0  0800a5b0  0000b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800a5b8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000218  0800a7d0  0000c218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  0800a7d0  0000c9b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010152  00000000  00000000  0000c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002360  00000000  00000000  0001c393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd2  00000000  00000000  0001f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f91  00000000  00000000  00020402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013329  00000000  00000000  00039393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6cf  00000000  00000000  0004c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbd8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  000dbdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e17d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a164 	.word	0x0800a164

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800a164 	.word	0x0800a164

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001160:	b0bb      	sub	sp, #236	@ 0xec
 8001162:	af0c      	add	r7, sp, #48	@ 0x30

  /* USER CODE BEGIN 1 */
	uart_hal_rx_buffer_init();
 8001164:	f000 fc56 	bl	8001a14 <uart_hal_rx_buffer_init>
	PID pitch = {0};
 8001168:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800116c:	2238      	movs	r2, #56	@ 0x38
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f006 f808 	bl	8007186 <memset>
	pitch.target_angle = base_pitch;
 8001176:	4ba7      	ldr	r3, [pc, #668]	@ (8001414 <main+0x2b8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	67bb      	str	r3, [r7, #120]	@ 0x78
	pitch.stabilize_kp = 1.7;
 800117c:	4ba6      	ldr	r3, [pc, #664]	@ (8001418 <main+0x2bc>)
 800117e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	pitch.stabilize_ki = 0;
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	pitch.rate_kp = 0.8;
 800118a:	4ba4      	ldr	r3, [pc, #656]	@ (800141c <main+0x2c0>)
 800118c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	pitch.rate_ki = 0;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	pitch.rate_kd = 1.5;
 8001198:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800119c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	PID roll = {0};
 80011a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011a4:	2238      	movs	r2, #56	@ 0x38
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 ffec 	bl	8007186 <memset>
	roll.target_angle = base_roll;
 80011ae:	4b9c      	ldr	r3, [pc, #624]	@ (8001420 <main+0x2c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	643b      	str	r3, [r7, #64]	@ 0x40
	roll.stabilize_kp = 1.7;
 80011b4:	4b98      	ldr	r3, [pc, #608]	@ (8001418 <main+0x2bc>)
 80011b6:	657b      	str	r3, [r7, #84]	@ 0x54
	roll.stabilize_ki = 0;
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	65bb      	str	r3, [r7, #88]	@ 0x58
	roll.rate_kp = 0.8;
 80011be:	4b97      	ldr	r3, [pc, #604]	@ (800141c <main+0x2c0>)
 80011c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	roll.rate_ki = 0;
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	663b      	str	r3, [r7, #96]	@ 0x60
	roll.rate_kd = 1.5;
 80011c8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80011cc:	667b      	str	r3, [r7, #100]	@ 0x64
	PID yaw = {0};
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	2238      	movs	r2, #56	@ 0x38
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 ffd5 	bl	8007186 <memset>
	yaw.target_angle = base_yaw;
 80011dc:	4b91      	ldr	r3, [pc, #580]	@ (8001424 <main+0x2c8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60bb      	str	r3, [r7, #8]
	yaw.stabilize_kp = 2;
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e6:	61fb      	str	r3, [r7, #28]
	yaw.rate_kp = 1;
 80011e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
	yaw.rate_kd = 1;
 80011ee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t m1_speed = 0, m2_speed = 0, m3_speed = 0, m4_speed = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 8001200:	2300      	movs	r3, #0
 8001202:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8001206:	2300      	movs	r3, #0
 8001208:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f001 fd1e 	bl	8002c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 fa58 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 fbc2 	bl	800199c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001218:	f000 fb6c 	bl	80018f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800121c:	f000 fb94 	bl	8001948 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001220:	f000 fa92 	bl	8001748 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001224:	f000 fabe 	bl	80017a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &uart_hal_rx.temp, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	497f      	ldr	r1, [pc, #508]	@ (8001428 <main+0x2cc>)
 800122c:	487f      	ldr	r0, [pc, #508]	@ (800142c <main+0x2d0>)
 800122e:	f004 fa79 	bl	8005724 <HAL_UART_Receive_IT>
  WHO_AM_I(&hi2c1);
 8001232:	487f      	ldr	r0, [pc, #508]	@ (8001430 <main+0x2d4>)
 8001234:	f005 f81c 	bl	8006270 <WHO_AM_I>
  wake_up(&hi2c1);
 8001238:	487d      	ldr	r0, [pc, #500]	@ (8001430 <main+0x2d4>)
 800123a:	f005 f849 	bl	80062d0 <wake_up>
  set_sample_rate(&hi2c1, 1000);
 800123e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001242:	487b      	ldr	r0, [pc, #492]	@ (8001430 <main+0x2d4>)
 8001244:	f005 f85d 	bl	8006302 <set_sample_rate>
  set_sensitivity(&hi2c1, &my_mpu6050, gyro_full_scale_range_250, accel_full_scale_range_2g);
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
 800124c:	4979      	ldr	r1, [pc, #484]	@ (8001434 <main+0x2d8>)
 800124e:	4878      	ldr	r0, [pc, #480]	@ (8001430 <main+0x2d4>)
 8001250:	f005 f87a 	bl	8006348 <set_sensitivity>
  set_DLPF(&hi2c1, 1);
 8001254:	2101      	movs	r1, #1
 8001256:	4876      	ldr	r0, [pc, #472]	@ (8001430 <main+0x2d4>)
 8001258:	f005 f8e8 	bl	800642c <set_DLPF>


  mpu6050_init(&my_mpu6050);
 800125c:	4875      	ldr	r0, [pc, #468]	@ (8001434 <main+0x2d8>)
 800125e:	f000 fce3 	bl	8001c28 <mpu6050_init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001262:	2100      	movs	r1, #0
 8001264:	4874      	ldr	r0, [pc, #464]	@ (8001438 <main+0x2dc>)
 8001266:	f003 fd69 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800126a:	2104      	movs	r1, #4
 800126c:	4872      	ldr	r0, [pc, #456]	@ (8001438 <main+0x2dc>)
 800126e:	f003 fd65 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001272:	2108      	movs	r1, #8
 8001274:	4870      	ldr	r0, [pc, #448]	@ (8001438 <main+0x2dc>)
 8001276:	f003 fd61 	bl	8004d3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800127a:	210c      	movs	r1, #12
 800127c:	486e      	ldr	r0, [pc, #440]	@ (8001438 <main+0x2dc>)
 800127e:	f003 fd5d 	bl	8004d3c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_hal_rx_monitor();
 8001282:	f000 fbd7 	bl	8001a34 <uart_hal_rx_monitor>
	  update_mpu6050();
 8001286:	f000 fddf 	bl	8001e48 <update_mpu6050>

	  if ((HAL_GetTick() - control_last_time) > 5000) {
 800128a:	f001 fd37 	bl	8002cfc <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	4b6a      	ldr	r3, [pc, #424]	@ (800143c <main+0x2e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <main+0x146>
		  emergency_stop();
 800129e:	f001 f91f 	bl	80024e0 <emergency_stop>
	  }
	  if (throttle == 1000) {
 80012a2:	4b67      	ldr	r3, [pc, #412]	@ (8001440 <main+0x2e4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012aa:	d120      	bne.n	80012ee <main+0x192>
		  pitch.stabilize_iterm = 0;
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  pitch.rate_iterm = 0;
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  pitch.output = 0;
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  roll.stabilize_iterm = 0;
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  roll.rate_iterm = 0;
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	673b      	str	r3, [r7, #112]	@ 0x70
		  roll.output = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	677b      	str	r3, [r7, #116]	@ 0x74
		  control_angle[2] = 0;
 80012d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001444 <main+0x2e8>)
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
		  count = 0;
 80012de:	4b5a      	ldr	r3, [pc, #360]	@ (8001448 <main+0x2ec>)
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
		  base_yaw = angle_yaw;
 80012e6:	4b59      	ldr	r3, [pc, #356]	@ (800144c <main+0x2f0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <main+0x2c8>)
 80012ec:	6013      	str	r3, [r2, #0]
	  }

	  count += control_angle[2];
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <main+0x2e8>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4a55      	ldr	r2, [pc, #340]	@ (8001448 <main+0x2ec>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fc1b 	bl	8000b34 <__addsf3>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b51      	ldr	r3, [pc, #324]	@ (8001448 <main+0x2ec>)
 8001304:	601a      	str	r2, [r3, #0]
	  yaw.target_angle = base_yaw + count / 800;
 8001306:	4b50      	ldr	r3, [pc, #320]	@ (8001448 <main+0x2ec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4951      	ldr	r1, [pc, #324]	@ (8001450 <main+0x2f4>)
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fdcd 	bl	8000eac <__aeabi_fdiv>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	4b43      	ldr	r3, [pc, #268]	@ (8001424 <main+0x2c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f7ff fc09 	bl	8000b34 <__addsf3>
 8001322:	4603      	mov	r3, r0
 8001324:	60bb      	str	r3, [r7, #8]

	  pitch.angle = angle_pitch;
 8001326:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <main+0x2f8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  pitch.rate = my_mpu6050.gy_x_dps;
 800132c:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <main+0x2d8>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  pitch.target_angle = base_pitch + control_angle[0];
 8001334:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <main+0x2e8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <main+0x2b8>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fbf8 	bl	8000b34 <__addsf3>
 8001344:	4603      	mov	r3, r0
 8001346:	67bb      	str	r3, [r7, #120]	@ 0x78
	  roll.angle = angle_roll;
 8001348:	4b43      	ldr	r3, [pc, #268]	@ (8001458 <main+0x2fc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	647b      	str	r3, [r7, #68]	@ 0x44
	  roll.rate = my_mpu6050.gy_y_dps;
 800134e:	4b39      	ldr	r3, [pc, #228]	@ (8001434 <main+0x2d8>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	64bb      	str	r3, [r7, #72]	@ 0x48
	  roll.target_angle = base_roll + control_angle[1];
 8001354:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <main+0x2e8>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <main+0x2c4>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fbe8 	bl	8000b34 <__addsf3>
 8001364:	4603      	mov	r3, r0
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
	  yaw.angle = angle_yaw;
 8001368:	4b38      	ldr	r3, [pc, #224]	@ (800144c <main+0x2f0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
	  yaw.rate = my_mpu6050.gy_z_dps;
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <main+0x2d8>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	613b      	str	r3, [r7, #16]

	  set_dual_PID(&pitch);
 8001374:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f813 	bl	80023a4 <set_dual_PID>
	  set_dual_PID(&roll);
 800137e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f80e 	bl	80023a4 <set_dual_PID>
	  set_dual_PID(&yaw);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f809 	bl	80023a4 <set_dual_PID>

	  pitch.output = constrain(pitch.output, -200, 200);
 8001392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001396:	4a31      	ldr	r2, [pc, #196]	@ (800145c <main+0x300>)
 8001398:	4931      	ldr	r1, [pc, #196]	@ (8001460 <main+0x304>)
 800139a:	4618      	mov	r0, r3
 800139c:	f001 f882 	bl	80024a4 <constrain>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	  roll.output = constrain(roll.output, -200, 200);
 80013a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013a8:	4a2c      	ldr	r2, [pc, #176]	@ (800145c <main+0x300>)
 80013aa:	492d      	ldr	r1, [pc, #180]	@ (8001460 <main+0x304>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f879 	bl	80024a4 <constrain>
 80013b2:	4603      	mov	r3, r0
 80013b4:	677b      	str	r3, [r7, #116]	@ 0x74
	  yaw.output = constrain(yaw.output, -200, 200);
 80013b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b8:	4a28      	ldr	r2, [pc, #160]	@ (800145c <main+0x300>)
 80013ba:	4929      	ldr	r1, [pc, #164]	@ (8001460 <main+0x304>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 f871 	bl	80024a4 <constrain>
 80013c2:	4603      	mov	r3, r0
 80013c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  /*m1_speed = (throttle == 1000) ? 1000 : throttle;
	  m2_speed = (throttle == 1000) ? 1000 : throttle;
	  m3_speed = (throttle == 1000) ? 1000 : throttle;
	  m4_speed = (throttle == 1000) ? 1000 : throttle;*/

	  m1_speed = (throttle == 1000) ? 1000 : throttle + pitch.output + roll.output + yaw.output;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <main+0x2e4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ce:	d049      	beq.n	8001464 <main+0x308>
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <main+0x2e4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fc61 	bl	8000c9c <__aeabi_i2f>
 80013da:	4602      	mov	r2, r0
 80013dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f7ff fba6 	bl	8000b34 <__addsf3>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f7ff fb9f 	bl	8000b34 <__addsf3>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f7ff fb98 	bl	8000b34 <__addsf3>
 8001404:	4603      	mov	r3, r0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe88 	bl	800111c <__aeabi_f2uiz>
 800140c:	4603      	mov	r3, r0
 800140e:	b29b      	uxth	r3, r3
 8001410:	e02a      	b.n	8001468 <main+0x30c>
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000
 8001418:	3fd9999a 	.word	0x3fd9999a
 800141c:	3f4ccccd 	.word	0x3f4ccccd
 8001420:	20000818 	.word	0x20000818
 8001424:	2000081c 	.word	0x2000081c
 8001428:	20000760 	.word	0x20000760
 800142c:	20000318 	.word	0x20000318
 8001430:	20000234 	.word	0x20000234
 8001434:	200007d0 	.word	0x200007d0
 8001438:	20000288 	.word	0x20000288
 800143c:	200007cc 	.word	0x200007cc
 8001440:	20000004 	.word	0x20000004
 8001444:	20000830 	.word	0x20000830
 8001448:	2000082c 	.word	0x2000082c
 800144c:	20000814 	.word	0x20000814
 8001450:	44480000 	.word	0x44480000
 8001454:	2000080c 	.word	0x2000080c
 8001458:	20000810 	.word	0x20000810
 800145c:	43480000 	.word	0x43480000
 8001460:	c3480000 	.word	0xc3480000
 8001464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001468:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	  m2_speed = (throttle == 1000) ? 1000 : throttle + pitch.output - roll.output - yaw.output;
 800146c:	4b8f      	ldr	r3, [pc, #572]	@ (80016ac <main+0x550>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001474:	d020      	beq.n	80014b8 <main+0x35c>
 8001476:	4b8d      	ldr	r3, [pc, #564]	@ (80016ac <main+0x550>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc0e 	bl	8000c9c <__aeabi_i2f>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fb53 	bl	8000b34 <__addsf3>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f7ff fb4a 	bl	8000b30 <__aeabi_fsub>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fb43 	bl	8000b30 <__aeabi_fsub>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe35 	bl	800111c <__aeabi_f2uiz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	e001      	b.n	80014bc <main+0x360>
 80014b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014bc:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
	  m3_speed = (throttle == 1000) ? 1000 : throttle - pitch.output + roll.output - yaw.output;
 80014c0:	4b7a      	ldr	r3, [pc, #488]	@ (80016ac <main+0x550>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014c8:	d020      	beq.n	800150c <main+0x3b0>
 80014ca:	4b78      	ldr	r3, [pc, #480]	@ (80016ac <main+0x550>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fbe4 	bl	8000c9c <__aeabi_i2f>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014da:	4619      	mov	r1, r3
 80014dc:	4610      	mov	r0, r2
 80014de:	f7ff fb27 	bl	8000b30 <__aeabi_fsub>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f7ff fb22 	bl	8000b34 <__addsf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff fb19 	bl	8000b30 <__aeabi_fsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe0b 	bl	800111c <__aeabi_f2uiz>
 8001506:	4603      	mov	r3, r0
 8001508:	b29b      	uxth	r3, r3
 800150a:	e001      	b.n	8001510 <main+0x3b4>
 800150c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001510:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	  m4_speed = (throttle == 1000) ? 1000 : throttle - pitch.output - roll.output + yaw.output;
 8001514:	4b65      	ldr	r3, [pc, #404]	@ (80016ac <main+0x550>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800151c:	d020      	beq.n	8001560 <main+0x404>
 800151e:	4b63      	ldr	r3, [pc, #396]	@ (80016ac <main+0x550>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fbba 	bl	8000c9c <__aeabi_i2f>
 8001528:	4602      	mov	r2, r0
 800152a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fafd 	bl	8000b30 <__aeabi_fsub>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7ff faf6 	bl	8000b30 <__aeabi_fsub>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f7ff faf1 	bl	8000b34 <__addsf3>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fde1 	bl	800111c <__aeabi_f2uiz>
 800155a:	4603      	mov	r3, r0
 800155c:	b29b      	uxth	r3, r3
 800155e:	e001      	b.n	8001564 <main+0x408>
 8001560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001564:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0




	  if (m1_speed < 1000) {
 8001568:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800156c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001570:	d204      	bcs.n	800157c <main+0x420>
		  m1_speed = 1000;
 8001572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001576:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800157a:	e008      	b.n	800158e <main+0x432>
	  } else if(m1_speed > 2000) {
 800157c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001580:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001584:	d903      	bls.n	800158e <main+0x432>
		  m1_speed = 2000;
 8001586:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800158a:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	  }
	  if (m2_speed < 1000) {
 800158e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8001592:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001596:	d204      	bcs.n	80015a2 <main+0x446>
		  m2_speed = 1000;
 8001598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 80015a0:	e008      	b.n	80015b4 <main+0x458>
	  } else if(m2_speed > 2000) {
 80015a2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80015a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015aa:	d903      	bls.n	80015b4 <main+0x458>
		  m2_speed = 2000;
 80015ac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015b0:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
	  }
	  if (m3_speed < 1000) {
 80015b4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80015b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015bc:	d204      	bcs.n	80015c8 <main+0x46c>
		  m3_speed = 1000;
 80015be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80015c6:	e008      	b.n	80015da <main+0x47e>
	  } else if(m3_speed > 2000) {
 80015c8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80015cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015d0:	d903      	bls.n	80015da <main+0x47e>
		  m3_speed = 2000;
 80015d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	  }
	  if (m4_speed < 1000) {
 80015da:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80015de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e2:	d204      	bcs.n	80015ee <main+0x492>
		  m4_speed = 1000;
 80015e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 80015ec:	e008      	b.n	8001600 <main+0x4a4>
	  } else if(m4_speed > 2000) {
 80015ee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80015f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015f6:	d903      	bls.n	8001600 <main+0x4a4>
		  m4_speed = 2000;
 80015f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015fc:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
	  }

	  htim1.Instance->CCR1 = m1_speed;
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <main+0x554>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8001608:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim1.Instance->CCR2 = m2_speed;
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <main+0x554>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8001612:	639a      	str	r2, [r3, #56]	@ 0x38
	  htim1.Instance->CCR3 = m3_speed;
 8001614:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <main+0x554>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 800161c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  htim1.Instance->CCR4 = m4_speed;
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <main+0x554>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8001626:	641a      	str	r2, [r3, #64]	@ 0x40

	  printf("%f %f %f %f %d %d %d %d %d\r\n", angle_pitch, angle_roll, angle_yaw, yaw.target_angle, throttle, (int)htim1.Instance->CCR1, (int)htim1.Instance->CCR2, (int)htim1.Instance->CCR3, (int)htim1.Instance->CCR4);
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <main+0x558>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fefb 	bl	8000428 <__aeabi_f2d>
 8001632:	4682      	mov	sl, r0
 8001634:	468b      	mov	fp, r1
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <main+0x55c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fef4 	bl	8000428 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <main+0x560>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe feed 	bl	8000428 <__aeabi_f2d>
 800164e:	4680      	mov	r8, r0
 8001650:	4689      	mov	r9, r1
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fee7 	bl	8000428 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4913      	ldr	r1, [pc, #76]	@ (80016ac <main+0x550>)
 8001660:	6809      	ldr	r1, [r1, #0]
 8001662:	4813      	ldr	r0, [pc, #76]	@ (80016b0 <main+0x554>)
 8001664:	6800      	ldr	r0, [r0, #0]
 8001666:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001668:	4606      	mov	r6, r0
 800166a:	4811      	ldr	r0, [pc, #68]	@ (80016b0 <main+0x554>)
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	480f      	ldr	r0, [pc, #60]	@ (80016b0 <main+0x554>)
 8001674:	6800      	ldr	r0, [r0, #0]
 8001676:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001678:	6038      	str	r0, [r7, #0]
 800167a:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <main+0x554>)
 800167c:	6800      	ldr	r0, [r0, #0]
 800167e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8001680:	900a      	str	r0, [sp, #40]	@ 0x28
 8001682:	f8d7 c000 	ldr.w	ip, [r7]
 8001686:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	9008      	str	r0, [sp, #32]
 800168e:	9607      	str	r6, [sp, #28]
 8001690:	9106      	str	r1, [sp, #24]
 8001692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001696:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800169a:	e9cd 4500 	strd	r4, r5, [sp]
 800169e:	4652      	mov	r2, sl
 80016a0:	465b      	mov	r3, fp
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <main+0x564>)
 80016a4:	f005 fd1a 	bl	80070dc <iprintf>
	  uart_hal_rx_monitor();
 80016a8:	e5eb      	b.n	8001282 <main+0x126>
 80016aa:	bf00      	nop
 80016ac:	20000004 	.word	0x20000004
 80016b0:	20000288 	.word	0x20000288
 80016b4:	2000080c 	.word	0x2000080c
 80016b8:	20000810 	.word	0x20000810
 80016bc:	20000814 	.word	0x20000814
 80016c0:	0800a180 	.word	0x0800a180

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b090      	sub	sp, #64	@ 0x40
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	2228      	movs	r2, #40	@ 0x28
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f005 fd57 	bl	8007186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ea:	2301      	movs	r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ee:	2310      	movs	r3, #16
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016fa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	4618      	mov	r0, r3
 8001706:	f002 feb7 	bl	8004478 <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001710:	f001 f81a 	bl	8002748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001714:	230f      	movs	r3, #15
 8001716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001718:	2302      	movs	r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2102      	movs	r1, #2
 800172e:	4618      	mov	r0, r3
 8001730:	f003 f924 	bl	800497c <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800173a:	f001 f805 	bl	8002748 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3740      	adds	r7, #64	@ 0x40
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <MX_I2C1_Init+0x50>)
 800174e:	4a13      	ldr	r2, [pc, #76]	@ (800179c <MX_I2C1_Init+0x54>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001754:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <MX_I2C1_Init+0x58>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800176a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001778:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <MX_I2C1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001786:	f001 fe43 	bl	8003410 <HAL_I2C_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001790:	f000 ffda 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000234 	.word	0x20000234
 800179c:	40005400 	.word	0x40005400
 80017a0:	00061a80 	.word	0x00061a80

080017a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b092      	sub	sp, #72	@ 0x48
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2220      	movs	r2, #32
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f005 fcd9 	bl	8007186 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d4:	4b45      	ldr	r3, [pc, #276]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017d6:	4a46      	ldr	r2, [pc, #280]	@ (80018f0 <MX_TIM1_Init+0x14c>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80017da:	4b44      	ldr	r3, [pc, #272]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017dc:	223f      	movs	r2, #63	@ 0x3f
 80017de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b42      	ldr	r3, [pc, #264]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500;
 80017e6:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017e8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80017ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <MX_TIM1_Init+0x148>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001800:	483a      	ldr	r0, [pc, #232]	@ (80018ec <MX_TIM1_Init+0x148>)
 8001802:	f003 fa4b 	bl	8004c9c <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800180c:	f000 ff9c 	bl	8002748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001818:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800181c:	4619      	mov	r1, r3
 800181e:	4833      	ldr	r0, [pc, #204]	@ (80018ec <MX_TIM1_Init+0x148>)
 8001820:	f003 fdfe 	bl	8005420 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800182a:	f000 ff8d 	bl	8002748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	@ 0x60
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 8001832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4825      	ldr	r0, [pc, #148]	@ (80018ec <MX_TIM1_Init+0x148>)
 8001856:	f003 fb13 	bl	8004e80 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001860:	f000 ff72 	bl	8002748 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	2204      	movs	r2, #4
 800186a:	4619      	mov	r1, r3
 800186c:	481f      	ldr	r0, [pc, #124]	@ (80018ec <MX_TIM1_Init+0x148>)
 800186e:	f003 fb07 	bl	8004e80 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001878:	f000 ff66 	bl	8002748 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800187c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001880:	2208      	movs	r2, #8
 8001882:	4619      	mov	r1, r3
 8001884:	4819      	ldr	r0, [pc, #100]	@ (80018ec <MX_TIM1_Init+0x148>)
 8001886:	f003 fafb 	bl	8004e80 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001890:	f000 ff5a 	bl	8002748 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	220c      	movs	r2, #12
 800189a:	4619      	mov	r1, r3
 800189c:	4813      	ldr	r0, [pc, #76]	@ (80018ec <MX_TIM1_Init+0x148>)
 800189e:	f003 faef 	bl	8004e80 <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80018a8:	f000 ff4e 	bl	8002748 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	@ (80018ec <MX_TIM1_Init+0x148>)
 80018d0:	f003 fe04 	bl	80054dc <HAL_TIMEx_ConfigBreakDeadTime>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80018da:	f000 ff35 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018de:	4803      	ldr	r0, [pc, #12]	@ (80018ec <MX_TIM1_Init+0x148>)
 80018e0:	f000 ffd8 	bl	8002894 <HAL_TIM_MspPostInit>

}
 80018e4:	bf00      	nop
 80018e6:	3748      	adds	r7, #72	@ 0x48
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000288 	.word	0x20000288
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <MX_USART2_UART_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_USART2_UART_Init+0x4c>)
 800192c:	f003 fe27 	bl	800557e <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001936:	f000 ff07 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002d0 	.word	0x200002d0
 8001944:	40004400 	.word	0x40004400

08001948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <MX_USART3_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 8001954:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_USART3_UART_Init+0x4c>)
 8001980:	f003 fdfd 	bl	800557e <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f000 fedd 	bl	8002748 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000318 	.word	0x20000318
 8001998:	40004800 	.word	0x40004800

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6193      	str	r3, [r2, #24]
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000

080019e0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10) == HAL_OK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	230a      	movs	r3, #10
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <_write+0x30>)
 80019f6:	f003 fe12 	bl	800561e <HAL_UART_Transmit>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <_write+0x24>
		return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	e001      	b.n	8001a08 <_write+0x28>
	return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200002d0 	.word	0x200002d0

08001a14 <uart_hal_rx_buffer_init>:
	if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK)
		return -1;
	return ch;
}

void uart_hal_rx_buffer_init(void) {
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	uart_hal_rx.input_p = 0;
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <uart_hal_rx_buffer_init+0x1c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
	uart_hal_rx.output_p = 0;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <uart_hal_rx_buffer_init+0x1c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000360 	.word	0x20000360

08001a34 <uart_hal_rx_monitor>:
void uart_hal_rx_monitor(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

	while(uart_hal_getchar() != 0) {
 8001a38:	bf00      	nop
 8001a3a:	f000 f83b 	bl	8001ab4 <uart_hal_getchar>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1fa      	bne.n	8001a3a <uart_hal_rx_monitor+0x6>

	}

}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x58>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11e      	bne.n	8001a9c <HAL_UART_RxCpltCallback+0x50>
		uart_hal_rx.buffer[uart_hal_rx.input_p++] = uart_hal_rx.temp;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8001a60:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	b291      	uxth	r1, r2
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8001a6c:	f8a2 1402 	strh.w	r1, [r2, #1026]	@ 0x402
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8001a74:	f893 1400 	ldrb.w	r1, [r3, #1024]	@ 0x400
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8001a7a:	5499      	strb	r1, [r3, r2]
		if (uart_hal_rx.input_p >= UART_RX_BUFFER_SIZE) {
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8001a7e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a88:	d303      	bcc.n	8001a92 <HAL_UART_RxCpltCallback+0x46>
			uart_hal_rx.input_p = 0;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402
		}
		HAL_UART_Receive_IT(&huart3, &uart_hal_rx.temp, 1);
 8001a92:	2201      	movs	r2, #1
 8001a94:	4905      	ldr	r1, [pc, #20]	@ (8001aac <HAL_UART_RxCpltCallback+0x60>)
 8001a96:	4806      	ldr	r0, [pc, #24]	@ (8001ab0 <HAL_UART_RxCpltCallback+0x64>)
 8001a98:	f003 fe44 	bl	8005724 <HAL_UART_Receive_IT>
	}

}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40004800 	.word	0x40004800
 8001aa8:	20000360 	.word	0x20000360
 8001aac:	20000760 	.word	0x20000760
 8001ab0:	20000318 	.word	0x20000318

08001ab4 <uart_hal_getchar>:

uint8_t uart_hal_getchar(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af02      	add	r7, sp, #8
	uint32_t reg = READ_REG(huart3.Instance->CR1);
 8001aba:	4b50      	ldr	r3, [pc, #320]	@ (8001bfc <uart_hal_getchar+0x148>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	607b      	str	r3, [r7, #4]

	__HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bfc <uart_hal_getchar+0x148>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8001bfc <uart_hal_getchar+0x148>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0220 	bic.w	r2, r2, #32
 8001ad0:	60da      	str	r2, [r3, #12]
	if (uart_hal_rx.input_p == uart_hal_rx.output_p) {
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001ad4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b49      	ldr	r3, [pc, #292]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001adc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d105      	bne.n	8001af2 <uart_hal_getchar+0x3e>
		WRITE_REG(huart3.Instance->CR1, reg);
 8001ae6:	4b45      	ldr	r3, [pc, #276]	@ (8001bfc <uart_hal_getchar+0x148>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	60da      	str	r2, [r3, #12]
		return 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e080      	b.n	8001bf4 <uart_hal_getchar+0x140>
	}
	WRITE_REG(huart3.Instance->CR1, reg);
 8001af2:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <uart_hal_getchar+0x148>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	60da      	str	r2, [r3, #12]
	uart_hal_rx.rxd = uart_hal_rx.buffer[uart_hal_rx.output_p++];
 8001afa:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001afc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	b291      	uxth	r1, r2
 8001b06:	4a3e      	ldr	r2, [pc, #248]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001b08:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001b10:	5c9a      	ldrb	r2, [r3, r2]
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001b14:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
	if (uart_hal_rx.output_p >= UART_RX_BUFFER_SIZE) {
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001b1a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b24:	d303      	bcc.n	8001b2e <uart_hal_getchar+0x7a>
		uart_hal_rx.output_p = 0;
 8001b26:	4b36      	ldr	r3, [pc, #216]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
	}
	buffer[in++] = uart_hal_rx.rxd;
 8001b2e:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <uart_hal_getchar+0x150>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	b291      	uxth	r1, r2
 8001b36:	4a33      	ldr	r2, [pc, #204]	@ (8001c04 <uart_hal_getchar+0x150>)
 8001b38:	8011      	strh	r1, [r2, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b30      	ldr	r3, [pc, #192]	@ (8001c00 <uart_hal_getchar+0x14c>)
 8001b3e:	f893 1401 	ldrb.w	r1, [r3, #1025]	@ 0x401
 8001b42:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <uart_hal_getchar+0x154>)
 8001b44:	5499      	strb	r1, [r3, r2]
	if (in > 4) {
 8001b46:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <uart_hal_getchar+0x150>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d951      	bls.n	8001bf2 <uart_hal_getchar+0x13e>
		if (buffer[in - 1] == 'c') {
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <uart_hal_getchar+0x150>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a2c      	ldr	r2, [pc, #176]	@ (8001c08 <uart_hal_getchar+0x154>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	2b63      	cmp	r3, #99	@ 0x63
 8001b5a:	d147      	bne.n	8001bec <uart_hal_getchar+0x138>
			control_last_time = HAL_GetTick();
 8001b5c:	f001 f8ce 	bl	8002cfc <HAL_GetTick>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a2a      	ldr	r2, [pc, #168]	@ (8001c0c <uart_hal_getchar+0x158>)
 8001b64:	6013      	str	r3, [r2, #0]
			throttle = map(buffer[2], 0, 100, 1000, 2000);
 8001b66:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <uart_hal_getchar+0x154>)
 8001b68:	789b      	ldrb	r3, [r3, #2]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b76:	2264      	movs	r2, #100	@ 0x64
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f000 fba5 	bl	80022c8 <map>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <uart_hal_getchar+0x15c>)
 8001b82:	6013      	str	r3, [r2, #0]
			control_angle[0] = -map_f(buffer[0], 0, 100, -30, 30);
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <uart_hal_getchar+0x154>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f883 	bl	8000c94 <__aeabi_ui2f>
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <uart_hal_getchar+0x160>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <uart_hal_getchar+0x164>)
 8001b94:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <uart_hal_getchar+0x168>)
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	f000 fbd8 	bl	800234e <map_f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <uart_hal_getchar+0x16c>)
 8001ba6:	6013      	str	r3, [r2, #0]
			control_angle[1] = -map_f(buffer[1], 0, 100, -30, 30);
 8001ba8:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <uart_hal_getchar+0x154>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f871 	bl	8000c94 <__aeabi_ui2f>
 8001bb2:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <uart_hal_getchar+0x160>)
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <uart_hal_getchar+0x164>)
 8001bb8:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <uart_hal_getchar+0x168>)
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f000 fbc6 	bl	800234e <map_f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001bc8:	4a15      	ldr	r2, [pc, #84]	@ (8001c20 <uart_hal_getchar+0x16c>)
 8001bca:	6053      	str	r3, [r2, #4]
			control_angle[2] = map_f(buffer[3], 0, 100, -100, 100);
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <uart_hal_getchar+0x154>)
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f85f 	bl	8000c94 <__aeabi_ui2f>
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <uart_hal_getchar+0x168>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <uart_hal_getchar+0x170>)
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <uart_hal_getchar+0x168>)
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	f000 fbb4 	bl	800234e <map_f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <uart_hal_getchar+0x16c>)
 8001bea:	6093      	str	r3, [r2, #8]

		}
		in = 0;
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <uart_hal_getchar+0x150>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000318 	.word	0x20000318
 8001c00:	20000360 	.word	0x20000360
 8001c04:	20000766 	.word	0x20000766
 8001c08:	20000768 	.word	0x20000768
 8001c0c:	200007cc 	.word	0x200007cc
 8001c10:	20000004 	.word	0x20000004
 8001c14:	41f00000 	.word	0x41f00000
 8001c18:	c1f00000 	.word	0xc1f00000
 8001c1c:	42c80000 	.word	0x42c80000
 8001c20:	20000830 	.word	0x20000830
 8001c24:	c2c80000 	.word	0xc2c80000

08001c28 <mpu6050_init>:
void mpu6050_init(mpu6050* my_mpu6050) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if (my_mpu6050 == NULL) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80ca 	beq.w	8001dcc <mpu6050_init+0x1a4>
		return;
	}
	float sum_gy_x = 0, sum_gy_y = 0, sum_gy_z = 0;
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
	int sum[3] = {0};
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 10; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	e07f      	b.n	8001d5c <mpu6050_init+0x134>
		read_gyro(&hi2c1, my_mpu6050, raw_data	);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	485c      	ldr	r0, [pc, #368]	@ (8001dd4 <mpu6050_init+0x1ac>)
 8001c62:	f004 fc0f 	bl	8006484 <read_gyro>

		sum_gy_x += (int16_t) ((my_mpu6050->gy_x - offset[0]) / my_mpu6050->gyro_change_unit_factor);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd8 <mpu6050_init+0x1b0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f811 	bl	8000c9c <__aeabi_i2f>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7ff f912 	bl	8000eac <__aeabi_fdiv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fa20 	bl	80010d0 <__aeabi_f2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f801 	bl	8000c9c <__aeabi_i2f>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ca0:	f7fe ff48 	bl	8000b34 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
		sum_gy_y += (int16_t) ((my_mpu6050->gy_y - offset[1]) / my_mpu6050->gyro_change_unit_factor);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <mpu6050_init+0x1b0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fff0 	bl	8000c9c <__aeabi_i2f>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f7ff f8f1 	bl	8000eac <__aeabi_fdiv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f9ff 	bl	80010d0 <__aeabi_f2iz>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe ffe0 	bl	8000c9c <__aeabi_i2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6a38      	ldr	r0, [r7, #32]
 8001ce2:	f7fe ff27 	bl	8000b34 <__addsf3>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	623b      	str	r3, [r7, #32]
		sum_gy_z += (int16_t) ((my_mpu6050->gy_z - offset[2]) / my_mpu6050->gyro_change_unit_factor);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <mpu6050_init+0x1b0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ffcf 	bl	8000c9c <__aeabi_i2f>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff f8d0 	bl	8000eac <__aeabi_fdiv>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f9de 	bl	80010d0 <__aeabi_f2iz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe ffbf 	bl	8000c9c <__aeabi_i2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4619      	mov	r1, r3
 8001d22:	69f8      	ldr	r0, [r7, #28]
 8001d24:	f7fe ff06 	bl	8000b34 <__addsf3>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	61fb      	str	r3, [r7, #28]
		sum[0] += my_mpu6050->gy_x;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001d34:	4413      	add	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
		sum[1] += my_mpu6050->gy_y;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001d40:	4413      	add	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
		sum[2] += my_mpu6050->gy_z;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
		HAL_Delay(100);
 8001d50:	2064      	movs	r0, #100	@ 0x64
 8001d52:	f000 ffdd 	bl	8002d10 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	f77f af7c 	ble.w	8001c5c <mpu6050_init+0x34>
	}
	base_gy_x = sum_gy_x / 10;
 8001d64:	491d      	ldr	r1, [pc, #116]	@ (8001ddc <mpu6050_init+0x1b4>)
 8001d66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d68:	f7ff f8a0 	bl	8000eac <__aeabi_fdiv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <mpu6050_init+0x1b8>)
 8001d72:	601a      	str	r2, [r3, #0]
	base_gy_y = sum_gy_y / 10;
 8001d74:	4919      	ldr	r1, [pc, #100]	@ (8001ddc <mpu6050_init+0x1b4>)
 8001d76:	6a38      	ldr	r0, [r7, #32]
 8001d78:	f7ff f898 	bl	8000eac <__aeabi_fdiv>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <mpu6050_init+0x1bc>)
 8001d82:	601a      	str	r2, [r3, #0]
	base_gy_z = sum_gy_z / 10;
 8001d84:	4915      	ldr	r1, [pc, #84]	@ (8001ddc <mpu6050_init+0x1b4>)
 8001d86:	69f8      	ldr	r0, [r7, #28]
 8001d88:	f7ff f890 	bl	8000eac <__aeabi_fdiv>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <mpu6050_init+0x1c0>)
 8001d92:	601a      	str	r2, [r3, #0]
	average[0] = sum[0] / 10;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <mpu6050_init+0x1c4>)
 8001d98:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9c:	1092      	asrs	r2, r2, #2
 8001d9e:	17db      	asrs	r3, r3, #31
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <mpu6050_init+0x1c8>)
 8001da4:	6013      	str	r3, [r2, #0]
	average[1] = sum[1] / 10;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4a10      	ldr	r2, [pc, #64]	@ (8001dec <mpu6050_init+0x1c4>)
 8001daa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dae:	1092      	asrs	r2, r2, #2
 8001db0:	17db      	asrs	r3, r3, #31
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <mpu6050_init+0x1c8>)
 8001db6:	6053      	str	r3, [r2, #4]
	average[2] = sum[2] / 10;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4a0c      	ldr	r2, [pc, #48]	@ (8001dec <mpu6050_init+0x1c4>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	1092      	asrs	r2, r2, #2
 8001dc2:	17db      	asrs	r3, r3, #31
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <mpu6050_init+0x1c8>)
 8001dc8:	6093      	str	r3, [r2, #8]
 8001dca:	e000      	b.n	8001dce <mpu6050_init+0x1a6>
		return;
 8001dcc:	bf00      	nop

}
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000234 	.word	0x20000234
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	41200000 	.word	0x41200000
 8001de0:	200007fc 	.word	0x200007fc
 8001de4:	20000800 	.word	0x20000800
 8001de8:	20000804 	.word	0x20000804
 8001dec:	66666667 	.word	0x66666667
 8001df0:	20000820 	.word	0x20000820

08001df4 <get_dt>:
float get_dt(uint32_t* prev) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	float now = HAL_GetTick();
 8001dfc:	f000 ff7e 	bl	8002cfc <HAL_GetTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ff46 	bl	8000c94 <__aeabi_ui2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
	float dt = (now - *prev) / 1000;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe ff3f 	bl	8000c94 <__aeabi_ui2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7fe fe88 	bl	8000b30 <__aeabi_fsub>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <get_dt+0x50>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f841 	bl	8000eac <__aeabi_fdiv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	60bb      	str	r3, [r7, #8]
	*prev = now;
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff f974 	bl	800111c <__aeabi_f2uiz>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
	return dt;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	447a0000 	.word	0x447a0000

08001e48 <update_mpu6050>:
void update_mpu6050() {
 8001e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e4c:	b090      	sub	sp, #64	@ 0x40
 8001e4e:	af02      	add	r7, sp, #8
	float angle_ac_x, angle_ac_y, angle_ac_z;
	float angle_gy_x = 0, angle_gy_y = 0, angle_gy_z = 0;
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
	float f_ac[3];
	float angle_tmp_x, angle_tmp_y, angle_tmp_z;
	float dt;
	read_gyro(&hi2c1, &my_mpu6050, raw_data);
 8001e62:	2200      	movs	r2, #0
 8001e64:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <update_mpu6050+0x50>)
 8001e66:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <update_mpu6050+0x54>)
 8001e68:	f004 fb0c 	bl	8006484 <read_gyro>
	read_accel(&hi2c1, &my_mpu6050, gravity_acceleration);
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	490a      	ldr	r1, [pc, #40]	@ (8001e98 <update_mpu6050+0x50>)
 8001e70:	480a      	ldr	r0, [pc, #40]	@ (8001e9c <update_mpu6050+0x54>)
 8001e72:	f004 fb8e 	bl	8006592 <read_accel>
	dt = get_dt(&mpu_prev_time);
 8001e76:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <update_mpu6050+0x58>)
 8001e78:	f7ff ffbc 	bl	8001df4 <get_dt>
 8001e7c:	6278      	str	r0, [r7, #36]	@ 0x24
	f_ac[0] = my_mpu6050.ac_x_g;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <update_mpu6050+0x50>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	603b      	str	r3, [r7, #0]
	f_ac[1] = my_mpu6050.ac_y_g;
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <update_mpu6050+0x50>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	607b      	str	r3, [r7, #4]
	f_ac[2] = my_mpu6050.ac_z_g;
 8001e8a:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <update_mpu6050+0x50>)
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 3; i++) {
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e94:	e038      	b.n	8001f08 <update_mpu6050+0xc0>
 8001e96:	bf00      	nop
 8001e98:	200007d0 	.word	0x200007d0
 8001e9c:	20000234 	.word	0x20000234
 8001ea0:	20000808 	.word	0x20000808
		LPF_Output[i] = LPF_Output[i] * 0.9 + f_ac[i] * 0.1;
 8001ea4:	4ac6      	ldr	r2, [pc, #792]	@ (80021c0 <update_mpu6050+0x378>)
 8001ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fabb 	bl	8000428 <__aeabi_f2d>
 8001eb2:	a3bd      	add	r3, pc, #756	@ (adr r3, 80021a8 <update_mpu6050+0x360>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fb0e 	bl	80004d8 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	461d      	mov	r5, r3
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3338      	adds	r3, #56	@ 0x38
 8001eca:	443b      	add	r3, r7
 8001ecc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe faa9 	bl	8000428 <__aeabi_f2d>
 8001ed6:	a3b6      	add	r3, pc, #728	@ (adr r3, 80021b0 <update_mpu6050+0x368>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fafc 	bl	80004d8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f940 	bl	800016c <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fdc8 	bl	8000a88 <__aeabi_d2f>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	49b1      	ldr	r1, [pc, #708]	@ (80021c0 <update_mpu6050+0x378>)
 8001efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 8001f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	ddca      	ble.n	8001ea4 <update_mpu6050+0x5c>
	}

	f_ac[0] = LPF_Output[0];
 8001f0e:	4bac      	ldr	r3, [pc, #688]	@ (80021c0 <update_mpu6050+0x378>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	603b      	str	r3, [r7, #0]
	f_ac[1] = LPF_Output[1];
 8001f14:	4baa      	ldr	r3, [pc, #680]	@ (80021c0 <update_mpu6050+0x378>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	607b      	str	r3, [r7, #4]
	f_ac[2] = LPF_Output[2];
 8001f1a:	4ba9      	ldr	r3, [pc, #676]	@ (80021c0 <update_mpu6050+0x378>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	60bb      	str	r3, [r7, #8]

	my_mpu6050.gy_x_dps = (int16_t) ((my_mpu6050.gy_x - offset[0]) / my_mpu6050.gyro_change_unit_factor);
 8001f20:	4ba8      	ldr	r3, [pc, #672]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f26:	461a      	mov	r2, r3
 8001f28:	4ba7      	ldr	r3, [pc, #668]	@ (80021c8 <update_mpu6050+0x380>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe feb4 	bl	8000c9c <__aeabi_i2f>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4ba3      	ldr	r3, [pc, #652]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f7fe ffb5 	bl	8000eac <__aeabi_fdiv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f8c3 	bl	80010d0 <__aeabi_f2iz>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fea4 	bl	8000c9c <__aeabi_i2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a9b      	ldr	r2, [pc, #620]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f58:	6153      	str	r3, [r2, #20]
	my_mpu6050.gy_y_dps = (int16_t) ((my_mpu6050.gy_y - offset[1]) / my_mpu6050.gyro_change_unit_factor);
 8001f5a:	4b9a      	ldr	r3, [pc, #616]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b99      	ldr	r3, [pc, #612]	@ (80021c8 <update_mpu6050+0x380>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fe97 	bl	8000c9c <__aeabi_i2f>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b94      	ldr	r3, [pc, #592]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f7fe ff98 	bl	8000eac <__aeabi_fdiv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f8a6 	bl	80010d0 <__aeabi_f2iz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fe87 	bl	8000c9c <__aeabi_i2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a8c      	ldr	r2, [pc, #560]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f92:	6193      	str	r3, [r2, #24]
	my_mpu6050.gy_z_dps = (int16_t) ((my_mpu6050.gy_z - offset[2]) / my_mpu6050.gyro_change_unit_factor);
 8001f94:	4b8b      	ldr	r3, [pc, #556]	@ (80021c4 <update_mpu6050+0x37c>)
 8001f96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80021c8 <update_mpu6050+0x380>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fe7a 	bl	8000c9c <__aeabi_i2f>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b86      	ldr	r3, [pc, #536]	@ (80021c4 <update_mpu6050+0x37c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe ff7b 	bl	8000eac <__aeabi_fdiv>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f889 	bl	80010d0 <__aeabi_f2iz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fe6a 	bl	8000c9c <__aeabi_i2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a7e      	ldr	r2, [pc, #504]	@ (80021c4 <update_mpu6050+0x37c>)
 8001fcc:	61d3      	str	r3, [r2, #28]
	angle_ac_x = atan(f_ac[1] / sqrt((pow(f_ac[0], 2) + pow(f_ac[2], 2))));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa29 	bl	8000428 <__aeabi_f2d>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	460d      	mov	r5, r1
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa23 	bl	8000428 <__aeabi_f2d>
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fea:	f006 fff9 	bl	8008fe0 <pow>
 8001fee:	4680      	mov	r8, r0
 8001ff0:	4689      	mov	r9, r1
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa17 	bl	8000428 <__aeabi_f2d>
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002002:	f006 ffed 	bl	8008fe0 <pow>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4640      	mov	r0, r8
 800200c:	4649      	mov	r1, r9
 800200e:	f7fe f8ad 	bl	800016c <__adddf3>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f007 f849 	bl	80090b0 <sqrt>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe fb81 	bl	800072c <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f007 f861 	bl	80090f8 <atan>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fd23 	bl	8000a88 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	623b      	str	r3, [r7, #32]
	angle_ac_x *= RADIAN_TO_DEGREE;
 8002046:	6a38      	ldr	r0, [r7, #32]
 8002048:	f7fe f9ee 	bl	8000428 <__aeabi_f2d>
 800204c:	a35a      	add	r3, pc, #360	@ (adr r3, 80021b8 <update_mpu6050+0x370>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe fa41 	bl	80004d8 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fd13 	bl	8000a88 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	623b      	str	r3, [r7, #32]
	angle_ac_y = atan(-f_ac[0] / sqrt((pow(f_ac[1], 2) + pow(f_ac[2], 2))));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe f9db 	bl	8000428 <__aeabi_f2d>
 8002072:	4604      	mov	r4, r0
 8002074:	460d      	mov	r5, r1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f9d5 	bl	8000428 <__aeabi_f2d>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002086:	f006 ffab 	bl	8008fe0 <pow>
 800208a:	4680      	mov	r8, r0
 800208c:	4689      	mov	r9, r1
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f9c9 	bl	8000428 <__aeabi_f2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800209e:	f006 ff9f 	bl	8008fe0 <pow>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4640      	mov	r0, r8
 80020a8:	4649      	mov	r1, r9
 80020aa:	f7fe f85f 	bl	800016c <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f006 fffb 	bl	80090b0 <sqrt>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fb33 	bl	800072c <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f007 f813 	bl	80090f8 <atan>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fcd5 	bl	8000a88 <__aeabi_d2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	61fb      	str	r3, [r7, #28]
	angle_ac_y *= RADIAN_TO_DEGREE;
 80020e2:	69f8      	ldr	r0, [r7, #28]
 80020e4:	f7fe f9a0 	bl	8000428 <__aeabi_f2d>
 80020e8:	a333      	add	r3, pc, #204	@ (adr r3, 80021b8 <update_mpu6050+0x370>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe f9f3 	bl	80004d8 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fcc5 	bl	8000a88 <__aeabi_d2f>
 80020fe:	4603      	mov	r3, r0
 8002100:	61fb      	str	r3, [r7, #28]
	angle_ac_z = atan(sqrt(pow(f_ac[0], 2) + pow(f_ac[1], 2) / f_ac[2]));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f98f 	bl	8000428 <__aeabi_f2d>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002112:	f006 ff65 	bl	8008fe0 <pow>
 8002116:	4604      	mov	r4, r0
 8002118:	460d      	mov	r5, r1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f983 	bl	8000428 <__aeabi_f2d>
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800212a:	f006 ff59 	bl	8008fe0 <pow>
 800212e:	4680      	mov	r8, r0
 8002130:	4689      	mov	r9, r1
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f977 	bl	8000428 <__aeabi_f2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4640      	mov	r0, r8
 8002140:	4649      	mov	r1, r9
 8002142:	f7fe faf3 	bl	800072c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4620      	mov	r0, r4
 800214c:	4629      	mov	r1, r5
 800214e:	f7fe f80d 	bl	800016c <__adddf3>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f006 ffa9 	bl	80090b0 <sqrt>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f006 ffc7 	bl	80090f8 <atan>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fc89 	bl	8000a88 <__aeabi_d2f>
 8002176:	4603      	mov	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
	angle_ac_z *= RADIAN_TO_DEGREE;
 800217a:	69b8      	ldr	r0, [r7, #24]
 800217c:	f7fe f954 	bl	8000428 <__aeabi_f2d>
 8002180:	a30d      	add	r3, pc, #52	@ (adr r3, 80021b8 <update_mpu6050+0x370>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe f9a7 	bl	80004d8 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f7fe fc79 	bl	8000a88 <__aeabi_d2f>
 8002196:	4603      	mov	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]
	angle_gy_x += (my_mpu6050.gy_x_dps - base_gy_x) * dt;
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <update_mpu6050+0x37c>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <update_mpu6050+0x384>)
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	e013      	b.n	80021d0 <update_mpu6050+0x388>
 80021a8:	cccccccd 	.word	0xcccccccd
 80021ac:	3feccccc 	.word	0x3feccccc
 80021b0:	9999999a 	.word	0x9999999a
 80021b4:	3fb99999 	.word	0x3fb99999
 80021b8:	b05cc3e8 	.word	0xb05cc3e8
 80021bc:	404ca5dd 	.word	0x404ca5dd
 80021c0:	2000083c 	.word	0x2000083c
 80021c4:	200007d0 	.word	0x200007d0
 80021c8:	20000008 	.word	0x20000008
 80021cc:	200007fc 	.word	0x200007fc
 80021d0:	f7fe fcae 	bl	8000b30 <__aeabi_fsub>
 80021d4:	4603      	mov	r3, r0
 80021d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fdb3 	bl	8000d44 <__aeabi_fmul>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021e4:	f7fe fca6 	bl	8000b34 <__addsf3>
 80021e8:	4603      	mov	r3, r0
 80021ea:	633b      	str	r3, [r7, #48]	@ 0x30
	angle_gy_y += (my_mpu6050.gy_y_dps - base_gy_y) * dt;
 80021ec:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <update_mpu6050+0x45c>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a2d      	ldr	r2, [pc, #180]	@ (80022a8 <update_mpu6050+0x460>)
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fc9a 	bl	8000b30 <__aeabi_fsub>
 80021fc:	4603      	mov	r3, r0
 80021fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fd9f 	bl	8000d44 <__aeabi_fmul>
 8002206:	4603      	mov	r3, r0
 8002208:	4619      	mov	r1, r3
 800220a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800220c:	f7fe fc92 	bl	8000b34 <__addsf3>
 8002210:	4603      	mov	r3, r0
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
	angle_gy_z += (my_mpu6050.gy_z_dps) * dt;
 8002214:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <update_mpu6050+0x45c>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fd92 	bl	8000d44 <__aeabi_fmul>
 8002220:	4603      	mov	r3, r0
 8002222:	4619      	mov	r1, r3
 8002224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002226:	f7fe fc85 	bl	8000b34 <__addsf3>
 800222a:	4603      	mov	r3, r0
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
	angle_tmp_x = angle_pitch + angle_gy_x;
 800222e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <update_mpu6050+0x464>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002236:	f7fe fc7d 	bl	8000b34 <__addsf3>
 800223a:	4603      	mov	r3, r0
 800223c:	617b      	str	r3, [r7, #20]
	angle_tmp_y = angle_roll + angle_gy_y;
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <update_mpu6050+0x468>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002246:	f7fe fc75 	bl	8000b34 <__addsf3>
 800224a:	4603      	mov	r3, r0
 800224c:	613b      	str	r3, [r7, #16]
	angle_tmp_z = angle_yaw + angle_gy_z;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <update_mpu6050+0x46c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002256:	f7fe fc6d 	bl	8000b34 <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	60fb      	str	r3, [r7, #12]
	kalman_filter(f_ac[0], my_mpu6050.gy_x_dps, &k[0], &bias[0], dt);
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <update_mpu6050+0x45c>)
 8002262:	6959      	ldr	r1, [r3, #20]
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <update_mpu6050+0x470>)
 800226a:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <update_mpu6050+0x474>)
 800226c:	f000 f958 	bl	8002520 <kalman_filter>
	kalman_filter(f_ac[1], my_mpu6050.gy_y_dps, &k[1], &bias[1], dt);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <update_mpu6050+0x45c>)
 8002274:	6999      	ldr	r1, [r3, #24]
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <update_mpu6050+0x478>)
 800227c:	4a11      	ldr	r2, [pc, #68]	@ (80022c4 <update_mpu6050+0x47c>)
 800227e:	f000 f94f 	bl	8002520 <kalman_filter>
	//angle_pitch = ALPHA * angle_tmp_x + (1.0 - ALPHA) * angle_ac_x;
	//angle_roll = ALPHA * angle_tmp_y + (1.0 - ALPHA) * angle_ac_y;
	angle_pitch = k[0];
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <update_mpu6050+0x474>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a09      	ldr	r2, [pc, #36]	@ (80022ac <update_mpu6050+0x464>)
 8002288:	6013      	str	r3, [r2, #0]
	angle_roll = k[1];
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <update_mpu6050+0x474>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4a08      	ldr	r2, [pc, #32]	@ (80022b0 <update_mpu6050+0x468>)
 8002290:	6013      	str	r3, [r2, #0]
	angle_yaw = angle_tmp_z;
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <update_mpu6050+0x46c>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	3738      	adds	r7, #56	@ 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022a2:	bf00      	nop
 80022a4:	200007d0 	.word	0x200007d0
 80022a8:	20000800 	.word	0x20000800
 80022ac:	2000080c 	.word	0x2000080c
 80022b0:	20000810 	.word	0x20000810
 80022b4:	20000814 	.word	0x20000814
 80022b8:	20000854 	.word	0x20000854
 80022bc:	20000848 	.word	0x20000848
 80022c0:	20000858 	.word	0x20000858
 80022c4:	2000084c 	.word	0x2000084c

080022c8 <map>:

long map(long val, long in_min, long in_max, long out_min, long out_max) {
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
	return (long)(((val - in_min)/ (double)(in_max - in_min)) * (out_max - out_min)  + out_min);
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f891 	bl	8000404 <__aeabi_i2d>
 80022e2:	4604      	mov	r4, r0
 80022e4:	460d      	mov	r5, r1
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f889 	bl	8000404 <__aeabi_i2d>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f7fe fa17 	bl	800072c <__aeabi_ddiv>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4614      	mov	r4, r2
 8002304:	461d      	mov	r5, r3
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f879 	bl	8000404 <__aeabi_i2d>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fe f8dd 	bl	80004d8 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4614      	mov	r4, r2
 8002324:	461d      	mov	r5, r3
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	f7fe f86c 	bl	8000404 <__aeabi_i2d>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4620      	mov	r0, r4
 8002332:	4629      	mov	r1, r5
 8002334:	f7fd ff1a 	bl	800016c <__adddf3>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fb7a 	bl	8000a38 <__aeabi_d2iz>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bdb0      	pop	{r4, r5, r7, pc}

0800234e <map_f>:
float map_f(float val, float in_min, float in_max, float out_min, float out_max) {
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
	return ((val - in_min)/ (in_max - in_min)) * (out_max - out_min)  + out_min;
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7fe fbe6 	bl	8000b30 <__aeabi_fsub>
 8002364:	4603      	mov	r3, r0
 8002366:	461c      	mov	r4, r3
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fbe0 	bl	8000b30 <__aeabi_fsub>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f7fe fd99 	bl	8000eac <__aeabi_fdiv>
 800237a:	4603      	mov	r3, r0
 800237c:	461c      	mov	r4, r3
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	6a38      	ldr	r0, [r7, #32]
 8002382:	f7fe fbd5 	bl	8000b30 <__aeabi_fsub>
 8002386:	4603      	mov	r3, r0
 8002388:	4619      	mov	r1, r3
 800238a:	4620      	mov	r0, r4
 800238c:	f7fe fcda 	bl	8000d44 <__aeabi_fmul>
 8002390:	4603      	mov	r3, r0
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fbcd 	bl	8000b34 <__addsf3>
 800239a:	4603      	mov	r3, r0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}

080023a4 <set_dual_PID>:

	PID->output = pterm + PID->stabilize_iterm + dterm;
	PID->prev_rate = error;

}
void set_dual_PID(PID* PID) {
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08b      	sub	sp, #44	@ 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	float angle_error = PID->target_angle - PID->angle;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7fe fbba 	bl	8000b30 <__aeabi_fsub>
 80023bc:	4603      	mov	r3, r0
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
	float desired_rate;
	float dInput;
	float stabilize_pterm;
	float rate_pterm;
	float rate_dterm;
	float dt = get_dt(&PID->prev_time);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3310      	adds	r3, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fd15 	bl	8001df4 <get_dt>
 80023ca:	6238      	str	r0, [r7, #32]
	stabilize_pterm = PID->stabilize_kp * angle_error;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	4619      	mov	r1, r3
 80023d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023d4:	f7fe fcb6 	bl	8000d44 <__aeabi_fmul>
 80023d8:	4603      	mov	r3, r0
 80023da:	61fb      	str	r3, [r7, #28]
	PID->stabilize_iterm = PID->stabilize_iterm + PID->stabilize_ki * angle_error * dt;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fcac 	bl	8000d44 <__aeabi_fmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	6a39      	ldr	r1, [r7, #32]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fca7 	bl	8000d44 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7fe fb9a 	bl	8000b34 <__addsf3>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c
	desired_rate = stabilize_pterm;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	61bb      	str	r3, [r7, #24]
	rate_error = desired_rate - PID->rate;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4619      	mov	r1, r3
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	f7fe fb8c 	bl	8000b30 <__aeabi_fsub>
 8002418:	4603      	mov	r3, r0
 800241a:	617b      	str	r3, [r7, #20]
	dInput = rate_error - PID->prev_rate;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4619      	mov	r1, r3
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7fe fb84 	bl	8000b30 <__aeabi_fsub>
 8002428:	4603      	mov	r3, r0
 800242a:	613b      	str	r3, [r7, #16]
	PID->prev_rate = rate_error;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	60da      	str	r2, [r3, #12]
	rate_pterm = PID->rate_kp * rate_error;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4619      	mov	r1, r3
 8002438:	6978      	ldr	r0, [r7, #20]
 800243a:	f7fe fc83 	bl	8000d44 <__aeabi_fmul>
 800243e:	4603      	mov	r3, r0
 8002440:	60fb      	str	r3, [r7, #12]
	PID->rate_iterm = PID->rate_iterm + PID->rate_ki * rate_error * dt;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	6979      	ldr	r1, [r7, #20]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fc79 	bl	8000d44 <__aeabi_fmul>
 8002452:	4603      	mov	r3, r0
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fc74 	bl	8000d44 <__aeabi_fmul>
 800245c:	4603      	mov	r3, r0
 800245e:	4619      	mov	r1, r3
 8002460:	4620      	mov	r0, r4
 8002462:	f7fe fb67 	bl	8000b34 <__addsf3>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	631a      	str	r2, [r3, #48]	@ 0x30
	rate_dterm = PID->rate_kd *(dInput);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	4619      	mov	r1, r3
 8002474:	6938      	ldr	r0, [r7, #16]
 8002476:	f7fe fc65 	bl	8000d44 <__aeabi_fmul>
 800247a:	4603      	mov	r3, r0
 800247c:	60bb      	str	r3, [r7, #8]
	PID->output = rate_pterm + PID->rate_iterm + rate_dterm;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fb55 	bl	8000b34 <__addsf3>
 800248a:	4603      	mov	r3, r0
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb50 	bl	8000b34 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800249c:	bf00      	nop
 800249e:	372c      	adds	r7, #44	@ 0x2c
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}

080024a4 <constrain>:
float constrain(float value, float min, float max) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	if (value > max) {
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7fe fe02 	bl	80010bc <__aeabi_fcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <constrain+0x20>
		value = max;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e008      	b.n	80024d6 <constrain+0x32>
	} else if (value < min) {
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7fe fdda 	bl	8001080 <__aeabi_fcmplt>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <constrain+0x32>
		value = min;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	60fb      	str	r3, [r7, #12]
	}
	return value;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <emergency_stop>:
void emergency_stop() {
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	control_angle[0] = 0;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <emergency_stop+0x38>)
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
	control_angle[1] = 0;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <emergency_stop+0x38>)
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
	control_angle[2] = 0;
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <emergency_stop+0x38>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
	if (throttle > 1000) {
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <emergency_stop+0x3c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002504:	dd04      	ble.n	8002510 <emergency_stop+0x30>
		throttle--;
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <emergency_stop+0x3c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	4a03      	ldr	r2, [pc, #12]	@ (800251c <emergency_stop+0x3c>)
 800250e:	6013      	str	r3, [r2, #0]
	}
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000830 	.word	0x20000830
 800251c:	20000004 	.word	0x20000004

08002520 <kalman_filter>:
void kalman_filter(float accel_angle, float gyro_rate, float* angle, float* bias, float dt) {
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b08d      	sub	sp, #52	@ 0x34
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
	float rate = gyro_rate - *bias;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	68b8      	ldr	r0, [r7, #8]
 8002536:	f7fe fafb 	bl	8000b30 <__aeabi_fsub>
 800253a:	4603      	mov	r3, r0
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	*angle += rate * dt;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681c      	ldr	r4, [r3, #0]
 8002542:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002544:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002546:	f7fe fbfd 	bl	8000d44 <__aeabi_fmul>
 800254a:	4603      	mov	r3, r0
 800254c:	4619      	mov	r1, r3
 800254e:	4620      	mov	r0, r4
 8002550:	f7fe faf0 	bl	8000b34 <__addsf3>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	601a      	str	r2, [r3, #0]

	P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 800255c:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <kalman_filter+0x218>)
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	4b75      	ldr	r3, [pc, #468]	@ (8002738 <kalman_filter+0x218>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fbec 	bl	8000d44 <__aeabi_fmul>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	4b71      	ldr	r3, [pc, #452]	@ (8002738 <kalman_filter+0x218>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7fe fada 	bl	8000b30 <__aeabi_fsub>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	4b6d      	ldr	r3, [pc, #436]	@ (8002738 <kalman_filter+0x218>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f7fe fad2 	bl	8000b30 <__aeabi_fsub>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <kalman_filter+0x21c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f7fe facc 	bl	8000b34 <__addsf3>
 800259c:	4603      	mov	r3, r0
 800259e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fbcf 	bl	8000d44 <__aeabi_fmul>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4619      	mov	r1, r3
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7fe fac2 	bl	8000b34 <__addsf3>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b60      	ldr	r3, [pc, #384]	@ (8002738 <kalman_filter+0x218>)
 80025b6:	601a      	str	r2, [r3, #0]
	P[0][1] -= dt * P[1][1];
 80025b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002738 <kalman_filter+0x218>)
 80025ba:	685c      	ldr	r4, [r3, #4]
 80025bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002738 <kalman_filter+0x218>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fbbe 	bl	8000d44 <__aeabi_fmul>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4619      	mov	r1, r3
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7fe faaf 	bl	8000b30 <__aeabi_fsub>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b58      	ldr	r3, [pc, #352]	@ (8002738 <kalman_filter+0x218>)
 80025d8:	605a      	str	r2, [r3, #4]
	P[1][0] -= dt * P[1][1];
 80025da:	4b57      	ldr	r3, [pc, #348]	@ (8002738 <kalman_filter+0x218>)
 80025dc:	689c      	ldr	r4, [r3, #8]
 80025de:	4b56      	ldr	r3, [pc, #344]	@ (8002738 <kalman_filter+0x218>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fbad 	bl	8000d44 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4619      	mov	r1, r3
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7fe fa9e 	bl	8000b30 <__aeabi_fsub>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002738 <kalman_filter+0x218>)
 80025fa:	609a      	str	r2, [r3, #8]
	P[1][1] += Q_bias * dt;
 80025fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002738 <kalman_filter+0x218>)
 80025fe:	68dc      	ldr	r4, [r3, #12]
 8002600:	4b4f      	ldr	r3, [pc, #316]	@ (8002740 <kalman_filter+0x220>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb9c 	bl	8000d44 <__aeabi_fmul>
 800260c:	4603      	mov	r3, r0
 800260e:	4619      	mov	r1, r3
 8002610:	4620      	mov	r0, r4
 8002612:	f7fe fa8f 	bl	8000b34 <__addsf3>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	4b47      	ldr	r3, [pc, #284]	@ (8002738 <kalman_filter+0x218>)
 800261c:	60da      	str	r2, [r3, #12]

	float S = P[0][0] + R_measure;
 800261e:	4b46      	ldr	r3, [pc, #280]	@ (8002738 <kalman_filter+0x218>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a48      	ldr	r2, [pc, #288]	@ (8002744 <kalman_filter+0x224>)
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fa83 	bl	8000b34 <__addsf3>
 800262e:	4603      	mov	r3, r0
 8002630:	62bb      	str	r3, [r7, #40]	@ 0x28
	float K[2] = {P[0][0] / S, P[1][0] / S};
 8002632:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <kalman_filter+0x218>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fc37 	bl	8000eac <__aeabi_fdiv>
 800263e:	4603      	mov	r3, r0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <kalman_filter+0x218>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fc2f 	bl	8000eac <__aeabi_fdiv>
 800264e:	4603      	mov	r3, r0
 8002650:	61bb      	str	r3, [r7, #24]

	float y = accel_angle - *angle;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7fe fa69 	bl	8000b30 <__aeabi_fsub>
 800265e:	4603      	mov	r3, r0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
	*angle += K[0] * y;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681c      	ldr	r4, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fb6a 	bl	8000d44 <__aeabi_fmul>
 8002670:	4603      	mov	r3, r0
 8002672:	4619      	mov	r1, r3
 8002674:	4620      	mov	r0, r4
 8002676:	f7fe fa5d 	bl	8000b34 <__addsf3>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
	*bias += K[1] * y;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681c      	ldr	r4, [r3, #0]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fb5a 	bl	8000d44 <__aeabi_fmul>
 8002690:	4603      	mov	r3, r0
 8002692:	4619      	mov	r1, r3
 8002694:	4620      	mov	r0, r4
 8002696:	f7fe fa4d 	bl	8000b34 <__addsf3>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	601a      	str	r2, [r3, #0]

	float temp_P00 = P[0][0];
 80026a2:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <kalman_filter+0x218>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	623b      	str	r3, [r7, #32]
	float temp_P01 = P[0][1];
 80026a8:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <kalman_filter+0x218>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61fb      	str	r3, [r7, #28]

	P[0][0] -= K[0] * temp_P00;
 80026ae:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <kalman_filter+0x218>)
 80026b0:	681c      	ldr	r4, [r3, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	6a39      	ldr	r1, [r7, #32]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fb44 	bl	8000d44 <__aeabi_fmul>
 80026bc:	4603      	mov	r3, r0
 80026be:	4619      	mov	r1, r3
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7fe fa35 	bl	8000b30 <__aeabi_fsub>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <kalman_filter+0x218>)
 80026cc:	601a      	str	r2, [r3, #0]
	P[0][1] -= K[0] * temp_P01;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <kalman_filter+0x218>)
 80026d0:	685c      	ldr	r4, [r3, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	69f9      	ldr	r1, [r7, #28]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb34 	bl	8000d44 <__aeabi_fmul>
 80026dc:	4603      	mov	r3, r0
 80026de:	4619      	mov	r1, r3
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7fe fa25 	bl	8000b30 <__aeabi_fsub>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <kalman_filter+0x218>)
 80026ec:	605a      	str	r2, [r3, #4]
	P[1][0] -= K[1] * temp_P00;
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <kalman_filter+0x218>)
 80026f0:	689c      	ldr	r4, [r3, #8]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb24 	bl	8000d44 <__aeabi_fmul>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4619      	mov	r1, r3
 8002700:	4620      	mov	r0, r4
 8002702:	f7fe fa15 	bl	8000b30 <__aeabi_fsub>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <kalman_filter+0x218>)
 800270c:	609a      	str	r2, [r3, #8]
	P[1][1] -= K[1] * temp_P01;
 800270e:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <kalman_filter+0x218>)
 8002710:	68dc      	ldr	r4, [r3, #12]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	69f9      	ldr	r1, [r7, #28]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fb14 	bl	8000d44 <__aeabi_fmul>
 800271c:	4603      	mov	r3, r0
 800271e:	4619      	mov	r1, r3
 8002720:	4620      	mov	r0, r4
 8002722:	f7fe fa05 	bl	8000b30 <__aeabi_fsub>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <kalman_filter+0x218>)
 800272c:	60da      	str	r2, [r3, #12]
}
 800272e:	bf00      	nop
 8002730:	3734      	adds	r7, #52	@ 0x34
 8002732:	46bd      	mov	sp, r7
 8002734:	bd90      	pop	{r4, r7, pc}
 8002736:	bf00      	nop
 8002738:	20000014 	.word	0x20000014
 800273c:	20000024 	.word	0x20000024
 8002740:	20000028 	.word	0x20000028
 8002744:	2000002c 	.word	0x2000002c

08002748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800274c:	b672      	cpsid	i
}
 800274e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <Error_Handler+0x8>

08002754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <HAL_MspInit+0x5c>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4a14      	ldr	r2, [pc, #80]	@ (80027b0 <HAL_MspInit+0x5c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6193      	str	r3, [r2, #24]
 8002766:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <HAL_MspInit+0x5c>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <HAL_MspInit+0x5c>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <HAL_MspInit+0x5c>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]
 800277e:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <HAL_MspInit+0x5c>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800278a:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <HAL_MspInit+0x60>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <HAL_MspInit+0x60>)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000

080027b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	@ 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002848 <HAL_I2C_MspInit+0x90>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d132      	bne.n	800283e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_I2C_MspInit+0x94>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <HAL_I2C_MspInit+0x94>)
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_I2C_MspInit+0x94>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f6:	2312      	movs	r3, #18
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4812      	ldr	r0, [pc, #72]	@ (8002850 <HAL_I2C_MspInit+0x98>)
 8002806:	f000 fc67 	bl	80030d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_I2C_MspInit+0x9c>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002820:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <HAL_I2C_MspInit+0x9c>)
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_I2C_MspInit+0x94>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a08      	ldr	r2, [pc, #32]	@ (800284c <HAL_I2C_MspInit+0x94>)
 800282c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_I2C_MspInit+0x94>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	@ 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40005400 	.word	0x40005400
 800284c:	40021000 	.word	0x40021000
 8002850:	40010c00 	.word	0x40010c00
 8002854:	40010000 	.word	0x40010000

08002858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a09      	ldr	r2, [pc, #36]	@ (800288c <HAL_TIM_PWM_MspInit+0x34>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10b      	bne.n	8002882 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_TIM_PWM_MspInit+0x38>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <HAL_TIM_PWM_MspInit+0x38>)
 8002870:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002874:	6193      	str	r3, [r2, #24]
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_TIM_PWM_MspInit+0x38>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a10      	ldr	r2, [pc, #64]	@ (80028f0 <HAL_TIM_MspPostInit+0x5c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d118      	bne.n	80028e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <HAL_TIM_MspPostInit+0x60>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <HAL_TIM_MspPostInit+0x60>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6193      	str	r3, [r2, #24]
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <HAL_TIM_MspPostInit+0x60>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80028cc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80028d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2302      	movs	r3, #2
 80028d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <HAL_TIM_MspPostInit+0x64>)
 80028e2:	f000 fbf9 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028e6:	bf00      	nop
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010800 	.word	0x40010800

080028fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0318 	add.w	r3, r7, #24
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3f      	ldr	r2, [pc, #252]	@ (8002a14 <HAL_UART_MspInit+0x118>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d138      	bne.n	800298e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800291c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	4a3d      	ldr	r2, [pc, #244]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002926:	61d3      	str	r3, [r2, #28]
 8002928:	4b3b      	ldr	r3, [pc, #236]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002934:	4b38      	ldr	r3, [pc, #224]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4a37      	ldr	r2, [pc, #220]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b35      	ldr	r3, [pc, #212]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800294c:	2304      	movs	r3, #4
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	4619      	mov	r1, r3
 800295e:	482f      	ldr	r0, [pc, #188]	@ (8002a1c <HAL_UART_MspInit+0x120>)
 8002960:	f000 fbba 	bl	80030d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002964:	2308      	movs	r3, #8
 8002966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	4619      	mov	r1, r3
 8002976:	4829      	ldr	r0, [pc, #164]	@ (8002a1c <HAL_UART_MspInit+0x120>)
 8002978:	f000 fbae 	bl	80030d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2026      	movs	r0, #38	@ 0x26
 8002982:	f000 fac0 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002986:	2026      	movs	r0, #38	@ 0x26
 8002988:	f000 fad9 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800298c:	e03e      	b.n	8002a0c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_UART_MspInit+0x124>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d139      	bne.n	8002a0c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002998:	4b1f      	ldr	r3, [pc, #124]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 800299e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_UART_MspInit+0x11c>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	4619      	mov	r1, r3
 80029dc:	4811      	ldr	r0, [pc, #68]	@ (8002a24 <HAL_UART_MspInit+0x128>)
 80029de:	f000 fb7b 	bl	80030d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 0318 	add.w	r3, r7, #24
 80029f4:	4619      	mov	r1, r3
 80029f6:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <HAL_UART_MspInit+0x128>)
 80029f8:	f000 fb6e 	bl	80030d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2100      	movs	r1, #0
 8002a00:	2027      	movs	r0, #39	@ 0x27
 8002a02:	f000 fa80 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a06:	2027      	movs	r0, #39	@ 0x27
 8002a08:	f000 fa99 	bl	8002f3e <HAL_NVIC_EnableIRQ>
}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	@ 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	40004800 	.word	0x40004800
 8002a24:	40010c00 	.word	0x40010c00

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <NMI_Handler+0x4>

08002a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <MemManage_Handler+0x4>

08002a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 f92e 	bl	8002cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <USART2_IRQHandler+0x10>)
 8002a86:	f002 fe73 	bl	8005770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200002d0 	.word	0x200002d0

08002a94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <USART3_IRQHandler+0x10>)
 8002a9a:	f002 fe69 	bl	8005770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000318 	.word	0x20000318

08002aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <_kill>:

int _kill(int pid, int sig)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac0:	f004 fbb4 	bl	800722c <__errno>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2216      	movs	r2, #22
 8002ac8:	601a      	str	r2, [r3, #0]
  return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_exit>:

void _exit (int status)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ade:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffe7 	bl	8002ab6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <_exit+0x12>

08002aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e00a      	b.n	8002b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002afe:	f3af 8000 	nop.w
 8002b02:	4601      	mov	r1, r0
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	b2ca      	uxtb	r2, r1
 8002b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dbf0      	blt.n	8002afe <_read+0x12>
  }

  return len;
 8002b1c:	687b      	ldr	r3, [r7, #4]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b4c:	605a      	str	r2, [r3, #4]
  return 0;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <_isatty>:

int _isatty(int file)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <_sbrk+0x5c>)
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <_sbrk+0x60>)
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <_sbrk+0x64>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <_sbrk+0x64>)
 8002ba6:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <_sbrk+0x68>)
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <_sbrk+0x64>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d207      	bcs.n	8002bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb8:	f004 fb38 	bl	800722c <__errno>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	e009      	b.n	8002bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc8:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a05      	ldr	r2, [pc, #20]	@ (8002bec <_sbrk+0x64>)
 8002bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20005000 	.word	0x20005000
 8002be8:	00000400 	.word	0x00000400
 8002bec:	20000860 	.word	0x20000860
 8002bf0:	200009b8 	.word	0x200009b8

08002bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c00:	f7ff fff8 	bl	8002bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c04:	480b      	ldr	r0, [pc, #44]	@ (8002c34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c06:	490c      	ldr	r1, [pc, #48]	@ (8002c38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c08:	4a0c      	ldr	r2, [pc, #48]	@ (8002c3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c0c:	e002      	b.n	8002c14 <LoopCopyDataInit>

08002c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c12:	3304      	adds	r3, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c18:	d3f9      	bcc.n	8002c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1a:	4a09      	ldr	r2, [pc, #36]	@ (8002c40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c1c:	4c09      	ldr	r4, [pc, #36]	@ (8002c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c20:	e001      	b.n	8002c26 <LoopFillZerobss>

08002c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c24:	3204      	adds	r2, #4

08002c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c28:	d3fb      	bcc.n	8002c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f004 fb05 	bl	8007238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2e:	f7fe fa95 	bl	800115c <main>
  bx lr
 8002c32:	4770      	bx	lr
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002c3c:	0800a5b8 	.word	0x0800a5b8
  ldr r2, =_sbss
 8002c40:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002c44:	200009b4 	.word	0x200009b4

08002c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC1_2_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c50:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_Init+0x28>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <HAL_Init+0x28>)
 8002c56:	f043 0310 	orr.w	r3, r3, #16
 8002c5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f000 f947 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c62:	200f      	movs	r0, #15
 8002c64:	f000 f808 	bl	8002c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c68:	f7ff fd74 	bl	8002754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c80:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_InitTick+0x54>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_InitTick+0x58>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f95f 	bl	8002f5a <HAL_SYSTICK_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00e      	b.n	8002cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0f      	cmp	r3, #15
 8002caa:	d80a      	bhi.n	8002cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f000 f927 	bl	8002f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb8:	4a06      	ldr	r2, [pc, #24]	@ (8002cd4 <HAL_InitTick+0x5c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000030 	.word	0x20000030
 8002cd0:	20000038 	.word	0x20000038
 8002cd4:	20000034 	.word	0x20000034

08002cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_IncTick+0x1c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_IncTick+0x20>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a03      	ldr	r2, [pc, #12]	@ (8002cf8 <HAL_IncTick+0x20>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000038 	.word	0x20000038
 8002cf8:	20000864 	.word	0x20000864

08002cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b02      	ldr	r3, [pc, #8]	@ (8002d0c <HAL_GetTick+0x10>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000864 	.word	0x20000864

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff fff0 	bl	8002cfc <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffe0 	bl	8002cfc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000038 	.word	0x20000038

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4906      	ldr	r1, [pc, #24]	@ (8002df0 <__NVIC_EnableIRQ+0x34>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	@ (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	@ (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
         );
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f7ff ff90 	bl	8002df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff2d 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f18:	f7ff ff42 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff90 	bl	8002e48 <NVIC_EncodePriority>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff5f 	bl	8002df4 <__NVIC_SetPriority>
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff35 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d008      	beq.n	8002f9c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e020      	b.n	8002fde <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 020e 	bic.w	r2, r2, #14
 8002faa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d005      	beq.n	800300c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2204      	movs	r2, #4
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	e051      	b.n	80030b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020e 	bic.w	r2, r2, #14
 800301a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a22      	ldr	r2, [pc, #136]	@ (80030bc <HAL_DMA_Abort_IT+0xd4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d029      	beq.n	800308a <HAL_DMA_Abort_IT+0xa2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a21      	ldr	r2, [pc, #132]	@ (80030c0 <HAL_DMA_Abort_IT+0xd8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMA_Abort_IT+0x9e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1f      	ldr	r2, [pc, #124]	@ (80030c4 <HAL_DMA_Abort_IT+0xdc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01a      	beq.n	8003080 <HAL_DMA_Abort_IT+0x98>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <HAL_DMA_Abort_IT+0xe0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d012      	beq.n	800307a <HAL_DMA_Abort_IT+0x92>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1c      	ldr	r2, [pc, #112]	@ (80030cc <HAL_DMA_Abort_IT+0xe4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00a      	beq.n	8003074 <HAL_DMA_Abort_IT+0x8c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <HAL_DMA_Abort_IT+0xe8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d102      	bne.n	800306e <HAL_DMA_Abort_IT+0x86>
 8003068:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800306c:	e00e      	b.n	800308c <HAL_DMA_Abort_IT+0xa4>
 800306e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003072:	e00b      	b.n	800308c <HAL_DMA_Abort_IT+0xa4>
 8003074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003078:	e008      	b.n	800308c <HAL_DMA_Abort_IT+0xa4>
 800307a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307e:	e005      	b.n	800308c <HAL_DMA_Abort_IT+0xa4>
 8003080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003084:	e002      	b.n	800308c <HAL_DMA_Abort_IT+0xa4>
 8003086:	2310      	movs	r3, #16
 8003088:	e000      	b.n	800308c <HAL_DMA_Abort_IT+0xa4>
 800308a:	2301      	movs	r3, #1
 800308c:	4a11      	ldr	r2, [pc, #68]	@ (80030d4 <HAL_DMA_Abort_IT+0xec>)
 800308e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
    } 
  }
  return status;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40020008 	.word	0x40020008
 80030c0:	4002001c 	.word	0x4002001c
 80030c4:	40020030 	.word	0x40020030
 80030c8:	40020044 	.word	0x40020044
 80030cc:	40020058 	.word	0x40020058
 80030d0:	4002006c 	.word	0x4002006c
 80030d4:	40020000 	.word	0x40020000

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b08b      	sub	sp, #44	@ 0x2c
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e6:	2300      	movs	r3, #0
 80030e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ea:	e169      	b.n	80033c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030ec:	2201      	movs	r2, #1
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	f040 8158 	bne.w	80033ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4a9a      	ldr	r2, [pc, #616]	@ (8003378 <HAL_GPIO_Init+0x2a0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d05e      	beq.n	80031d2 <HAL_GPIO_Init+0xfa>
 8003114:	4a98      	ldr	r2, [pc, #608]	@ (8003378 <HAL_GPIO_Init+0x2a0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d875      	bhi.n	8003206 <HAL_GPIO_Init+0x12e>
 800311a:	4a98      	ldr	r2, [pc, #608]	@ (800337c <HAL_GPIO_Init+0x2a4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d058      	beq.n	80031d2 <HAL_GPIO_Init+0xfa>
 8003120:	4a96      	ldr	r2, [pc, #600]	@ (800337c <HAL_GPIO_Init+0x2a4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d86f      	bhi.n	8003206 <HAL_GPIO_Init+0x12e>
 8003126:	4a96      	ldr	r2, [pc, #600]	@ (8003380 <HAL_GPIO_Init+0x2a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d052      	beq.n	80031d2 <HAL_GPIO_Init+0xfa>
 800312c:	4a94      	ldr	r2, [pc, #592]	@ (8003380 <HAL_GPIO_Init+0x2a8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d869      	bhi.n	8003206 <HAL_GPIO_Init+0x12e>
 8003132:	4a94      	ldr	r2, [pc, #592]	@ (8003384 <HAL_GPIO_Init+0x2ac>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d04c      	beq.n	80031d2 <HAL_GPIO_Init+0xfa>
 8003138:	4a92      	ldr	r2, [pc, #584]	@ (8003384 <HAL_GPIO_Init+0x2ac>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d863      	bhi.n	8003206 <HAL_GPIO_Init+0x12e>
 800313e:	4a92      	ldr	r2, [pc, #584]	@ (8003388 <HAL_GPIO_Init+0x2b0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d046      	beq.n	80031d2 <HAL_GPIO_Init+0xfa>
 8003144:	4a90      	ldr	r2, [pc, #576]	@ (8003388 <HAL_GPIO_Init+0x2b0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d85d      	bhi.n	8003206 <HAL_GPIO_Init+0x12e>
 800314a:	2b12      	cmp	r3, #18
 800314c:	d82a      	bhi.n	80031a4 <HAL_GPIO_Init+0xcc>
 800314e:	2b12      	cmp	r3, #18
 8003150:	d859      	bhi.n	8003206 <HAL_GPIO_Init+0x12e>
 8003152:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <HAL_GPIO_Init+0x80>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	080031d3 	.word	0x080031d3
 800315c:	080031ad 	.word	0x080031ad
 8003160:	080031bf 	.word	0x080031bf
 8003164:	08003201 	.word	0x08003201
 8003168:	08003207 	.word	0x08003207
 800316c:	08003207 	.word	0x08003207
 8003170:	08003207 	.word	0x08003207
 8003174:	08003207 	.word	0x08003207
 8003178:	08003207 	.word	0x08003207
 800317c:	08003207 	.word	0x08003207
 8003180:	08003207 	.word	0x08003207
 8003184:	08003207 	.word	0x08003207
 8003188:	08003207 	.word	0x08003207
 800318c:	08003207 	.word	0x08003207
 8003190:	08003207 	.word	0x08003207
 8003194:	08003207 	.word	0x08003207
 8003198:	08003207 	.word	0x08003207
 800319c:	080031b5 	.word	0x080031b5
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	4a79      	ldr	r2, [pc, #484]	@ (800338c <HAL_GPIO_Init+0x2b4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031aa:	e02c      	b.n	8003206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	623b      	str	r3, [r7, #32]
          break;
 80031b2:	e029      	b.n	8003208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	3304      	adds	r3, #4
 80031ba:	623b      	str	r3, [r7, #32]
          break;
 80031bc:	e024      	b.n	8003208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	3308      	adds	r3, #8
 80031c4:	623b      	str	r3, [r7, #32]
          break;
 80031c6:	e01f      	b.n	8003208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	330c      	adds	r3, #12
 80031ce:	623b      	str	r3, [r7, #32]
          break;
 80031d0:	e01a      	b.n	8003208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031da:	2304      	movs	r3, #4
 80031dc:	623b      	str	r3, [r7, #32]
          break;
 80031de:	e013      	b.n	8003208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e8:	2308      	movs	r3, #8
 80031ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	611a      	str	r2, [r3, #16]
          break;
 80031f2:	e009      	b.n	8003208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f4:	2308      	movs	r3, #8
 80031f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	615a      	str	r2, [r3, #20]
          break;
 80031fe:	e003      	b.n	8003208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003200:	2300      	movs	r3, #0
 8003202:	623b      	str	r3, [r7, #32]
          break;
 8003204:	e000      	b.n	8003208 <HAL_GPIO_Init+0x130>
          break;
 8003206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2bff      	cmp	r3, #255	@ 0xff
 800320c:	d801      	bhi.n	8003212 <HAL_GPIO_Init+0x13a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	e001      	b.n	8003216 <HAL_GPIO_Init+0x13e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2bff      	cmp	r3, #255	@ 0xff
 800321c:	d802      	bhi.n	8003224 <HAL_GPIO_Init+0x14c>
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	e002      	b.n	800322a <HAL_GPIO_Init+0x152>
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	3b08      	subs	r3, #8
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	210f      	movs	r1, #15
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	401a      	ands	r2, r3
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80b1 	beq.w	80033ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003258:	4b4d      	ldr	r3, [pc, #308]	@ (8003390 <HAL_GPIO_Init+0x2b8>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a4c      	ldr	r2, [pc, #304]	@ (8003390 <HAL_GPIO_Init+0x2b8>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b4a      	ldr	r3, [pc, #296]	@ (8003390 <HAL_GPIO_Init+0x2b8>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003270:	4a48      	ldr	r2, [pc, #288]	@ (8003394 <HAL_GPIO_Init+0x2bc>)
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	@ (8003398 <HAL_GPIO_Init+0x2c0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <HAL_GPIO_Init+0x1ec>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3f      	ldr	r2, [pc, #252]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00d      	beq.n	80032c0 <HAL_GPIO_Init+0x1e8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3e      	ldr	r2, [pc, #248]	@ (80033a0 <HAL_GPIO_Init+0x2c8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <HAL_GPIO_Init+0x1e4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3d      	ldr	r2, [pc, #244]	@ (80033a4 <HAL_GPIO_Init+0x2cc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_GPIO_Init+0x1e0>
 80032b4:	2303      	movs	r3, #3
 80032b6:	e006      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e004      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032bc:	2302      	movs	r3, #2
 80032be:	e002      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_GPIO_Init+0x1ee>
 80032c4:	2300      	movs	r3, #0
 80032c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c8:	f002 0203 	and.w	r2, r2, #3
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	4093      	lsls	r3, r2
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032d6:	492f      	ldr	r1, [pc, #188]	@ (8003394 <HAL_GPIO_Init+0x2bc>)
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d006      	beq.n	80032fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032f0:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	492c      	ldr	r1, [pc, #176]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032fe:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	43db      	mvns	r3, r3
 8003306:	4928      	ldr	r1, [pc, #160]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003308:	4013      	ands	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003318:	4b23      	ldr	r3, [pc, #140]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4922      	ldr	r1, [pc, #136]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	60cb      	str	r3, [r1, #12]
 8003324:	e006      	b.n	8003334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003326:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	43db      	mvns	r3, r3
 800332e:	491e      	ldr	r1, [pc, #120]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003330:	4013      	ands	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4918      	ldr	r1, [pc, #96]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800334e:	4b16      	ldr	r3, [pc, #88]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	43db      	mvns	r3, r3
 8003356:	4914      	ldr	r1, [pc, #80]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003358:	4013      	ands	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d021      	beq.n	80033ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003368:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e021      	b.n	80033ba <HAL_GPIO_Init+0x2e2>
 8003376:	bf00      	nop
 8003378:	10320000 	.word	0x10320000
 800337c:	10310000 	.word	0x10310000
 8003380:	10220000 	.word	0x10220000
 8003384:	10210000 	.word	0x10210000
 8003388:	10120000 	.word	0x10120000
 800338c:	10110000 	.word	0x10110000
 8003390:	40021000 	.word	0x40021000
 8003394:	40010000 	.word	0x40010000
 8003398:	40010800 	.word	0x40010800
 800339c:	40010c00 	.word	0x40010c00
 80033a0:	40011000 	.word	0x40011000
 80033a4:	40011400 	.word	0x40011400
 80033a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_GPIO_Init+0x304>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	4909      	ldr	r1, [pc, #36]	@ (80033dc <HAL_GPIO_Init+0x304>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	3301      	adds	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f47f ae8e 	bne.w	80030ec <HAL_GPIO_Init+0x14>
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	372c      	adds	r7, #44	@ 0x2c
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	40010400 	.word	0x40010400

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e12b      	b.n	800367a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff f9be 	bl	80027b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	@ 0x24
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003474:	f001 fbcc 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8003478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a81      	ldr	r2, [pc, #516]	@ (8003684 <HAL_I2C_Init+0x274>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d807      	bhi.n	8003494 <HAL_I2C_Init+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a80      	ldr	r2, [pc, #512]	@ (8003688 <HAL_I2C_Init+0x278>)
 8003488:	4293      	cmp	r3, r2
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e006      	b.n	80034a2 <HAL_I2C_Init+0x92>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a7d      	ldr	r2, [pc, #500]	@ (800368c <HAL_I2C_Init+0x27c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0e7      	b.n	800367a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a78      	ldr	r2, [pc, #480]	@ (8003690 <HAL_I2C_Init+0x280>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9b      	lsrs	r3, r3, #18
 80034b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003684 <HAL_I2C_Init+0x274>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d802      	bhi.n	80034e4 <HAL_I2C_Init+0xd4>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e009      	b.n	80034f8 <HAL_I2C_Init+0xe8>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a69      	ldr	r2, [pc, #420]	@ (8003694 <HAL_I2C_Init+0x284>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	3301      	adds	r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800350a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	495c      	ldr	r1, [pc, #368]	@ (8003684 <HAL_I2C_Init+0x274>)
 8003514:	428b      	cmp	r3, r1
 8003516:	d819      	bhi.n	800354c <HAL_I2C_Init+0x13c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e59      	subs	r1, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fbb1 f3f3 	udiv	r3, r1, r3
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800352c:	400b      	ands	r3, r1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_I2C_Init+0x138>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e59      	subs	r1, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003540:	3301      	adds	r3, #1
 8003542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003546:	e051      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 8003548:	2304      	movs	r3, #4
 800354a:	e04f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HAL_I2C_Init+0x168>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e012      	b.n	800359e <HAL_I2C_Init+0x18e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Init+0x196>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e022      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10e      	bne.n	80035cc <HAL_I2C_Init+0x1bc>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1e58      	subs	r0, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	440b      	add	r3, r1
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ca:	e00f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	6809      	ldr	r1, [r1, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800361a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6911      	ldr	r1, [r2, #16]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	000186a0 	.word	0x000186a0
 8003688:	001e847f 	.word	0x001e847f
 800368c:	003d08ff 	.word	0x003d08ff
 8003690:	431bde83 	.word	0x431bde83
 8003694:	10624dd3 	.word	0x10624dd3

08003698 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	461a      	mov	r2, r3
 80036a4:	460b      	mov	r3, r1
 80036a6:	817b      	strh	r3, [r7, #10]
 80036a8:	4613      	mov	r3, r2
 80036aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7ff fb26 	bl	8002cfc <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	f040 80e0 	bne.w	8003880 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	4970      	ldr	r1, [pc, #448]	@ (800388c <HAL_I2C_Master_Transmit+0x1f4>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fc9e 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0d3      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_I2C_Master_Transmit+0x50>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0cc      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d007      	beq.n	800370e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800371c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2221      	movs	r2, #33	@ 0x21
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2210      	movs	r2, #16
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	893a      	ldrh	r2, [r7, #8]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a50      	ldr	r2, [pc, #320]	@ (8003890 <HAL_I2C_Master_Transmit+0x1f8>)
 800374e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003750:	8979      	ldrh	r1, [r7, #10]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fb08 	bl	8003d6c <I2C_MasterRequestWrite>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e08d      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800377c:	e066      	b.n	800384c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fd5c 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2b04      	cmp	r3, #4
 8003794:	d107      	bne.n	80037a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06b      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11b      	bne.n	8003820 <HAL_I2C_Master_Transmit+0x188>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6a39      	ldr	r1, [r7, #32]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fd53 	bl	80042d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e01a      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d194      	bne.n	800377e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	00100002 	.word	0x00100002
 8003890:	ffff0000 	.word	0xffff0000

08003894 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	@ 0x30
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	460b      	mov	r3, r1
 80038a2:	817b      	strh	r3, [r7, #10]
 80038a4:	4613      	mov	r3, r2
 80038a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fa26 	bl	8002cfc <HAL_GetTick>
 80038b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	f040 824b 	bne.w	8003d56 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2319      	movs	r3, #25
 80038c6:	2201      	movs	r2, #1
 80038c8:	497f      	ldr	r1, [pc, #508]	@ (8003ac8 <HAL_I2C_Master_Receive+0x234>)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fb9e 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	e23e      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_I2C_Master_Receive+0x54>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e237      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d007      	beq.n	800390e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800391c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2222      	movs	r2, #34	@ 0x22
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2210      	movs	r2, #16
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	893a      	ldrh	r2, [r7, #8]
 800393e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a5f      	ldr	r2, [pc, #380]	@ (8003acc <HAL_I2C_Master_Receive+0x238>)
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa8a 	bl	8003e70 <I2C_MasterRequestRead>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e1f8      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d113      	bne.n	8003996 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e1cc      	b.n	8003d30 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	2b01      	cmp	r3, #1
 800399c:	d11e      	bne.n	80039dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ae:	b672      	cpsid	i
}
 80039b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d8:	b662      	cpsie	i
}
 80039da:	e035      	b.n	8003a48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d11e      	bne.n	8003a22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
}
 80039f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1e:	b662      	cpsie	i
}
 8003a20:	e012      	b.n	8003a48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a48:	e172      	b.n	8003d30 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	f200 811f 	bhi.w	8003c92 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d123      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fc7d 	bl	8004360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e173      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa2:	e145      	b.n	8003d30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d152      	bne.n	8003b52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4906      	ldr	r1, [pc, #24]	@ (8003ad0 <HAL_I2C_Master_Receive+0x23c>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 faa8 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e148      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad4:	b672      	cpsid	i
}
 8003ad6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b1a:	b662      	cpsie	i
}
 8003b1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b50:	e0ee      	b.n	8003d30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4981      	ldr	r1, [pc, #516]	@ (8003d60 <HAL_I2C_Master_Receive+0x4cc>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fa55 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0f5      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b7c:	b672      	cpsid	i
}
 8003b7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003d64 <HAL_I2C_Master_Receive+0x4d0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	08db      	lsrs	r3, r3, #3
 8003bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d68 <HAL_I2C_Master_Receive+0x4d4>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0a1a      	lsrs	r2, r3, #8
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00da      	lsls	r2, r3, #3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d118      	bne.n	8003c0a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfa:	b662      	cpsie	i
}
 8003bfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0a6      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d1d9      	bne.n	8003bcc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c5a:	b662      	cpsie	i
}
 8003c5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c90:	e04e      	b.n	8003d30 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb62 	bl	8004360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e058      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d124      	bne.n	8003d30 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d107      	bne.n	8003cfe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f ae88 	bne.w	8003a4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	@ 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	00010004 	.word	0x00010004
 8003d64:	20000030 	.word	0x20000030
 8003d68:	14f8b589 	.word	0x14f8b589

08003d6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d006      	beq.n	8003d96 <I2C_MasterRequestWrite+0x2a>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d003      	beq.n	8003d96 <I2C_MasterRequestWrite+0x2a>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e00b      	b.n	8003dc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	2b12      	cmp	r3, #18
 8003dae:	d107      	bne.n	8003dc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f91d 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de6:	d103      	bne.n	8003df0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e035      	b.n	8003e60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dfc:	d108      	bne.n	8003e10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dfe:	897b      	ldrh	r3, [r7, #10]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e01b      	b.n	8003e48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e10:	897b      	ldrh	r3, [r7, #10]
 8003e12:	11db      	asrs	r3, r3, #7
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f063 030f 	orn	r3, r3, #15
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	490e      	ldr	r1, [pc, #56]	@ (8003e68 <I2C_MasterRequestWrite+0xfc>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f966 	bl	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e010      	b.n	8003e60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4907      	ldr	r1, [pc, #28]	@ (8003e6c <I2C_MasterRequestWrite+0x100>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f956 	bl	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	00010008 	.word	0x00010008
 8003e6c:	00010002 	.word	0x00010002

08003e70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d006      	beq.n	8003eaa <I2C_MasterRequestRead+0x3a>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d003      	beq.n	8003eaa <I2C_MasterRequestRead+0x3a>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ea8:	d108      	bne.n	8003ebc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e00b      	b.n	8003ed4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	2b11      	cmp	r3, #17
 8003ec2:	d107      	bne.n	8003ed4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f893 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003efa:	d103      	bne.n	8003f04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e079      	b.n	8003ffc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f10:	d108      	bne.n	8003f24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f12:	897b      	ldrh	r3, [r7, #10]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	e05f      	b.n	8003fe4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f24:	897b      	ldrh	r3, [r7, #10]
 8003f26:	11db      	asrs	r3, r3, #7
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0306 	and.w	r3, r3, #6
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f063 030f 	orn	r3, r3, #15
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4930      	ldr	r1, [pc, #192]	@ (8004004 <I2C_MasterRequestRead+0x194>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f8dc 	bl	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e054      	b.n	8003ffc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4929      	ldr	r1, [pc, #164]	@ (8004008 <I2C_MasterRequestRead+0x198>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f8cc 	bl	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e044      	b.n	8003ffc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f831 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fbe:	d103      	bne.n	8003fc8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e017      	b.n	8003ffc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fcc:	897b      	ldrh	r3, [r7, #10]
 8003fce:	11db      	asrs	r3, r3, #7
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 0306 	and.w	r3, r3, #6
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f063 030e 	orn	r3, r3, #14
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4907      	ldr	r1, [pc, #28]	@ (8004008 <I2C_MasterRequestRead+0x198>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f888 	bl	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	00010008 	.word	0x00010008
 8004008:	00010002 	.word	0x00010002

0800400c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800401c:	e048      	b.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d044      	beq.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7fe fe69 	bl	8002cfc <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d139      	bne.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10d      	bne.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	e00c      	b.n	800407c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	43da      	mvns	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	429a      	cmp	r2, r3
 8004080:	d116      	bne.n	80040b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e023      	b.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10d      	bne.n	80040d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	e00c      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	43da      	mvns	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d093      	beq.n	800401e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410e:	e071      	b.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411e:	d123      	bne.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e067      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d041      	beq.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004170:	f7fe fdc4 	bl	8002cfc <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d302      	bcc.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d136      	bne.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10c      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	e00b      	b.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e021      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10c      	bne.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	43da      	mvns	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4013      	ands	r3, r2
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e00b      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	f47f af6d 	bne.w	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424c:	e034      	b.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8e3 	bl	800441a <I2C_IsAcknowledgeFailed>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e034      	b.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d028      	beq.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe fd49 	bl	8002cfc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d11d      	bne.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004286:	2b80      	cmp	r3, #128	@ 0x80
 8004288:	d016      	beq.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e007      	b.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c2:	2b80      	cmp	r3, #128	@ 0x80
 80042c4:	d1c3      	bne.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042dc:	e034      	b.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f89b 	bl	800441a <I2C_IsAcknowledgeFailed>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e034      	b.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d028      	beq.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7fe fd01 	bl	8002cfc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11d      	bne.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d016      	beq.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e007      	b.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d1c3      	bne.n	80042de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436c:	e049      	b.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b10      	cmp	r3, #16
 800437a:	d119      	bne.n	80043b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0210 	mvn.w	r2, #16
 8004384:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e030      	b.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7fe fca4 	bl	8002cfc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11d      	bne.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d016      	beq.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e007      	b.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d1ae      	bne.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d11b      	bne.n	800446a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800443a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
	...

08004478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e272      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8087 	beq.w	80045a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004498:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d00c      	beq.n	80044be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044a4:	4b8f      	ldr	r3, [pc, #572]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d112      	bne.n	80044d6 <HAL_RCC_OscConfig+0x5e>
 80044b0:	4b8c      	ldr	r3, [pc, #560]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044be:	4b89      	ldr	r3, [pc, #548]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d06c      	beq.n	80045a4 <HAL_RCC_OscConfig+0x12c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d168      	bne.n	80045a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e24c      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044de:	d106      	bne.n	80044ee <HAL_RCC_OscConfig+0x76>
 80044e0:	4b80      	ldr	r3, [pc, #512]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a7f      	ldr	r2, [pc, #508]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e02e      	b.n	800454c <HAL_RCC_OscConfig+0xd4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x98>
 80044f6:	4b7b      	ldr	r3, [pc, #492]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7a      	ldr	r2, [pc, #488]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b78      	ldr	r3, [pc, #480]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a77      	ldr	r2, [pc, #476]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e01d      	b.n	800454c <HAL_RCC_OscConfig+0xd4>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0xbc>
 800451a:	4b72      	ldr	r3, [pc, #456]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a71      	ldr	r2, [pc, #452]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b6f      	ldr	r3, [pc, #444]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6e      	ldr	r2, [pc, #440]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e00b      	b.n	800454c <HAL_RCC_OscConfig+0xd4>
 8004534:	4b6b      	ldr	r3, [pc, #428]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6a      	ldr	r2, [pc, #424]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b68      	ldr	r3, [pc, #416]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a67      	ldr	r2, [pc, #412]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fbd2 	bl	8002cfc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fe fbce 	bl	8002cfc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e200      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b5d      	ldr	r3, [pc, #372]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0xe4>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fe fbbe 	bl	8002cfc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fe fbba 	bl	8002cfc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1ec      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x10c>
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d063      	beq.n	800467a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b2:	4b4c      	ldr	r3, [pc, #304]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045be:	4b49      	ldr	r3, [pc, #292]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d11c      	bne.n	8004604 <HAL_RCC_OscConfig+0x18c>
 80045ca:	4b46      	ldr	r3, [pc, #280]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	4b43      	ldr	r3, [pc, #268]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_RCC_OscConfig+0x176>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e1c0      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4939      	ldr	r1, [pc, #228]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	e03a      	b.n	800467a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460c:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <HAL_RCC_OscConfig+0x270>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7fe fb73 	bl	8002cfc <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fe fb6f 	bl	8002cfc <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e1a1      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4927      	ldr	r1, [pc, #156]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464e:	4b26      	ldr	r3, [pc, #152]	@ (80046e8 <HAL_RCC_OscConfig+0x270>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fe fb52 	bl	8002cfc <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fe fb4e 	bl	8002cfc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e180      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	4b1d      	ldr	r3, [pc, #116]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03a      	beq.n	80046fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d019      	beq.n	80046c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468e:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <HAL_RCC_OscConfig+0x274>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fe fb32 	bl	8002cfc <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fe fb2e 	bl	8002cfc <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e160      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ba:	2001      	movs	r0, #1
 80046bc:	f000 fad0 	bl	8004c60 <RCC_Delay>
 80046c0:	e01c      	b.n	80046fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c2:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <HAL_RCC_OscConfig+0x274>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c8:	f7fe fb18 	bl	8002cfc <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ce:	e00f      	b.n	80046f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fe fb14 	bl	8002cfc <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d908      	bls.n	80046f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e146      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	42420000 	.word	0x42420000
 80046ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	4b92      	ldr	r3, [pc, #584]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e9      	bne.n	80046d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80a6 	beq.w	8004856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470e:	4b8b      	ldr	r3, [pc, #556]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10d      	bne.n	8004736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	4b88      	ldr	r3, [pc, #544]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4a87      	ldr	r2, [pc, #540]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004724:	61d3      	str	r3, [r2, #28]
 8004726:	4b85      	ldr	r3, [pc, #532]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b82      	ldr	r3, [pc, #520]	@ (8004940 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d118      	bne.n	8004774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b7f      	ldr	r3, [pc, #508]	@ (8004940 <HAL_RCC_OscConfig+0x4c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7e      	ldr	r2, [pc, #504]	@ (8004940 <HAL_RCC_OscConfig+0x4c8>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474e:	f7fe fad5 	bl	8002cfc <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7fe fad1 	bl	8002cfc <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b64      	cmp	r3, #100	@ 0x64
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e103      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	4b75      	ldr	r3, [pc, #468]	@ (8004940 <HAL_RCC_OscConfig+0x4c8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x312>
 800477c:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	4a6e      	ldr	r2, [pc, #440]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6213      	str	r3, [r2, #32]
 8004788:	e02d      	b.n	80047e6 <HAL_RCC_OscConfig+0x36e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x334>
 8004792:	4b6a      	ldr	r3, [pc, #424]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a69      	ldr	r2, [pc, #420]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	4b67      	ldr	r3, [pc, #412]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4a66      	ldr	r2, [pc, #408]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	6213      	str	r3, [r2, #32]
 80047aa:	e01c      	b.n	80047e6 <HAL_RCC_OscConfig+0x36e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d10c      	bne.n	80047ce <HAL_RCC_OscConfig+0x356>
 80047b4:	4b61      	ldr	r3, [pc, #388]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a60      	ldr	r2, [pc, #384]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	4b5e      	ldr	r3, [pc, #376]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	4a5d      	ldr	r2, [pc, #372]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6213      	str	r3, [r2, #32]
 80047cc:	e00b      	b.n	80047e6 <HAL_RCC_OscConfig+0x36e>
 80047ce:	4b5b      	ldr	r3, [pc, #364]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4a5a      	ldr	r2, [pc, #360]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6213      	str	r3, [r2, #32]
 80047da:	4b58      	ldr	r3, [pc, #352]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	4a57      	ldr	r2, [pc, #348]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 0304 	bic.w	r3, r3, #4
 80047e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d015      	beq.n	800481a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fe fa85 	bl	8002cfc <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fe fa81 	bl	8002cfc <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e0b1      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	4b4b      	ldr	r3, [pc, #300]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ee      	beq.n	80047f6 <HAL_RCC_OscConfig+0x37e>
 8004818:	e014      	b.n	8004844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481a:	f7fe fa6f 	bl	8002cfc <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe fa6b 	bl	8002cfc <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e09b      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004838:	4b40      	ldr	r3, [pc, #256]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ee      	bne.n	8004822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4a3b      	ldr	r2, [pc, #236]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8087 	beq.w	800496e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004860:	4b36      	ldr	r3, [pc, #216]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b08      	cmp	r3, #8
 800486a:	d061      	beq.n	8004930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d146      	bne.n	8004902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004874:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <HAL_RCC_OscConfig+0x4cc>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe fa3f 	bl	8002cfc <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004882:	f7fe fa3b 	bl	8002cfc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e06d      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004894:	4b29      	ldr	r3, [pc, #164]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a8:	d108      	bne.n	80048bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048aa:	4b24      	ldr	r3, [pc, #144]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4921      	ldr	r1, [pc, #132]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048bc:	4b1f      	ldr	r3, [pc, #124]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a19      	ldr	r1, [r3, #32]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	430b      	orrs	r3, r1
 80048ce:	491b      	ldr	r1, [pc, #108]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <HAL_RCC_OscConfig+0x4cc>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048da:	f7fe fa0f 	bl	8002cfc <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fe fa0b 	bl	8002cfc <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e03d      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x46a>
 8004900:	e035      	b.n	800496e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <HAL_RCC_OscConfig+0x4cc>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fe f9f8 	bl	8002cfc <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fe f9f4 	bl	8002cfc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e026      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004922:	4b06      	ldr	r3, [pc, #24]	@ (800493c <HAL_RCC_OscConfig+0x4c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x498>
 800492e:	e01e      	b.n	800496e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e019      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
 800493c:	40021000 	.word	0x40021000
 8004940:	40007000 	.word	0x40007000
 8004944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <HAL_RCC_OscConfig+0x500>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	429a      	cmp	r2, r3
 800495a:	d106      	bne.n	800496a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000

0800497c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0d0      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b6a      	ldr	r3, [pc, #424]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d910      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b67      	ldr	r3, [pc, #412]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 0207 	bic.w	r2, r3, #7
 80049a6:	4965      	ldr	r1, [pc, #404]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b63      	ldr	r3, [pc, #396]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0b8      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d8:	4b59      	ldr	r3, [pc, #356]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a58      	ldr	r2, [pc, #352]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f0:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	4b50      	ldr	r3, [pc, #320]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	494d      	ldr	r1, [pc, #308]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d040      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a22:	4b47      	ldr	r3, [pc, #284]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b41      	ldr	r3, [pc, #260]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e073      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4936      	ldr	r1, [pc, #216]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fe f946 	bl	8002cfc <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fe f942 	bl	8002cfc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e053      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b27      	ldr	r3, [pc, #156]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d210      	bcs.n	8004acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 0207 	bic.w	r2, r3, #7
 8004ab2:	4922      	ldr	r1, [pc, #136]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e032      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4916      	ldr	r1, [pc, #88]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	490e      	ldr	r1, [pc, #56]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b0a:	f000 f821 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	490a      	ldr	r1, [pc, #40]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1c:	5ccb      	ldrb	r3, [r1, r3]
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_RCC_ClockConfig+0x1cc>)
 8004b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b26:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_ClockConfig+0x1d0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe f8a4 	bl	8002c78 <HAL_InitTick>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40022000 	.word	0x40022000
 8004b40:	40021000 	.word	0x40021000
 8004b44:	0800a1a0 	.word	0x0800a1a0
 8004b48:	20000030 	.word	0x20000030
 8004b4c:	20000034 	.word	0x20000034

08004b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d002      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x30>
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x36>
 8004b7e:	e027      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b80:	4b19      	ldr	r3, [pc, #100]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b82:	613b      	str	r3, [r7, #16]
      break;
 8004b84:	e027      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0c9b      	lsrs	r3, r3, #18
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b90:	5cd3      	ldrb	r3, [r2, r3]
 8004b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d010      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b9e:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	0c5b      	lsrs	r3, r3, #17
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004baa:	5cd3      	ldrb	r3, [r2, r3]
 8004bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bb2:	fb03 f202 	mul.w	r2, r3, r2
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e004      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	613b      	str	r3, [r7, #16]
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004bd2:	613b      	str	r3, [r7, #16]
      break;
 8004bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd6:	693b      	ldr	r3, [r7, #16]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	0800a1b8 	.word	0x0800a1b8
 8004bf0:	0800a1c8 	.word	0x0800a1c8
 8004bf4:	003d0900 	.word	0x003d0900
 8004bf8:	007a1200 	.word	0x007a1200

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b02      	ldr	r3, [pc, #8]	@ (8004c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	20000030 	.word	0x20000030

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff2 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	@ (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800a1b0 	.word	0x0800a1b0

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c3c:	f7ff ffde 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0adb      	lsrs	r3, r3, #11
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	@ (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800a1b0 	.word	0x0800a1b0

08004c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <RCC_Delay+0x34>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c98 <RCC_Delay+0x38>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c7c:	bf00      	nop
  }
  while (Delay --);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	60fa      	str	r2, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f9      	bne.n	8004c7c <RCC_Delay+0x1c>
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	20000030 	.word	0x20000030
 8004c98:	10624dd3 	.word	0x10624dd3

08004c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e041      	b.n	8004d32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fd fdc8 	bl	8002858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 f992 	bl	8005004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e022      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e015      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e008      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e05e      	b.n	8004e6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x82>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0x92>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 faf2 	bl	80053d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <HAL_TIM_PWM_Start+0x138>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a18      	ldr	r2, [pc, #96]	@ (8004e74 <HAL_TIM_PWM_Start+0x138>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0xfa>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0xfa>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a14      	ldr	r2, [pc, #80]	@ (8004e78 <HAL_TIM_PWM_Start+0x13c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0xfa>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <HAL_TIM_PWM_Start+0x140>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d111      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d010      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800

08004e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e0ae      	b.n	8004ffc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	f200 809f 	bhi.w	8004fec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eae:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08004fed 	.word	0x08004fed
 8004ebc:	08004fed 	.word	0x08004fed
 8004ec0:	08004fed 	.word	0x08004fed
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004fed 	.word	0x08004fed
 8004ecc:	08004fed 	.word	0x08004fed
 8004ed0:	08004fed 	.word	0x08004fed
 8004ed4:	08004f6b 	.word	0x08004f6b
 8004ed8:	08004fed 	.word	0x08004fed
 8004edc:	08004fed 	.word	0x08004fed
 8004ee0:	08004fed 	.word	0x08004fed
 8004ee4:	08004fab 	.word	0x08004fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f8ea 	bl	80050c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0208 	orr.w	r2, r2, #8
 8004f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6999      	ldr	r1, [r3, #24]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	619a      	str	r2, [r3, #24]
      break;
 8004f26:	e064      	b.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f930 	bl	8005194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6999      	ldr	r1, [r3, #24]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	619a      	str	r2, [r3, #24]
      break;
 8004f68:	e043      	b.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f979 	bl	8005268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0208 	orr.w	r2, r2, #8
 8004f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0204 	bic.w	r2, r2, #4
 8004f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69d9      	ldr	r1, [r3, #28]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	61da      	str	r2, [r3, #28]
      break;
 8004fa8:	e023      	b.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f9c3 	bl	800533c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69d9      	ldr	r1, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	021a      	lsls	r2, r3, #8
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	61da      	str	r2, [r3, #28]
      break;
 8004fea:	e002      	b.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a29      	ldr	r2, [pc, #164]	@ (80050bc <TIM_Base_SetConfig+0xb8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x30>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x30>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a26      	ldr	r2, [pc, #152]	@ (80050c0 <TIM_Base_SetConfig+0xbc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x30>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a25      	ldr	r2, [pc, #148]	@ (80050c4 <TIM_Base_SetConfig+0xc0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <TIM_Base_SetConfig+0xb8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_Base_SetConfig+0x62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005054:	d007      	beq.n	8005066 <TIM_Base_SetConfig+0x62>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	@ (80050c0 <TIM_Base_SetConfig+0xbc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0x62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <TIM_Base_SetConfig+0xc0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d108      	bne.n	8005078 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a07      	ldr	r2, [pc, #28]	@ (80050bc <TIM_Base_SetConfig+0xb8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	615a      	str	r2, [r3, #20]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800

080050c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 0201 	bic.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0302 	bic.w	r3, r3, #2
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <TIM_OC1_SetConfig+0xc8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10c      	bne.n	800513e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0308 	bic.w	r3, r3, #8
 800512a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a13      	ldr	r2, [pc, #76]	@ (8005190 <TIM_OC1_SetConfig+0xc8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d111      	bne.n	800516a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800514c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00

08005194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f023 0210 	bic.w	r2, r3, #16
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0320 	bic.w	r3, r3, #32
 80051de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <TIM_OC2_SetConfig+0xd0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10d      	bne.n	8005210 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800520e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a14      	ldr	r2, [pc, #80]	@ (8005264 <TIM_OC2_SetConfig+0xd0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d113      	bne.n	8005240 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800521e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00

08005268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <TIM_OC3_SetConfig+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10d      	bne.n	80052e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a14      	ldr	r2, [pc, #80]	@ (8005338 <TIM_OC3_SetConfig+0xd0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d113      	bne.n	8005312 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	621a      	str	r2, [r3, #32]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40012c00 	.word	0x40012c00

0800533c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0f      	ldr	r2, [pc, #60]	@ (80053d4 <TIM_OC4_SetConfig+0x98>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00

080053d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2201      	movs	r2, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005434:	2302      	movs	r3, #2
 8005436:	e046      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a16      	ldr	r2, [pc, #88]	@ (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a12      	ldr	r2, [pc, #72]	@ (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a10      	ldr	r2, [pc, #64]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800

080054dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e03d      	b.n	8005574 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e042      	b.n	8005616 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fd f9a9 	bl	80028fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2224      	movs	r2, #36	@ 0x24
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fdc6 	bl	8006154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08a      	sub	sp, #40	@ 0x28
 8005622:	af02      	add	r7, sp, #8
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b20      	cmp	r3, #32
 800563c:	d16d      	bne.n	800571a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_UART_Transmit+0x2c>
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e066      	b.n	800571c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2221      	movs	r2, #33	@ 0x21
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800565c:	f7fd fb4e 	bl	8002cfc <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005676:	d108      	bne.n	800568a <HAL_UART_Transmit+0x6c>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d104      	bne.n	800568a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e003      	b.n	8005692 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005692:	e02a      	b.n	80056ea <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	2180      	movs	r1, #128	@ 0x80
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fb15 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e036      	b.n	800571c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	3302      	adds	r3, #2
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	e007      	b.n	80056dc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3301      	adds	r3, #1
 80056da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1cf      	bne.n	8005694 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	2140      	movs	r1, #64	@ 0x40
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fae5 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e006      	b.n	800571c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b20      	cmp	r3, #32
 800573c:	d112      	bne.n	8005764 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_UART_Receive_IT+0x26>
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e00b      	b.n	8005766 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	461a      	mov	r2, r3
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fb25 	bl	8005daa <UART_Start_Receive_IT>
 8005760:	4603      	mov	r3, r0
 8005762:	e000      	b.n	8005766 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b0ba      	sub	sp, #232	@ 0xe8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005796:	2300      	movs	r3, #0
 8005798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_UART_IRQHandler+0x66>
 80057c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fc01 	bl	8005fd6 <UART_Receive_IT>
      return;
 80057d4:	e25b      	b.n	8005c8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80de 	beq.w	800599c <HAL_UART_IRQHandler+0x22c>
 80057e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80d1 	beq.w	800599c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_UART_IRQHandler+0xae>
 8005806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_UART_IRQHandler+0xd2>
 800582a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	f043 0202 	orr.w	r2, r3, #2
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_UART_IRQHandler+0xf6>
 800584e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0204 	orr.w	r2, r3, #4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d011      	beq.n	8005896 <HAL_UART_IRQHandler+0x126>
 8005872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800587e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 81f2 	beq.w	8005c84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_UART_IRQHandler+0x14e>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb8c 	bl	8005fd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_UART_IRQHandler+0x17a>
 80058e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d04f      	beq.n	800598a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa96 	bl	8005e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d041      	beq.n	8005982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3314      	adds	r3, #20
 8005904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800591c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3314      	adds	r3, #20
 8005926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800592a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800592e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d9      	bne.n	80058fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d013      	beq.n	800597a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	4a7e      	ldr	r2, [pc, #504]	@ (8005b50 <HAL_UART_IRQHandler+0x3e0>)
 8005958:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595e:	4618      	mov	r0, r3
 8005960:	f7fd fb42 	bl	8002fe8 <HAL_DMA_Abort_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	e00e      	b.n	8005998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f993 	bl	8005ca6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e00a      	b.n	8005998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f98f 	bl	8005ca6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e006      	b.n	8005998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f98b 	bl	8005ca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005996:	e175      	b.n	8005c84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	bf00      	nop
    return;
 800599a:	e173      	b.n	8005c84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	f040 814f 	bne.w	8005c44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8148 	beq.w	8005c44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8141 	beq.w	8005c44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80b6 	beq.w	8005b54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8145 	beq.w	8005c88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f080 813e 	bcs.w	8005c88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	f000 8088 	beq.w	8005b30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1d9      	bne.n	8005a20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e1      	bne.n	8005a6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3314      	adds	r3, #20
 8005ac8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005acc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ace:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ad2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e3      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e3      	bne.n	8005aee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd fa21 	bl	8002f72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f8b6 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b4c:	e09c      	b.n	8005c88 <HAL_UART_IRQHandler+0x518>
 8005b4e:	bf00      	nop
 8005b50:	08005ee1 	.word	0x08005ee1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 808e 	beq.w	8005c8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8089 	beq.w	8005c8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e3      	bne.n	8005b7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e3      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c1c:	61fa      	str	r2, [r7, #28]
 8005c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	69b9      	ldr	r1, [r7, #24]
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e3      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f83b 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c42:	e023      	b.n	8005c8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_UART_IRQHandler+0x4f4>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f953 	bl	8005f08 <UART_Transmit_IT>
    return;
 8005c62:	e014      	b.n	8005c8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <HAL_UART_IRQHandler+0x51e>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f992 	bl	8005fa6 <UART_EndTransmit_IT>
    return;
 8005c82:	e004      	b.n	8005c8e <HAL_UART_IRQHandler+0x51e>
    return;
 8005c84:	bf00      	nop
 8005c86:	e002      	b.n	8005c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c8c:	bf00      	nop
  }
}
 8005c8e:	37e8      	adds	r7, #232	@ 0xe8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b090      	sub	sp, #64	@ 0x40
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	e050      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d04c      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	f7fd f805 	bl	8002cfc <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d241      	bcs.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d52:	623a      	str	r2, [r7, #32]
 8005d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	69f9      	ldr	r1, [r7, #28]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e5      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e00f      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d09f      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3740      	adds	r7, #64	@ 0x40
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2222      	movs	r2, #34	@ 0x22
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0220 	orr.w	r2, r2, #32
 8005e0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b095      	sub	sp, #84	@ 0x54
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e44:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e5      	bne.n	8005e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e5      	bne.n	8005e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d119      	bne.n	8005ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f023 0310 	bic.w	r3, r3, #16
 8005eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eb4:	61ba      	str	r2, [r7, #24]
 8005eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6979      	ldr	r1, [r7, #20]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ed6:	bf00      	nop
 8005ed8:	3754      	adds	r7, #84	@ 0x54
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr

08005ee0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff fed3 	bl	8005ca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b21      	cmp	r3, #33	@ 0x21
 8005f1a:	d13e      	bne.n	8005f9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f24:	d114      	bne.n	8005f50 <UART_Transmit_IT+0x48>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d110      	bne.n	8005f50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	1c9a      	adds	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]
 8005f4e:	e008      	b.n	8005f62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6211      	str	r1, [r2, #32]
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e000      	b.n	8005f9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f9a:	2302      	movs	r3, #2
  }
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr

08005fa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fe64 	bl	8005c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b08c      	sub	sp, #48	@ 0x30
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b22      	cmp	r3, #34	@ 0x22
 8005fe8:	f040 80ae 	bne.w	8006148 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff4:	d117      	bne.n	8006026 <UART_Receive_IT+0x50>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d113      	bne.n	8006026 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006014:	b29a      	uxth	r2, r3
 8006016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006018:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	@ 0x28
 8006024:	e026      	b.n	8006074 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006038:	d007      	beq.n	800604a <UART_Receive_IT+0x74>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <UART_Receive_IT+0x82>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e008      	b.n	800606a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006064:	b2da      	uxtb	r2, r3
 8006066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006068:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	4619      	mov	r1, r3
 8006082:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006084:	2b00      	cmp	r3, #0
 8006086:	d15d      	bne.n	8006144 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0220 	bic.w	r2, r2, #32
 8006096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d135      	bne.n	800613a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	613b      	str	r3, [r7, #16]
   return(result);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f4:	623a      	str	r2, [r7, #32]
 80060f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	6a3a      	ldr	r2, [r7, #32]
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	61bb      	str	r3, [r7, #24]
   return(result);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d10a      	bne.n	800612c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fdc0 	bl	8005cb8 <HAL_UARTEx_RxEventCallback>
 8006138:	e002      	b.n	8006140 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb fc86 	bl	8001a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	e002      	b.n	800614a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3730      	adds	r7, #48	@ 0x30
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800618e:	f023 030c 	bic.w	r3, r3, #12
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	430b      	orrs	r3, r1
 800619a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006268 <UART_SetConfig+0x114>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d103      	bne.n	80061c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7fe fd3c 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	e002      	b.n	80061ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe fd24 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 80061c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009a      	lsls	r2, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	4a22      	ldr	r2, [pc, #136]	@ (800626c <UART_SetConfig+0x118>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	0119      	lsls	r1, r3, #4
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009a      	lsls	r2, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006200:	4b1a      	ldr	r3, [pc, #104]	@ (800626c <UART_SetConfig+0x118>)
 8006202:	fba3 0302 	umull	r0, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2064      	movs	r0, #100	@ 0x64
 800620a:	fb00 f303 	mul.w	r3, r0, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	@ 0x32
 8006214:	4a15      	ldr	r2, [pc, #84]	@ (800626c <UART_SetConfig+0x118>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006220:	4419      	add	r1, r3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009a      	lsls	r2, r3, #2
 800622c:	441a      	add	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	fbb2 f2f3 	udiv	r2, r2, r3
 8006238:	4b0c      	ldr	r3, [pc, #48]	@ (800626c <UART_SetConfig+0x118>)
 800623a:	fba3 0302 	umull	r0, r3, r3, r2
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2064      	movs	r0, #100	@ 0x64
 8006242:	fb00 f303 	mul.w	r3, r0, r3
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	3332      	adds	r3, #50	@ 0x32
 800624c:	4a07      	ldr	r2, [pc, #28]	@ (800626c <UART_SetConfig+0x118>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	f003 020f 	and.w	r2, r3, #15
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	440a      	add	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40013800 	.word	0x40013800
 800626c:	51eb851f 	.word	0x51eb851f

08006270 <WHO_AM_I>:
#include "mokhw_MPU6050.h"


/*i2c���, MPU6050 ���� Ȯ��*/
void WHO_AM_I(I2C_HandleTypeDef* hi2c)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
	uint8_t slave_address = 0xD0; //0x68 �������� ��ĭ ������
 8006278:	23d0      	movs	r3, #208	@ 0xd0
 800627a:	73fb      	strb	r3, [r7, #15]
	uint8_t register_to_access = ADDRESS_WHO_AM_I; //������ ��������(WHO_AM_I)�� �ּ�
 800627c:	2375      	movs	r3, #117	@ 0x75
 800627e:	73bb      	strb	r3, [r7, #14]
	uint8_t temp = 0; //WHO_AM_I�� ����� ���� �� ������ ����
 8006280:	2300      	movs	r3, #0
 8006282:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(hi2c, slave_address, &register_to_access, 1, 1000); //�������� ���������� �ּҰ� ������
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	b299      	uxth	r1, r3
 8006288:	f107 020e 	add.w	r2, r7, #14
 800628c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	2301      	movs	r3, #1
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fd f9ff 	bl	8003698 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, slave_address, &temp, 1, 1000); //WHO_AM_I�� ������ִ°�(0x68) temp�� ����
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	b299      	uxth	r1, r3
 800629e:	f107 020d 	add.w	r2, r7, #13
 80062a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2301      	movs	r3, #1
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fd faf2 	bl	8003894 <HAL_I2C_Master_Receive>

	while (temp != 0x68); //���� ���� 0x68�� �ٸ��� ���� �߸� ����
 80062b0:	bf00      	nop
 80062b2:	7b7b      	ldrb	r3, [r7, #13]
 80062b4:	2b68      	cmp	r3, #104	@ 0x68
 80062b6:	d1fc      	bne.n	80062b2 <WHO_AM_I+0x42>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //���� ���� 0x68�̶�� �� ����, LED ����
 80062b8:	2201      	movs	r2, #1
 80062ba:	2120      	movs	r1, #32
 80062bc:	4803      	ldr	r0, [pc, #12]	@ (80062cc <WHO_AM_I+0x5c>)
 80062be:	f7fd f88f 	bl	80033e0 <HAL_GPIO_WritePin>
														//PA5�� STM32f103RBT6�� ���� LED
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40010800 	.word	0x40010800

080062d0 <wake_up>:

/*sleep mode -> waking up*/
void wake_up(I2C_HandleTypeDef* hi2c)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	6078      	str	r0, [r7, #4]
        uint8_t slave_address = 0xD0; //0x68 �������� ��ĭ ������
 80062d8:	23d0      	movs	r3, #208	@ 0xd0
 80062da:	73fb      	strb	r3, [r7, #15]
        uint8_t data_to_write[2]; //�������� �ּҿ� �� �������Ϳ� ���� �־��� ���� �����ϴ� �迭

        data_to_write[0] = ADDRESS_PWR_MGMT_1; //������ ��������(PWR_MGMT_1)�� �ּ�
 80062dc:	236b      	movs	r3, #107	@ 0x6b
 80062de:	733b      	strb	r3, [r7, #12]
        data_to_write[1] = 0x00; //�ʱ� �� 0x40 -> 0x00���� �ٲ��� : wake_up
 80062e0:	2300      	movs	r3, #0
 80062e2:	737b      	strb	r3, [r7, #13]
        
        //�迭�� �̿��ؼ� �������� �ּҿ� �ش�Ǵ� ���������� ���ο� ���� �ѹ��� ����
        HAL_I2C_Master_Transmit(hi2c, slave_address, data_to_write, 2, 1000); 
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	b299      	uxth	r1, r3
 80062e8:	f107 020c 	add.w	r2, r7, #12
 80062ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	2302      	movs	r3, #2
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fd f9cf 	bl	8003698 <HAL_I2C_Master_Transmit>
        //�ش� �������� �� �ٲ�
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <set_sample_rate>:


/*���ϴ� ���� ����Ʈ ����*/
void set_sample_rate(I2C_HandleTypeDef* hi2c, uint16_t sample_rate_you_want) 
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af02      	add	r7, sp, #8
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	807b      	strh	r3, [r7, #2]
	uint8_t slave_address = 0xD0; //0x68 �������� ��ĭ ������
 800630e:	23d0      	movs	r3, #208	@ 0xd0
 8006310:	73fb      	strb	r3, [r7, #15]
	uint8_t data_to_write[2];
        
	/*sample rate = gyro output rate / (1 + SMPLRT_DIV)*/
    /*���ϴ� ���� ����Ʈ�� �����ϱ� ����, SMPLRT_DIV�� �� ���� ���ϴ� ��*/
    uint8_t calculated_SMPLRT_DIV = (gyro_output_rate/sample_rate_you_want) - 1;
 8006312:	887b      	ldrh	r3, [r7, #2]
 8006314:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006318:	fb92 f3f3 	sdiv	r3, r2, r3
 800631c:	b2db      	uxtb	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	73bb      	strb	r3, [r7, #14]
        
	data_to_write[0] = ADDRESS_SMPLRT_DIV; //������ ��������(SMPLRT_DIV)�� �ּ�
 8006322:	2319      	movs	r3, #25
 8006324:	733b      	strb	r3, [r7, #12]
	data_to_write[1] = calculated_SMPLRT_DIV; //�ش�Ǵ� ���������� ���ο� ��
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	737b      	strb	r3, [r7, #13]

    //�迭�� �̿��ؼ� �������� �ּҿ� �ش�Ǵ� ���������� ���ο� ���� �ѹ��� ����
	HAL_I2C_Master_Transmit(hi2c, slave_address, data_to_write, 2, 1000); 
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	b299      	uxth	r1, r3
 800632e:	f107 020c 	add.w	r2, r7, #12
 8006332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	2302      	movs	r3, #2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fd f9ac 	bl	8003698 <HAL_I2C_Master_Transmit>
    //�������� �� �ٲ�
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <set_sensitivity>:

/*���̷ο� ���ӵ��� ���� ���� ����*/
void set_sensitivity(I2C_HandleTypeDef* hi2c, mpu6050* __my_mpu6050, gyro_full_scale_range gyro_range_you_want, accel_full_scale_range accel_range_you_want)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	460b      	mov	r3, r1
 8006358:	71fb      	strb	r3, [r7, #7]
 800635a:	4613      	mov	r3, r2
 800635c:	71bb      	strb	r3, [r7, #6]
	//���̷� ������ �ΰ��� ���ϱ�
	uint8_t slave_address = 0xD0; //0x68 �������� ��ĭ ������
 800635e:	23d0      	movs	r3, #208	@ 0xd0
 8006360:	75fb      	strb	r3, [r7, #23]
	uint8_t data_to_write[3];

	data_to_write[0] = ADDRESS_GYRO_CONFIG; //������ ��������(GYRO_CONFIG)�� �ּ�
 8006362:	231b      	movs	r3, #27
 8006364:	753b      	strb	r3, [r7, #20]
	data_to_write[1] = gyro_range_you_want <<3; //�ش�Ǵ� ���������� ���ο� ��
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	757b      	strb	r3, [r7, #21]
	data_to_write[2] = accel_range_you_want <<3; //�ش�Ǵ� ���������� ���ο� ��
 800636e:	79bb      	ldrb	r3, [r7, #6]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	b2db      	uxtb	r3, r3
 8006374:	75bb      	strb	r3, [r7, #22]

    //�迭�� �̿��ؼ� �������� �ּҿ� �ش�Ǵ� ���������� ���ο� ���� �ѹ��� ����
	HAL_I2C_Master_Transmit(hi2c, slave_address, data_to_write, 3, 1000);
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	b299      	uxth	r1, r3
 800637a:	f107 0214 	add.w	r2, r7, #20
 800637e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2303      	movs	r3, #3
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7fd f986 	bl	8003698 <HAL_I2C_Master_Transmit>
    //�������� �� �ٲ�


	//���̷� ���� ������ ���� gyro_change_unit_factor �� �ٲ��ֱ�
	switch (gyro_range_you_want) 
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d81a      	bhi.n	80063c8 <set_sensitivity+0x80>
 8006392:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <set_sensitivity+0x50>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063b1 	.word	0x080063b1
 80063a0:	080063b9 	.word	0x080063b9
 80063a4:	080063c1 	.word	0x080063c1
	{
	case gyro_full_scale_range_250 :
		__my_mpu6050->gyro_change_unit_factor = 131;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	@ (800641c <set_sensitivity+0xd4>)
 80063ac:	601a      	str	r2, [r3, #0]
		break;
 80063ae:	e00c      	b.n	80063ca <set_sensitivity+0x82>

	case gyro_full_scale_range_500 :
		__my_mpu6050->gyro_change_unit_factor = 65.5;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <set_sensitivity+0xd8>)
 80063b4:	601a      	str	r2, [r3, #0]
		break;
 80063b6:	e008      	b.n	80063ca <set_sensitivity+0x82>

	case gyro_full_scale_range_1000:
		__my_mpu6050->gyro_change_unit_factor = 32.8;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <set_sensitivity+0xdc>)
 80063bc:	601a      	str	r2, [r3, #0]
		break;
 80063be:	e004      	b.n	80063ca <set_sensitivity+0x82>

	case gyro_full_scale_range_2000:
		__my_mpu6050->gyro_change_unit_factor = 16.4;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <set_sensitivity+0xe0>)
 80063c4:	601a      	str	r2, [r3, #0]
		break;
 80063c6:	e000      	b.n	80063ca <set_sensitivity+0x82>

	default :
		break;
 80063c8:	bf00      	nop
	}

	//���ӵ� ���� ������ ���� accel_change_unit_factor �� �ٲ��ֱ�
	switch (accel_range_you_want) 
 80063ca:	79bb      	ldrb	r3, [r7, #6]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d81f      	bhi.n	8006410 <set_sensitivity+0xc8>
 80063d0:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <set_sensitivity+0x90>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	080063f3 	.word	0x080063f3
 80063e0:	080063fd 	.word	0x080063fd
 80063e4:	08006407 	.word	0x08006407
	{
	case accel_full_scale_range_2g :
		__my_mpu6050->accel_change_unit_factor = 16384;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80063ee:	605a      	str	r2, [r3, #4]
		break;
 80063f0:	e00f      	b.n	8006412 <set_sensitivity+0xca>

	case accel_full_scale_range_4g:
		__my_mpu6050->accel_change_unit_factor = 8192;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80063f8:	605a      	str	r2, [r3, #4]
		break;
 80063fa:	e00a      	b.n	8006412 <set_sensitivity+0xca>

	case accel_full_scale_range_8g:
		__my_mpu6050->accel_change_unit_factor = 4096;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8006402:	605a      	str	r2, [r3, #4]
		break;
 8006404:	e005      	b.n	8006412 <set_sensitivity+0xca>

	case accel_full_scale_range_16g:
		__my_mpu6050->accel_change_unit_factor = 2048;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800640c:	605a      	str	r2, [r3, #4]
		break;
 800640e:	e000      	b.n	8006412 <set_sensitivity+0xca>

	default :
		break;
 8006410:	bf00      	nop
	}

}
 8006412:	bf00      	nop
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	43030000 	.word	0x43030000
 8006420:	42830000 	.word	0x42830000
 8006424:	42033333 	.word	0x42033333
 8006428:	41833333 	.word	0x41833333

0800642c <set_DLPF>:

void set_DLPF (I2C_HandleTypeDef* hi2c, uint8_t value) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
	uint8_t slave_address = 0xD0;
 8006438:	23d0      	movs	r3, #208	@ 0xd0
 800643a:	72fb      	strb	r3, [r7, #11]
	uint8_t data_to_write[2];

	data_to_write[0] = ADDRESS_CONFIG;
 800643c:	231a      	movs	r3, #26
 800643e:	723b      	strb	r3, [r7, #8]

	for (int i = 2; i <= 7; i++) {
 8006440:	2302      	movs	r3, #2
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e016      	b.n	8006474 <set_DLPF+0x48>
		data_to_write[1] = (i << 3) | value;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	b25a      	sxtb	r2, r3
 800644c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006450:	4313      	orrs	r3, r2
 8006452:	b25b      	sxtb	r3, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hi2c, slave_address, data_to_write, 2, 1000);
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	b299      	uxth	r1, r3
 800645c:	f107 0208 	add.w	r2, r7, #8
 8006460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	2302      	movs	r3, #2
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fd f915 	bl	8003698 <HAL_I2C_Master_Transmit>
	for (int i = 2; i <= 7; i++) {
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b07      	cmp	r3, #7
 8006478:	dde5      	ble.n	8006446 <set_DLPF+0x1a>
	}

}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <read_gyro>:



/*���̷ΰ� �б�*/
void read_gyro(I2C_HandleTypeDef* hi2c, mpu6050* __my_mpu6050, unit unit_you_want)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	71fb      	strb	r3, [r7, #7]
	uint8_t slave_address = 0xD0; //0x68 �������� ��ĭ ������
 8006492:	23d0      	movs	r3, #208	@ 0xd0
 8006494:	75fb      	strb	r3, [r7, #23]
	uint8_t register_to_access = ADDRESS_GYRO_XOUT_H; //������ ��������(GYRO_XOUT_H)�� �ּ�
 8006496:	2343      	movs	r3, #67	@ 0x43
 8006498:	75bb      	strb	r3, [r7, #22]
	uint8_t data_to_read[6]; //���̷� �� �����ϴ� �迭

	//���� �������� �ּ�(GYRO_XOUT_H) ������
	HAL_I2C_Master_Transmit(hi2c, slave_address, &register_to_access, 1, 1000); 
 800649a:	7dfb      	ldrb	r3, [r7, #23]
 800649c:	b299      	uxth	r1, r3
 800649e:	f107 0216 	add.w	r2, r7, #22
 80064a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	2301      	movs	r3, #1
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7fd f8f4 	bl	8003698 <HAL_I2C_Master_Transmit>

	//�ش��ϴ� ���������� �����͸� �迭�� ����
	HAL_I2C_Master_Receive(hi2c, slave_address, data_to_read, 6, 1000);
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	b299      	uxth	r1, r3
 80064b4:	f107 0210 	add.w	r2, r7, #16
 80064b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2306      	movs	r3, #6
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7fd f9e7 	bl	8003894 <HAL_I2C_Master_Receive>

	switch (unit_you_want) //���� ���� ���ϴ� ������ �ٲ���
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <read_gyro+0x4e>
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d01c      	beq.n	800650a <read_gyro+0x86>
		__my_mpu6050->gy_y_dps = (int16_t)(data_to_read[2] << 8 | data_to_read[3]) / __my_mpu6050->gyro_change_unit_factor;
		__my_mpu6050->gy_z_dps = (int16_t)(data_to_read[4] << 8 | data_to_read[5]) / __my_mpu6050->gyro_change_unit_factor;
		break;

	default :
		break;
 80064d0:	e05b      	b.n	800658a <read_gyro+0x106>
		__my_mpu6050->gy_x = (int16_t)(data_to_read[0] << 8 | data_to_read[1]);
 80064d2:	7c3b      	ldrb	r3, [r7, #16]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	b21a      	sxth	r2, r3
 80064d8:	7c7b      	ldrb	r3, [r7, #17]
 80064da:	b21b      	sxth	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b21a      	sxth	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	811a      	strh	r2, [r3, #8]
		__my_mpu6050->gy_y = (int16_t)(data_to_read[2] << 8 | data_to_read[3]);
 80064e4:	7cbb      	ldrb	r3, [r7, #18]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	b21a      	sxth	r2, r3
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	b21b      	sxth	r3, r3
 80064ee:	4313      	orrs	r3, r2
 80064f0:	b21a      	sxth	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	815a      	strh	r2, [r3, #10]
		__my_mpu6050->gy_z = (int16_t)(data_to_read[4] << 8 | data_to_read[5]);
 80064f6:	7d3b      	ldrb	r3, [r7, #20]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	b21a      	sxth	r2, r3
 80064fc:	7d7b      	ldrb	r3, [r7, #21]
 80064fe:	b21b      	sxth	r3, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	b21a      	sxth	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	819a      	strh	r2, [r3, #12]
		break;
 8006508:	e03f      	b.n	800658a <read_gyro+0x106>
		__my_mpu6050->gy_x_dps = (int16_t)(data_to_read[0] << 8 | data_to_read[1]) / __my_mpu6050->gyro_change_unit_factor;
 800650a:	7c3b      	ldrb	r3, [r7, #16]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	b21a      	sxth	r2, r3
 8006510:	7c7b      	ldrb	r3, [r7, #17]
 8006512:	b21b      	sxth	r3, r3
 8006514:	4313      	orrs	r3, r2
 8006516:	b21b      	sxth	r3, r3
 8006518:	4618      	mov	r0, r3
 800651a:	f7fa fbbf 	bl	8000c9c <__aeabi_i2f>
 800651e:	4602      	mov	r2, r0
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fa fcc0 	bl	8000eac <__aeabi_fdiv>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	615a      	str	r2, [r3, #20]
		__my_mpu6050->gy_y_dps = (int16_t)(data_to_read[2] << 8 | data_to_read[3]) / __my_mpu6050->gyro_change_unit_factor;
 8006534:	7cbb      	ldrb	r3, [r7, #18]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	b21a      	sxth	r2, r3
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	b21b      	sxth	r3, r3
 800653e:	4313      	orrs	r3, r2
 8006540:	b21b      	sxth	r3, r3
 8006542:	4618      	mov	r0, r3
 8006544:	f7fa fbaa 	bl	8000c9c <__aeabi_i2f>
 8006548:	4602      	mov	r2, r0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fa fcab 	bl	8000eac <__aeabi_fdiv>
 8006556:	4603      	mov	r3, r0
 8006558:	461a      	mov	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	619a      	str	r2, [r3, #24]
		__my_mpu6050->gy_z_dps = (int16_t)(data_to_read[4] << 8 | data_to_read[5]) / __my_mpu6050->gyro_change_unit_factor;
 800655e:	7d3b      	ldrb	r3, [r7, #20]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	b21a      	sxth	r2, r3
 8006564:	7d7b      	ldrb	r3, [r7, #21]
 8006566:	b21b      	sxth	r3, r3
 8006568:	4313      	orrs	r3, r2
 800656a:	b21b      	sxth	r3, r3
 800656c:	4618      	mov	r0, r3
 800656e:	f7fa fb95 	bl	8000c9c <__aeabi_i2f>
 8006572:	4602      	mov	r2, r0
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f7fa fc96 	bl	8000eac <__aeabi_fdiv>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61da      	str	r2, [r3, #28]
		break;
 8006588:	bf00      	nop
	}
}
 800658a:	bf00      	nop
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <read_accel>:


/*���ӵ� �� �б�*/
void read_accel(I2C_HandleTypeDef* hi2c, mpu6050* __my_mpu6050, unit unit_you_want)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b088      	sub	sp, #32
 8006596:	af02      	add	r7, sp, #8
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
	uint8_t slave_address = 0xD0; //0x68 �������� ��ĭ ������
 80065a0:	23d0      	movs	r3, #208	@ 0xd0
 80065a2:	75fb      	strb	r3, [r7, #23]
	uint8_t register_to_access = ADDRESS_ACCEL_XOUT_H;//������ ��������(ACCEL_XOUT_H)�� �ּ�
 80065a4:	233b      	movs	r3, #59	@ 0x3b
 80065a6:	75bb      	strb	r3, [r7, #22]
	uint8_t data_to_read[6]; //���ӵ� �� �����ϴ� �迭

	 //���� �������� �ּ�(ACCEL_XOUT_H) ������
	HAL_I2C_Master_Transmit(hi2c, slave_address, &register_to_access, 1, 1000);
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	b299      	uxth	r1, r3
 80065ac:	f107 0216 	add.w	r2, r7, #22
 80065b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2301      	movs	r3, #1
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7fd f86d 	bl	8003698 <HAL_I2C_Master_Transmit>

	//�ش��ϴ� ���������� �����͸� �迭�� ����
	HAL_I2C_Master_Receive(hi2c, slave_address, data_to_read, 6, 1000);
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	b299      	uxth	r1, r3
 80065c2:	f107 0210 	add.w	r2, r7, #16
 80065c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	2306      	movs	r3, #6
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fd f960 	bl	8003894 <HAL_I2C_Master_Receive>

    //16��Ʈ ���� �����Ͱ� 8��Ʈ�� �������� �־
    //ó�� ���� �����͸� �������� 8ĭ �������ϰ� 2��°�� ���� �����͸� ��ģ��.

	switch (unit_you_want) //���� ���� ���ϴ� ������ �ٲ���
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <read_accel+0x4e>
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d01c      	beq.n	8006618 <read_accel+0x86>
		__my_mpu6050->ac_y_g = (int16_t)(data_to_read[2] << 8 | data_to_read[3]) / __my_mpu6050->accel_change_unit_factor;
		__my_mpu6050->ac_z_g = (int16_t)(data_to_read[4] << 8 | data_to_read[5]) / __my_mpu6050->accel_change_unit_factor;
		break;

	default :
		break;
 80065de:	e05b      	b.n	8006698 <read_accel+0x106>
		__my_mpu6050->ac_x = data_to_read[0] << 8 | data_to_read[1];
 80065e0:	7c3b      	ldrb	r3, [r7, #16]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	b21a      	sxth	r2, r3
 80065e6:	7c7b      	ldrb	r3, [r7, #17]
 80065e8:	b21b      	sxth	r3, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	b21a      	sxth	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	81da      	strh	r2, [r3, #14]
		__my_mpu6050->ac_y = data_to_read[2] << 8 | data_to_read[3];
 80065f2:	7cbb      	ldrb	r3, [r7, #18]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	b21a      	sxth	r2, r3
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b21a      	sxth	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	821a      	strh	r2, [r3, #16]
		__my_mpu6050->ac_z = data_to_read[4] << 8 | data_to_read[5];
 8006604:	7d3b      	ldrb	r3, [r7, #20]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	b21a      	sxth	r2, r3
 800660a:	7d7b      	ldrb	r3, [r7, #21]
 800660c:	b21b      	sxth	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b21a      	sxth	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	825a      	strh	r2, [r3, #18]
		break;
 8006616:	e03f      	b.n	8006698 <read_accel+0x106>
		__my_mpu6050->ac_x_g = (int16_t)(data_to_read[0] << 8 | data_to_read[1]) / __my_mpu6050->accel_change_unit_factor;
 8006618:	7c3b      	ldrb	r3, [r7, #16]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	b21a      	sxth	r2, r3
 800661e:	7c7b      	ldrb	r3, [r7, #17]
 8006620:	b21b      	sxth	r3, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	b21b      	sxth	r3, r3
 8006626:	4618      	mov	r0, r3
 8006628:	f7fa fb38 	bl	8000c9c <__aeabi_i2f>
 800662c:	4602      	mov	r2, r0
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	4619      	mov	r1, r3
 8006634:	4610      	mov	r0, r2
 8006636:	f7fa fc39 	bl	8000eac <__aeabi_fdiv>
 800663a:	4603      	mov	r3, r0
 800663c:	461a      	mov	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	621a      	str	r2, [r3, #32]
		__my_mpu6050->ac_y_g = (int16_t)(data_to_read[2] << 8 | data_to_read[3]) / __my_mpu6050->accel_change_unit_factor;
 8006642:	7cbb      	ldrb	r3, [r7, #18]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	b21a      	sxth	r2, r3
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	b21b      	sxth	r3, r3
 800664c:	4313      	orrs	r3, r2
 800664e:	b21b      	sxth	r3, r3
 8006650:	4618      	mov	r0, r3
 8006652:	f7fa fb23 	bl	8000c9c <__aeabi_i2f>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f7fa fc24 	bl	8000eac <__aeabi_fdiv>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	625a      	str	r2, [r3, #36]	@ 0x24
		__my_mpu6050->ac_z_g = (int16_t)(data_to_read[4] << 8 | data_to_read[5]) / __my_mpu6050->accel_change_unit_factor;
 800666c:	7d3b      	ldrb	r3, [r7, #20]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	b21a      	sxth	r2, r3
 8006672:	7d7b      	ldrb	r3, [r7, #21]
 8006674:	b21b      	sxth	r3, r3
 8006676:	4313      	orrs	r3, r2
 8006678:	b21b      	sxth	r3, r3
 800667a:	4618      	mov	r0, r3
 800667c:	f7fa fb0e 	bl	8000c9c <__aeabi_i2f>
 8006680:	4602      	mov	r2, r0
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fa fc0f 	bl	8000eac <__aeabi_fdiv>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8006696:	bf00      	nop
	}
}
 8006698:	bf00      	nop
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <__cvt>:
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a6:	461d      	mov	r5, r3
 80066a8:	bfbb      	ittet	lt
 80066aa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80066ae:	461d      	movlt	r5, r3
 80066b0:	2300      	movge	r3, #0
 80066b2:	232d      	movlt	r3, #45	@ 0x2d
 80066b4:	b088      	sub	sp, #32
 80066b6:	4614      	mov	r4, r2
 80066b8:	bfb8      	it	lt
 80066ba:	4614      	movlt	r4, r2
 80066bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80066c0:	7013      	strb	r3, [r2, #0]
 80066c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80066c8:	f023 0820 	bic.w	r8, r3, #32
 80066cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066d0:	d005      	beq.n	80066de <__cvt+0x3e>
 80066d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066d6:	d100      	bne.n	80066da <__cvt+0x3a>
 80066d8:	3601      	adds	r6, #1
 80066da:	2302      	movs	r3, #2
 80066dc:	e000      	b.n	80066e0 <__cvt+0x40>
 80066de:	2303      	movs	r3, #3
 80066e0:	aa07      	add	r2, sp, #28
 80066e2:	9204      	str	r2, [sp, #16]
 80066e4:	aa06      	add	r2, sp, #24
 80066e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80066ea:	e9cd 3600 	strd	r3, r6, [sp]
 80066ee:	4622      	mov	r2, r4
 80066f0:	462b      	mov	r3, r5
 80066f2:	f000 fe61 	bl	80073b8 <_dtoa_r>
 80066f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066fa:	4607      	mov	r7, r0
 80066fc:	d119      	bne.n	8006732 <__cvt+0x92>
 80066fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006700:	07db      	lsls	r3, r3, #31
 8006702:	d50e      	bpl.n	8006722 <__cvt+0x82>
 8006704:	eb00 0906 	add.w	r9, r0, r6
 8006708:	2200      	movs	r2, #0
 800670a:	2300      	movs	r3, #0
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f7fa f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8006714:	b108      	cbz	r0, 800671a <__cvt+0x7a>
 8006716:	f8cd 901c 	str.w	r9, [sp, #28]
 800671a:	2230      	movs	r2, #48	@ 0x30
 800671c:	9b07      	ldr	r3, [sp, #28]
 800671e:	454b      	cmp	r3, r9
 8006720:	d31e      	bcc.n	8006760 <__cvt+0xc0>
 8006722:	4638      	mov	r0, r7
 8006724:	9b07      	ldr	r3, [sp, #28]
 8006726:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006728:	1bdb      	subs	r3, r3, r7
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	b008      	add	sp, #32
 800672e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006732:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006736:	eb00 0906 	add.w	r9, r0, r6
 800673a:	d1e5      	bne.n	8006708 <__cvt+0x68>
 800673c:	7803      	ldrb	r3, [r0, #0]
 800673e:	2b30      	cmp	r3, #48	@ 0x30
 8006740:	d10a      	bne.n	8006758 <__cvt+0xb8>
 8006742:	2200      	movs	r2, #0
 8006744:	2300      	movs	r3, #0
 8006746:	4620      	mov	r0, r4
 8006748:	4629      	mov	r1, r5
 800674a:	f7fa f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800674e:	b918      	cbnz	r0, 8006758 <__cvt+0xb8>
 8006750:	f1c6 0601 	rsb	r6, r6, #1
 8006754:	f8ca 6000 	str.w	r6, [sl]
 8006758:	f8da 3000 	ldr.w	r3, [sl]
 800675c:	4499      	add	r9, r3
 800675e:	e7d3      	b.n	8006708 <__cvt+0x68>
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	9107      	str	r1, [sp, #28]
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	e7d9      	b.n	800671c <__cvt+0x7c>

08006768 <__exponent>:
 8006768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676a:	2900      	cmp	r1, #0
 800676c:	bfb6      	itet	lt
 800676e:	232d      	movlt	r3, #45	@ 0x2d
 8006770:	232b      	movge	r3, #43	@ 0x2b
 8006772:	4249      	neglt	r1, r1
 8006774:	2909      	cmp	r1, #9
 8006776:	7002      	strb	r2, [r0, #0]
 8006778:	7043      	strb	r3, [r0, #1]
 800677a:	dd29      	ble.n	80067d0 <__exponent+0x68>
 800677c:	f10d 0307 	add.w	r3, sp, #7
 8006780:	461d      	mov	r5, r3
 8006782:	270a      	movs	r7, #10
 8006784:	fbb1 f6f7 	udiv	r6, r1, r7
 8006788:	461a      	mov	r2, r3
 800678a:	fb07 1416 	mls	r4, r7, r6, r1
 800678e:	3430      	adds	r4, #48	@ 0x30
 8006790:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006794:	460c      	mov	r4, r1
 8006796:	2c63      	cmp	r4, #99	@ 0x63
 8006798:	4631      	mov	r1, r6
 800679a:	f103 33ff 	add.w	r3, r3, #4294967295
 800679e:	dcf1      	bgt.n	8006784 <__exponent+0x1c>
 80067a0:	3130      	adds	r1, #48	@ 0x30
 80067a2:	1e94      	subs	r4, r2, #2
 80067a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067a8:	4623      	mov	r3, r4
 80067aa:	1c41      	adds	r1, r0, #1
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	d30a      	bcc.n	80067c6 <__exponent+0x5e>
 80067b0:	f10d 0309 	add.w	r3, sp, #9
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	42ac      	cmp	r4, r5
 80067b8:	bf88      	it	hi
 80067ba:	2300      	movhi	r3, #0
 80067bc:	3302      	adds	r3, #2
 80067be:	4403      	add	r3, r0
 80067c0:	1a18      	subs	r0, r3, r0
 80067c2:	b003      	add	sp, #12
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067ce:	e7ed      	b.n	80067ac <__exponent+0x44>
 80067d0:	2330      	movs	r3, #48	@ 0x30
 80067d2:	3130      	adds	r1, #48	@ 0x30
 80067d4:	7083      	strb	r3, [r0, #2]
 80067d6:	70c1      	strb	r1, [r0, #3]
 80067d8:	1d03      	adds	r3, r0, #4
 80067da:	e7f1      	b.n	80067c0 <__exponent+0x58>

080067dc <_printf_float>:
 80067dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e0:	b091      	sub	sp, #68	@ 0x44
 80067e2:	460c      	mov	r4, r1
 80067e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80067e8:	4616      	mov	r6, r2
 80067ea:	461f      	mov	r7, r3
 80067ec:	4605      	mov	r5, r0
 80067ee:	f000 fcd3 	bl	8007198 <_localeconv_r>
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	9308      	str	r3, [sp, #32]
 80067f8:	f7f9 fcaa 	bl	8000150 <strlen>
 80067fc:	2300      	movs	r3, #0
 80067fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8006800:	f8d8 3000 	ldr.w	r3, [r8]
 8006804:	9009      	str	r0, [sp, #36]	@ 0x24
 8006806:	3307      	adds	r3, #7
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	f103 0208 	add.w	r2, r3, #8
 8006810:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006814:	f8d4 b000 	ldr.w	fp, [r4]
 8006818:	f8c8 2000 	str.w	r2, [r8]
 800681c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006820:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006824:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006826:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006832:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006836:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa8 <_printf_float+0x2cc>)
 8006838:	f7fa f8e8 	bl	8000a0c <__aeabi_dcmpun>
 800683c:	bb70      	cbnz	r0, 800689c <_printf_float+0xc0>
 800683e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006842:	f04f 32ff 	mov.w	r2, #4294967295
 8006846:	4b98      	ldr	r3, [pc, #608]	@ (8006aa8 <_printf_float+0x2cc>)
 8006848:	f7fa f8c2 	bl	80009d0 <__aeabi_dcmple>
 800684c:	bb30      	cbnz	r0, 800689c <_printf_float+0xc0>
 800684e:	2200      	movs	r2, #0
 8006850:	2300      	movs	r3, #0
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7fa f8b1 	bl	80009bc <__aeabi_dcmplt>
 800685a:	b110      	cbz	r0, 8006862 <_printf_float+0x86>
 800685c:	232d      	movs	r3, #45	@ 0x2d
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006862:	4a92      	ldr	r2, [pc, #584]	@ (8006aac <_printf_float+0x2d0>)
 8006864:	4b92      	ldr	r3, [pc, #584]	@ (8006ab0 <_printf_float+0x2d4>)
 8006866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800686a:	bf94      	ite	ls
 800686c:	4690      	movls	r8, r2
 800686e:	4698      	movhi	r8, r3
 8006870:	2303      	movs	r3, #3
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	f02b 0304 	bic.w	r3, fp, #4
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	4633      	mov	r3, r6
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	9700      	str	r7, [sp, #0]
 8006886:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006888:	f000 f9d4 	bl	8006c34 <_printf_common>
 800688c:	3001      	adds	r0, #1
 800688e:	f040 8090 	bne.w	80069b2 <_printf_float+0x1d6>
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	b011      	add	sp, #68	@ 0x44
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f8b2 	bl	8000a0c <__aeabi_dcmpun>
 80068a8:	b148      	cbz	r0, 80068be <_printf_float+0xe2>
 80068aa:	464b      	mov	r3, r9
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfb8      	it	lt
 80068b0:	232d      	movlt	r3, #45	@ 0x2d
 80068b2:	4a80      	ldr	r2, [pc, #512]	@ (8006ab4 <_printf_float+0x2d8>)
 80068b4:	bfb8      	it	lt
 80068b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ba:	4b7f      	ldr	r3, [pc, #508]	@ (8006ab8 <_printf_float+0x2dc>)
 80068bc:	e7d3      	b.n	8006866 <_printf_float+0x8a>
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	d13f      	bne.n	8006948 <_printf_float+0x16c>
 80068c8:	2306      	movs	r3, #6
 80068ca:	6063      	str	r3, [r4, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	9206      	str	r2, [sp, #24]
 80068d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80068d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80068dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80068de:	9203      	str	r2, [sp, #12]
 80068e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80068e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	4642      	mov	r2, r8
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4628      	mov	r0, r5
 80068f0:	464b      	mov	r3, r9
 80068f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80068f4:	f7ff fed4 	bl	80066a0 <__cvt>
 80068f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068fa:	4680      	mov	r8, r0
 80068fc:	2947      	cmp	r1, #71	@ 0x47
 80068fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006900:	d128      	bne.n	8006954 <_printf_float+0x178>
 8006902:	1cc8      	adds	r0, r1, #3
 8006904:	db02      	blt.n	800690c <_printf_float+0x130>
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	4299      	cmp	r1, r3
 800690a:	dd40      	ble.n	800698e <_printf_float+0x1b2>
 800690c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006910:	fa5f fa8a 	uxtb.w	sl, sl
 8006914:	4652      	mov	r2, sl
 8006916:	3901      	subs	r1, #1
 8006918:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800691c:	910d      	str	r1, [sp, #52]	@ 0x34
 800691e:	f7ff ff23 	bl	8006768 <__exponent>
 8006922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006924:	4681      	mov	r9, r0
 8006926:	1813      	adds	r3, r2, r0
 8006928:	2a01      	cmp	r2, #1
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	dc02      	bgt.n	8006934 <_printf_float+0x158>
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	07d2      	lsls	r2, r2, #31
 8006932:	d501      	bpl.n	8006938 <_printf_float+0x15c>
 8006934:	3301      	adds	r3, #1
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800693c:	2b00      	cmp	r3, #0
 800693e:	d09e      	beq.n	800687e <_printf_float+0xa2>
 8006940:	232d      	movs	r3, #45	@ 0x2d
 8006942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006946:	e79a      	b.n	800687e <_printf_float+0xa2>
 8006948:	2947      	cmp	r1, #71	@ 0x47
 800694a:	d1bf      	bne.n	80068cc <_printf_float+0xf0>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1bd      	bne.n	80068cc <_printf_float+0xf0>
 8006950:	2301      	movs	r3, #1
 8006952:	e7ba      	b.n	80068ca <_printf_float+0xee>
 8006954:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006958:	d9dc      	bls.n	8006914 <_printf_float+0x138>
 800695a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800695e:	d118      	bne.n	8006992 <_printf_float+0x1b6>
 8006960:	2900      	cmp	r1, #0
 8006962:	6863      	ldr	r3, [r4, #4]
 8006964:	dd0b      	ble.n	800697e <_printf_float+0x1a2>
 8006966:	6121      	str	r1, [r4, #16]
 8006968:	b913      	cbnz	r3, 8006970 <_printf_float+0x194>
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	07d0      	lsls	r0, r2, #31
 800696e:	d502      	bpl.n	8006976 <_printf_float+0x19a>
 8006970:	3301      	adds	r3, #1
 8006972:	440b      	add	r3, r1
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	f04f 0900 	mov.w	r9, #0
 800697a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800697c:	e7dc      	b.n	8006938 <_printf_float+0x15c>
 800697e:	b913      	cbnz	r3, 8006986 <_printf_float+0x1aa>
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	07d2      	lsls	r2, r2, #31
 8006984:	d501      	bpl.n	800698a <_printf_float+0x1ae>
 8006986:	3302      	adds	r3, #2
 8006988:	e7f4      	b.n	8006974 <_printf_float+0x198>
 800698a:	2301      	movs	r3, #1
 800698c:	e7f2      	b.n	8006974 <_printf_float+0x198>
 800698e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	4299      	cmp	r1, r3
 8006996:	db05      	blt.n	80069a4 <_printf_float+0x1c8>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	6121      	str	r1, [r4, #16]
 800699c:	07d8      	lsls	r0, r3, #31
 800699e:	d5ea      	bpl.n	8006976 <_printf_float+0x19a>
 80069a0:	1c4b      	adds	r3, r1, #1
 80069a2:	e7e7      	b.n	8006974 <_printf_float+0x198>
 80069a4:	2900      	cmp	r1, #0
 80069a6:	bfcc      	ite	gt
 80069a8:	2201      	movgt	r2, #1
 80069aa:	f1c1 0202 	rsble	r2, r1, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	e7e0      	b.n	8006974 <_printf_float+0x198>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	055a      	lsls	r2, r3, #21
 80069b6:	d407      	bmi.n	80069c8 <_printf_float+0x1ec>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	4642      	mov	r2, r8
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	d12b      	bne.n	8006a1e <_printf_float+0x242>
 80069c6:	e764      	b.n	8006892 <_printf_float+0xb6>
 80069c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069cc:	f240 80dc 	bls.w	8006b88 <_printf_float+0x3ac>
 80069d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	f7f9 ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d033      	beq.n	8006a48 <_printf_float+0x26c>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	4a35      	ldr	r2, [pc, #212]	@ (8006abc <_printf_float+0x2e0>)
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f af51 	beq.w	8006892 <_printf_float+0xb6>
 80069f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80069f4:	4543      	cmp	r3, r8
 80069f6:	db02      	blt.n	80069fe <_printf_float+0x222>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	07d8      	lsls	r0, r3, #31
 80069fc:	d50f      	bpl.n	8006a1e <_printf_float+0x242>
 80069fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f af42 	beq.w	8006892 <_printf_float+0xb6>
 8006a0e:	f04f 0900 	mov.w	r9, #0
 8006a12:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a16:	f104 0a1a 	add.w	sl, r4, #26
 8006a1a:	45c8      	cmp	r8, r9
 8006a1c:	dc09      	bgt.n	8006a32 <_printf_float+0x256>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	079b      	lsls	r3, r3, #30
 8006a22:	f100 8102 	bmi.w	8006c2a <_printf_float+0x44e>
 8006a26:	68e0      	ldr	r0, [r4, #12]
 8006a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a2a:	4298      	cmp	r0, r3
 8006a2c:	bfb8      	it	lt
 8006a2e:	4618      	movlt	r0, r3
 8006a30:	e731      	b.n	8006896 <_printf_float+0xba>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4652      	mov	r2, sl
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f af28 	beq.w	8006892 <_printf_float+0xb6>
 8006a42:	f109 0901 	add.w	r9, r9, #1
 8006a46:	e7e8      	b.n	8006a1a <_printf_float+0x23e>
 8006a48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dc38      	bgt.n	8006ac0 <_printf_float+0x2e4>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	4a19      	ldr	r2, [pc, #100]	@ (8006abc <_printf_float+0x2e0>)
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f af1a 	beq.w	8006892 <_printf_float+0xb6>
 8006a5e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006a62:	ea59 0303 	orrs.w	r3, r9, r3
 8006a66:	d102      	bne.n	8006a6e <_printf_float+0x292>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	07d9      	lsls	r1, r3, #31
 8006a6c:	d5d7      	bpl.n	8006a1e <_printf_float+0x242>
 8006a6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f af0a 	beq.w	8006892 <_printf_float+0xb6>
 8006a7e:	f04f 0a00 	mov.w	sl, #0
 8006a82:	f104 0b1a 	add.w	fp, r4, #26
 8006a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a88:	425b      	negs	r3, r3
 8006a8a:	4553      	cmp	r3, sl
 8006a8c:	dc01      	bgt.n	8006a92 <_printf_float+0x2b6>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	e793      	b.n	80069ba <_printf_float+0x1de>
 8006a92:	2301      	movs	r3, #1
 8006a94:	465a      	mov	r2, fp
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f aef8 	beq.w	8006892 <_printf_float+0xb6>
 8006aa2:	f10a 0a01 	add.w	sl, sl, #1
 8006aa6:	e7ee      	b.n	8006a86 <_printf_float+0x2aa>
 8006aa8:	7fefffff 	.word	0x7fefffff
 8006aac:	0800a1ca 	.word	0x0800a1ca
 8006ab0:	0800a1ce 	.word	0x0800a1ce
 8006ab4:	0800a1d2 	.word	0x0800a1d2
 8006ab8:	0800a1d6 	.word	0x0800a1d6
 8006abc:	0800a1da 	.word	0x0800a1da
 8006ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ac2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ac6:	4553      	cmp	r3, sl
 8006ac8:	bfa8      	it	ge
 8006aca:	4653      	movge	r3, sl
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4699      	mov	r9, r3
 8006ad0:	dc36      	bgt.n	8006b40 <_printf_float+0x364>
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ada:	f104 021a 	add.w	r2, r4, #26
 8006ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae2:	eba3 0309 	sub.w	r3, r3, r9
 8006ae6:	455b      	cmp	r3, fp
 8006ae8:	dc31      	bgt.n	8006b4e <_printf_float+0x372>
 8006aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aec:	459a      	cmp	sl, r3
 8006aee:	dc3a      	bgt.n	8006b66 <_printf_float+0x38a>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07da      	lsls	r2, r3, #31
 8006af4:	d437      	bmi.n	8006b66 <_printf_float+0x38a>
 8006af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af8:	ebaa 0903 	sub.w	r9, sl, r3
 8006afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006afe:	ebaa 0303 	sub.w	r3, sl, r3
 8006b02:	4599      	cmp	r9, r3
 8006b04:	bfa8      	it	ge
 8006b06:	4699      	movge	r9, r3
 8006b08:	f1b9 0f00 	cmp.w	r9, #0
 8006b0c:	dc33      	bgt.n	8006b76 <_printf_float+0x39a>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b16:	f104 0b1a 	add.w	fp, r4, #26
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b20:	eba3 0309 	sub.w	r3, r3, r9
 8006b24:	4543      	cmp	r3, r8
 8006b26:	f77f af7a 	ble.w	8006a1e <_printf_float+0x242>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	465a      	mov	r2, fp
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f aeac 	beq.w	8006892 <_printf_float+0xb6>
 8006b3a:	f108 0801 	add.w	r8, r8, #1
 8006b3e:	e7ec      	b.n	8006b1a <_printf_float+0x33e>
 8006b40:	4642      	mov	r2, r8
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1c2      	bne.n	8006ad2 <_printf_float+0x2f6>
 8006b4c:	e6a1      	b.n	8006892 <_printf_float+0xb6>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	920a      	str	r2, [sp, #40]	@ 0x28
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae9a 	beq.w	8006892 <_printf_float+0xb6>
 8006b5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b60:	f10b 0b01 	add.w	fp, fp, #1
 8006b64:	e7bb      	b.n	8006ade <_printf_float+0x302>
 8006b66:	4631      	mov	r1, r6
 8006b68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1c0      	bne.n	8006af6 <_printf_float+0x31a>
 8006b74:	e68d      	b.n	8006892 <_printf_float+0xb6>
 8006b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b78:	464b      	mov	r3, r9
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	4442      	add	r2, r8
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	d1c3      	bne.n	8006b0e <_printf_float+0x332>
 8006b86:	e684      	b.n	8006892 <_printf_float+0xb6>
 8006b88:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006b8c:	f1ba 0f01 	cmp.w	sl, #1
 8006b90:	dc01      	bgt.n	8006b96 <_printf_float+0x3ba>
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d536      	bpl.n	8006c04 <_printf_float+0x428>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f ae76 	beq.w	8006892 <_printf_float+0xb6>
 8006ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f ae6e 	beq.w	8006892 <_printf_float+0xb6>
 8006bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc2:	f7f9 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc6:	b9c0      	cbnz	r0, 8006bfa <_printf_float+0x41e>
 8006bc8:	4653      	mov	r3, sl
 8006bca:	f108 0201 	add.w	r2, r8, #1
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d10c      	bne.n	8006bf2 <_printf_float+0x416>
 8006bd8:	e65b      	b.n	8006892 <_printf_float+0xb6>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	465a      	mov	r2, fp
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae54 	beq.w	8006892 <_printf_float+0xb6>
 8006bea:	f108 0801 	add.w	r8, r8, #1
 8006bee:	45d0      	cmp	r8, sl
 8006bf0:	dbf3      	blt.n	8006bda <_printf_float+0x3fe>
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bf8:	e6e0      	b.n	80069bc <_printf_float+0x1e0>
 8006bfa:	f04f 0800 	mov.w	r8, #0
 8006bfe:	f104 0b1a 	add.w	fp, r4, #26
 8006c02:	e7f4      	b.n	8006bee <_printf_float+0x412>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4642      	mov	r2, r8
 8006c08:	e7e1      	b.n	8006bce <_printf_float+0x3f2>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae3c 	beq.w	8006892 <_printf_float+0xb6>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	4543      	cmp	r3, r8
 8006c26:	dcf0      	bgt.n	8006c0a <_printf_float+0x42e>
 8006c28:	e6fd      	b.n	8006a26 <_printf_float+0x24a>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	f104 0919 	add.w	r9, r4, #25
 8006c32:	e7f4      	b.n	8006c1e <_printf_float+0x442>

08006c34 <_printf_common>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	4616      	mov	r6, r2
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	688a      	ldr	r2, [r1, #8]
 8006c3e:	690b      	ldr	r3, [r1, #16]
 8006c40:	4607      	mov	r7, r0
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bfb8      	it	lt
 8006c46:	4613      	movlt	r3, r2
 8006c48:	6033      	str	r3, [r6, #0]
 8006c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c54:	b10a      	cbz	r2, 8006c5a <_printf_common+0x26>
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0699      	lsls	r1, r3, #26
 8006c5e:	bf42      	ittt	mi
 8006c60:	6833      	ldrmi	r3, [r6, #0]
 8006c62:	3302      	addmi	r3, #2
 8006c64:	6033      	strmi	r3, [r6, #0]
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	f015 0506 	ands.w	r5, r5, #6
 8006c6c:	d106      	bne.n	8006c7c <_printf_common+0x48>
 8006c6e:	f104 0a19 	add.w	sl, r4, #25
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc2b      	bgt.n	8006cd4 <_printf_common+0xa0>
 8006c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	3b00      	subs	r3, #0
 8006c84:	bf18      	it	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	0692      	lsls	r2, r2, #26
 8006c8a:	d430      	bmi.n	8006cee <_printf_common+0xba>
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c94:	47c8      	blx	r9
 8006c96:	3001      	adds	r0, #1
 8006c98:	d023      	beq.n	8006ce2 <_printf_common+0xae>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	6922      	ldr	r2, [r4, #16]
 8006c9e:	f003 0306 	and.w	r3, r3, #6
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	bf14      	ite	ne
 8006ca6:	2500      	movne	r5, #0
 8006ca8:	6833      	ldreq	r3, [r6, #0]
 8006caa:	f04f 0600 	mov.w	r6, #0
 8006cae:	bf08      	it	eq
 8006cb0:	68e5      	ldreq	r5, [r4, #12]
 8006cb2:	f104 041a 	add.w	r4, r4, #26
 8006cb6:	bf08      	it	eq
 8006cb8:	1aed      	subeq	r5, r5, r3
 8006cba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006cbe:	bf08      	it	eq
 8006cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfc4      	itt	gt
 8006cc8:	1a9b      	subgt	r3, r3, r2
 8006cca:	18ed      	addgt	r5, r5, r3
 8006ccc:	42b5      	cmp	r5, r6
 8006cce:	d11a      	bne.n	8006d06 <_printf_common+0xd2>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e008      	b.n	8006ce6 <_printf_common+0xb2>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4652      	mov	r2, sl
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c8      	blx	r9
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d103      	bne.n	8006cea <_printf_common+0xb6>
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cea:	3501      	adds	r5, #1
 8006cec:	e7c1      	b.n	8006c72 <_printf_common+0x3e>
 8006cee:	2030      	movs	r0, #48	@ 0x30
 8006cf0:	18e1      	adds	r1, r4, r3
 8006cf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cfc:	4422      	add	r2, r4
 8006cfe:	3302      	adds	r3, #2
 8006d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d04:	e7c2      	b.n	8006c8c <_printf_common+0x58>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4622      	mov	r2, r4
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	47c8      	blx	r9
 8006d10:	3001      	adds	r0, #1
 8006d12:	d0e6      	beq.n	8006ce2 <_printf_common+0xae>
 8006d14:	3601      	adds	r6, #1
 8006d16:	e7d9      	b.n	8006ccc <_printf_common+0x98>

08006d18 <_printf_i>:
 8006d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	7e0f      	ldrb	r7, [r1, #24]
 8006d1e:	4691      	mov	r9, r2
 8006d20:	2f78      	cmp	r7, #120	@ 0x78
 8006d22:	4680      	mov	r8, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	469a      	mov	sl, r3
 8006d28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d2e:	d807      	bhi.n	8006d40 <_printf_i+0x28>
 8006d30:	2f62      	cmp	r7, #98	@ 0x62
 8006d32:	d80a      	bhi.n	8006d4a <_printf_i+0x32>
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	f000 80d3 	beq.w	8006ee0 <_printf_i+0x1c8>
 8006d3a:	2f58      	cmp	r7, #88	@ 0x58
 8006d3c:	f000 80ba 	beq.w	8006eb4 <_printf_i+0x19c>
 8006d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d48:	e03a      	b.n	8006dc0 <_printf_i+0xa8>
 8006d4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d4e:	2b15      	cmp	r3, #21
 8006d50:	d8f6      	bhi.n	8006d40 <_printf_i+0x28>
 8006d52:	a101      	add	r1, pc, #4	@ (adr r1, 8006d58 <_printf_i+0x40>)
 8006d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006d41 	.word	0x08006d41
 8006d64:	08006d41 	.word	0x08006d41
 8006d68:	08006d41 	.word	0x08006d41
 8006d6c:	08006d41 	.word	0x08006d41
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d41 	.word	0x08006d41
 8006d78:	08006d41 	.word	0x08006d41
 8006d7c:	08006d41 	.word	0x08006d41
 8006d80:	08006d41 	.word	0x08006d41
 8006d84:	08006ec7 	.word	0x08006ec7
 8006d88:	08006def 	.word	0x08006def
 8006d8c:	08006e81 	.word	0x08006e81
 8006d90:	08006d41 	.word	0x08006d41
 8006d94:	08006d41 	.word	0x08006d41
 8006d98:	08006ee9 	.word	0x08006ee9
 8006d9c:	08006d41 	.word	0x08006d41
 8006da0:	08006def 	.word	0x08006def
 8006da4:	08006d41 	.word	0x08006d41
 8006da8:	08006d41 	.word	0x08006d41
 8006dac:	08006e89 	.word	0x08006e89
 8006db0:	6833      	ldr	r3, [r6, #0]
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6032      	str	r2, [r6, #0]
 8006db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e09e      	b.n	8006f02 <_printf_i+0x1ea>
 8006dc4:	6833      	ldr	r3, [r6, #0]
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	1d19      	adds	r1, r3, #4
 8006dca:	6031      	str	r1, [r6, #0]
 8006dcc:	0606      	lsls	r6, r0, #24
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0xbc>
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	e003      	b.n	8006ddc <_printf_i+0xc4>
 8006dd4:	0645      	lsls	r5, r0, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0xb8>
 8006dd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	da03      	bge.n	8006de8 <_printf_i+0xd0>
 8006de0:	232d      	movs	r3, #45	@ 0x2d
 8006de2:	426d      	negs	r5, r5
 8006de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de8:	230a      	movs	r3, #10
 8006dea:	4859      	ldr	r0, [pc, #356]	@ (8006f50 <_printf_i+0x238>)
 8006dec:	e011      	b.n	8006e12 <_printf_i+0xfa>
 8006dee:	6821      	ldr	r1, [r4, #0]
 8006df0:	6833      	ldr	r3, [r6, #0]
 8006df2:	0608      	lsls	r0, r1, #24
 8006df4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006df8:	d402      	bmi.n	8006e00 <_printf_i+0xe8>
 8006dfa:	0649      	lsls	r1, r1, #25
 8006dfc:	bf48      	it	mi
 8006dfe:	b2ad      	uxthmi	r5, r5
 8006e00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	bf14      	ite	ne
 8006e06:	230a      	movne	r3, #10
 8006e08:	2308      	moveq	r3, #8
 8006e0a:	4851      	ldr	r0, [pc, #324]	@ (8006f50 <_printf_i+0x238>)
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e12:	6866      	ldr	r6, [r4, #4]
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	bfa8      	it	ge
 8006e18:	6821      	ldrge	r1, [r4, #0]
 8006e1a:	60a6      	str	r6, [r4, #8]
 8006e1c:	bfa4      	itt	ge
 8006e1e:	f021 0104 	bicge.w	r1, r1, #4
 8006e22:	6021      	strge	r1, [r4, #0]
 8006e24:	b90d      	cbnz	r5, 8006e2a <_printf_i+0x112>
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d04b      	beq.n	8006ec2 <_printf_i+0x1aa>
 8006e2a:	4616      	mov	r6, r2
 8006e2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e30:	fb03 5711 	mls	r7, r3, r1, r5
 8006e34:	5dc7      	ldrb	r7, [r0, r7]
 8006e36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e3a:	462f      	mov	r7, r5
 8006e3c:	42bb      	cmp	r3, r7
 8006e3e:	460d      	mov	r5, r1
 8006e40:	d9f4      	bls.n	8006e2c <_printf_i+0x114>
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d10b      	bne.n	8006e5e <_printf_i+0x146>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	07df      	lsls	r7, r3, #31
 8006e4a:	d508      	bpl.n	8006e5e <_printf_i+0x146>
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	6861      	ldr	r1, [r4, #4]
 8006e50:	4299      	cmp	r1, r3
 8006e52:	bfde      	ittt	le
 8006e54:	2330      	movle	r3, #48	@ 0x30
 8006e56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e5e:	1b92      	subs	r2, r2, r6
 8006e60:	6122      	str	r2, [r4, #16]
 8006e62:	464b      	mov	r3, r9
 8006e64:	4621      	mov	r1, r4
 8006e66:	4640      	mov	r0, r8
 8006e68:	f8cd a000 	str.w	sl, [sp]
 8006e6c:	aa03      	add	r2, sp, #12
 8006e6e:	f7ff fee1 	bl	8006c34 <_printf_common>
 8006e72:	3001      	adds	r0, #1
 8006e74:	d14a      	bne.n	8006f0c <_printf_i+0x1f4>
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7a:	b004      	add	sp, #16
 8006e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	f043 0320 	orr.w	r3, r3, #32
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	2778      	movs	r7, #120	@ 0x78
 8006e8a:	4832      	ldr	r0, [pc, #200]	@ (8006f54 <_printf_i+0x23c>)
 8006e8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	6831      	ldr	r1, [r6, #0]
 8006e94:	061f      	lsls	r7, r3, #24
 8006e96:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e9a:	d402      	bmi.n	8006ea2 <_printf_i+0x18a>
 8006e9c:	065f      	lsls	r7, r3, #25
 8006e9e:	bf48      	it	mi
 8006ea0:	b2ad      	uxthmi	r5, r5
 8006ea2:	6031      	str	r1, [r6, #0]
 8006ea4:	07d9      	lsls	r1, r3, #31
 8006ea6:	bf44      	itt	mi
 8006ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8006eac:	6023      	strmi	r3, [r4, #0]
 8006eae:	b11d      	cbz	r5, 8006eb8 <_printf_i+0x1a0>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	e7ab      	b.n	8006e0c <_printf_i+0xf4>
 8006eb4:	4826      	ldr	r0, [pc, #152]	@ (8006f50 <_printf_i+0x238>)
 8006eb6:	e7e9      	b.n	8006e8c <_printf_i+0x174>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	f023 0320 	bic.w	r3, r3, #32
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	e7f6      	b.n	8006eb0 <_printf_i+0x198>
 8006ec2:	4616      	mov	r6, r2
 8006ec4:	e7bd      	b.n	8006e42 <_printf_i+0x12a>
 8006ec6:	6833      	ldr	r3, [r6, #0]
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1d18      	adds	r0, r3, #4
 8006ecc:	6961      	ldr	r1, [r4, #20]
 8006ece:	6030      	str	r0, [r6, #0]
 8006ed0:	062e      	lsls	r6, r5, #24
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	d501      	bpl.n	8006eda <_printf_i+0x1c2>
 8006ed6:	6019      	str	r1, [r3, #0]
 8006ed8:	e002      	b.n	8006ee0 <_printf_i+0x1c8>
 8006eda:	0668      	lsls	r0, r5, #25
 8006edc:	d5fb      	bpl.n	8006ed6 <_printf_i+0x1be>
 8006ede:	8019      	strh	r1, [r3, #0]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4616      	mov	r6, r2
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	e7bc      	b.n	8006e62 <_printf_i+0x14a>
 8006ee8:	6833      	ldr	r3, [r6, #0]
 8006eea:	2100      	movs	r1, #0
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	6032      	str	r2, [r6, #0]
 8006ef0:	681e      	ldr	r6, [r3, #0]
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f9c6 	bl	8007286 <memchr>
 8006efa:	b108      	cbz	r0, 8006f00 <_printf_i+0x1e8>
 8006efc:	1b80      	subs	r0, r0, r6
 8006efe:	6060      	str	r0, [r4, #4]
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	2300      	movs	r3, #0
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0a:	e7aa      	b.n	8006e62 <_printf_i+0x14a>
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4649      	mov	r1, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	47d0      	blx	sl
 8006f16:	3001      	adds	r0, #1
 8006f18:	d0ad      	beq.n	8006e76 <_printf_i+0x15e>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	079b      	lsls	r3, r3, #30
 8006f1e:	d413      	bmi.n	8006f48 <_printf_i+0x230>
 8006f20:	68e0      	ldr	r0, [r4, #12]
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	4298      	cmp	r0, r3
 8006f26:	bfb8      	it	lt
 8006f28:	4618      	movlt	r0, r3
 8006f2a:	e7a6      	b.n	8006e7a <_printf_i+0x162>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4632      	mov	r2, r6
 8006f30:	4649      	mov	r1, r9
 8006f32:	4640      	mov	r0, r8
 8006f34:	47d0      	blx	sl
 8006f36:	3001      	adds	r0, #1
 8006f38:	d09d      	beq.n	8006e76 <_printf_i+0x15e>
 8006f3a:	3501      	adds	r5, #1
 8006f3c:	68e3      	ldr	r3, [r4, #12]
 8006f3e:	9903      	ldr	r1, [sp, #12]
 8006f40:	1a5b      	subs	r3, r3, r1
 8006f42:	42ab      	cmp	r3, r5
 8006f44:	dcf2      	bgt.n	8006f2c <_printf_i+0x214>
 8006f46:	e7eb      	b.n	8006f20 <_printf_i+0x208>
 8006f48:	2500      	movs	r5, #0
 8006f4a:	f104 0619 	add.w	r6, r4, #25
 8006f4e:	e7f5      	b.n	8006f3c <_printf_i+0x224>
 8006f50:	0800a1dc 	.word	0x0800a1dc
 8006f54:	0800a1ed 	.word	0x0800a1ed

08006f58 <std>:
 8006f58:	2300      	movs	r3, #0
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f66:	6083      	str	r3, [r0, #8]
 8006f68:	8181      	strh	r1, [r0, #12]
 8006f6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f6c:	81c2      	strh	r2, [r0, #14]
 8006f6e:	6183      	str	r3, [r0, #24]
 8006f70:	4619      	mov	r1, r3
 8006f72:	2208      	movs	r2, #8
 8006f74:	305c      	adds	r0, #92	@ 0x5c
 8006f76:	f000 f906 	bl	8007186 <memset>
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <std+0x58>)
 8006f7c:	6224      	str	r4, [r4, #32]
 8006f7e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f80:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb4 <std+0x5c>)
 8006f82:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f84:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <std+0x60>)
 8006f86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f88:	4b0c      	ldr	r3, [pc, #48]	@ (8006fbc <std+0x64>)
 8006f8a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc0 <std+0x68>)
 8006f8e:	429c      	cmp	r4, r3
 8006f90:	d006      	beq.n	8006fa0 <std+0x48>
 8006f92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f96:	4294      	cmp	r4, r2
 8006f98:	d002      	beq.n	8006fa0 <std+0x48>
 8006f9a:	33d0      	adds	r3, #208	@ 0xd0
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d105      	bne.n	8006fac <std+0x54>
 8006fa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f000 b96a 	b.w	8007280 <__retarget_lock_init_recursive>
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	bf00      	nop
 8006fb0:	08007101 	.word	0x08007101
 8006fb4:	08007123 	.word	0x08007123
 8006fb8:	0800715b 	.word	0x0800715b
 8006fbc:	0800717f 	.word	0x0800717f
 8006fc0:	20000868 	.word	0x20000868

08006fc4 <stdio_exit_handler>:
 8006fc4:	4a02      	ldr	r2, [pc, #8]	@ (8006fd0 <stdio_exit_handler+0xc>)
 8006fc6:	4903      	ldr	r1, [pc, #12]	@ (8006fd4 <stdio_exit_handler+0x10>)
 8006fc8:	4803      	ldr	r0, [pc, #12]	@ (8006fd8 <stdio_exit_handler+0x14>)
 8006fca:	f000 b869 	b.w	80070a0 <_fwalk_sglue>
 8006fce:	bf00      	nop
 8006fd0:	2000003c 	.word	0x2000003c
 8006fd4:	08008bc5 	.word	0x08008bc5
 8006fd8:	2000004c 	.word	0x2000004c

08006fdc <cleanup_stdio>:
 8006fdc:	6841      	ldr	r1, [r0, #4]
 8006fde:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <cleanup_stdio+0x34>)
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	d001      	beq.n	8006fec <cleanup_stdio+0x10>
 8006fe8:	f001 fdec 	bl	8008bc4 <_fflush_r>
 8006fec:	68a1      	ldr	r1, [r4, #8]
 8006fee:	4b09      	ldr	r3, [pc, #36]	@ (8007014 <cleanup_stdio+0x38>)
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d002      	beq.n	8006ffa <cleanup_stdio+0x1e>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f001 fde5 	bl	8008bc4 <_fflush_r>
 8006ffa:	68e1      	ldr	r1, [r4, #12]
 8006ffc:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <cleanup_stdio+0x3c>)
 8006ffe:	4299      	cmp	r1, r3
 8007000:	d004      	beq.n	800700c <cleanup_stdio+0x30>
 8007002:	4620      	mov	r0, r4
 8007004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007008:	f001 bddc 	b.w	8008bc4 <_fflush_r>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	bf00      	nop
 8007010:	20000868 	.word	0x20000868
 8007014:	200008d0 	.word	0x200008d0
 8007018:	20000938 	.word	0x20000938

0800701c <global_stdio_init.part.0>:
 800701c:	b510      	push	{r4, lr}
 800701e:	4b0b      	ldr	r3, [pc, #44]	@ (800704c <global_stdio_init.part.0+0x30>)
 8007020:	4c0b      	ldr	r4, [pc, #44]	@ (8007050 <global_stdio_init.part.0+0x34>)
 8007022:	4a0c      	ldr	r2, [pc, #48]	@ (8007054 <global_stdio_init.part.0+0x38>)
 8007024:	4620      	mov	r0, r4
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	2104      	movs	r1, #4
 800702a:	2200      	movs	r2, #0
 800702c:	f7ff ff94 	bl	8006f58 <std>
 8007030:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007034:	2201      	movs	r2, #1
 8007036:	2109      	movs	r1, #9
 8007038:	f7ff ff8e 	bl	8006f58 <std>
 800703c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007040:	2202      	movs	r2, #2
 8007042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007046:	2112      	movs	r1, #18
 8007048:	f7ff bf86 	b.w	8006f58 <std>
 800704c:	200009a0 	.word	0x200009a0
 8007050:	20000868 	.word	0x20000868
 8007054:	08006fc5 	.word	0x08006fc5

08007058 <__sfp_lock_acquire>:
 8007058:	4801      	ldr	r0, [pc, #4]	@ (8007060 <__sfp_lock_acquire+0x8>)
 800705a:	f000 b912 	b.w	8007282 <__retarget_lock_acquire_recursive>
 800705e:	bf00      	nop
 8007060:	200009a9 	.word	0x200009a9

08007064 <__sfp_lock_release>:
 8007064:	4801      	ldr	r0, [pc, #4]	@ (800706c <__sfp_lock_release+0x8>)
 8007066:	f000 b90d 	b.w	8007284 <__retarget_lock_release_recursive>
 800706a:	bf00      	nop
 800706c:	200009a9 	.word	0x200009a9

08007070 <__sinit>:
 8007070:	b510      	push	{r4, lr}
 8007072:	4604      	mov	r4, r0
 8007074:	f7ff fff0 	bl	8007058 <__sfp_lock_acquire>
 8007078:	6a23      	ldr	r3, [r4, #32]
 800707a:	b11b      	cbz	r3, 8007084 <__sinit+0x14>
 800707c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007080:	f7ff bff0 	b.w	8007064 <__sfp_lock_release>
 8007084:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <__sinit+0x28>)
 8007086:	6223      	str	r3, [r4, #32]
 8007088:	4b04      	ldr	r3, [pc, #16]	@ (800709c <__sinit+0x2c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f5      	bne.n	800707c <__sinit+0xc>
 8007090:	f7ff ffc4 	bl	800701c <global_stdio_init.part.0>
 8007094:	e7f2      	b.n	800707c <__sinit+0xc>
 8007096:	bf00      	nop
 8007098:	08006fdd 	.word	0x08006fdd
 800709c:	200009a0 	.word	0x200009a0

080070a0 <_fwalk_sglue>:
 80070a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a4:	4607      	mov	r7, r0
 80070a6:	4688      	mov	r8, r1
 80070a8:	4614      	mov	r4, r2
 80070aa:	2600      	movs	r6, #0
 80070ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b0:	f1b9 0901 	subs.w	r9, r9, #1
 80070b4:	d505      	bpl.n	80070c2 <_fwalk_sglue+0x22>
 80070b6:	6824      	ldr	r4, [r4, #0]
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	d1f7      	bne.n	80070ac <_fwalk_sglue+0xc>
 80070bc:	4630      	mov	r0, r6
 80070be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c2:	89ab      	ldrh	r3, [r5, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d907      	bls.n	80070d8 <_fwalk_sglue+0x38>
 80070c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070cc:	3301      	adds	r3, #1
 80070ce:	d003      	beq.n	80070d8 <_fwalk_sglue+0x38>
 80070d0:	4629      	mov	r1, r5
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	4306      	orrs	r6, r0
 80070d8:	3568      	adds	r5, #104	@ 0x68
 80070da:	e7e9      	b.n	80070b0 <_fwalk_sglue+0x10>

080070dc <iprintf>:
 80070dc:	b40f      	push	{r0, r1, r2, r3}
 80070de:	b507      	push	{r0, r1, r2, lr}
 80070e0:	4906      	ldr	r1, [pc, #24]	@ (80070fc <iprintf+0x20>)
 80070e2:	ab04      	add	r3, sp, #16
 80070e4:	6808      	ldr	r0, [r1, #0]
 80070e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ea:	6881      	ldr	r1, [r0, #8]
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	f001 fbd1 	bl	8008894 <_vfiprintf_r>
 80070f2:	b003      	add	sp, #12
 80070f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f8:	b004      	add	sp, #16
 80070fa:	4770      	bx	lr
 80070fc:	20000048 	.word	0x20000048

08007100 <__sread>:
 8007100:	b510      	push	{r4, lr}
 8007102:	460c      	mov	r4, r1
 8007104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007108:	f000 f86c 	bl	80071e4 <_read_r>
 800710c:	2800      	cmp	r0, #0
 800710e:	bfab      	itete	ge
 8007110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007112:	89a3      	ldrhlt	r3, [r4, #12]
 8007114:	181b      	addge	r3, r3, r0
 8007116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800711a:	bfac      	ite	ge
 800711c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800711e:	81a3      	strhlt	r3, [r4, #12]
 8007120:	bd10      	pop	{r4, pc}

08007122 <__swrite>:
 8007122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007126:	461f      	mov	r7, r3
 8007128:	898b      	ldrh	r3, [r1, #12]
 800712a:	4605      	mov	r5, r0
 800712c:	05db      	lsls	r3, r3, #23
 800712e:	460c      	mov	r4, r1
 8007130:	4616      	mov	r6, r2
 8007132:	d505      	bpl.n	8007140 <__swrite+0x1e>
 8007134:	2302      	movs	r3, #2
 8007136:	2200      	movs	r2, #0
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	f000 f840 	bl	80071c0 <_lseek_r>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	4632      	mov	r2, r6
 8007144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	4628      	mov	r0, r5
 800714c:	463b      	mov	r3, r7
 800714e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007156:	f000 b857 	b.w	8007208 <_write_r>

0800715a <__sseek>:
 800715a:	b510      	push	{r4, lr}
 800715c:	460c      	mov	r4, r1
 800715e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007162:	f000 f82d 	bl	80071c0 <_lseek_r>
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	bf15      	itete	ne
 800716c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800716e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007172:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007176:	81a3      	strheq	r3, [r4, #12]
 8007178:	bf18      	it	ne
 800717a:	81a3      	strhne	r3, [r4, #12]
 800717c:	bd10      	pop	{r4, pc}

0800717e <__sclose>:
 800717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007182:	f000 b80d 	b.w	80071a0 <_close_r>

08007186 <memset>:
 8007186:	4603      	mov	r3, r0
 8007188:	4402      	add	r2, r0
 800718a:	4293      	cmp	r3, r2
 800718c:	d100      	bne.n	8007190 <memset+0xa>
 800718e:	4770      	bx	lr
 8007190:	f803 1b01 	strb.w	r1, [r3], #1
 8007194:	e7f9      	b.n	800718a <memset+0x4>
	...

08007198 <_localeconv_r>:
 8007198:	4800      	ldr	r0, [pc, #0]	@ (800719c <_localeconv_r+0x4>)
 800719a:	4770      	bx	lr
 800719c:	20000188 	.word	0x20000188

080071a0 <_close_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	2300      	movs	r3, #0
 80071a4:	4d05      	ldr	r5, [pc, #20]	@ (80071bc <_close_r+0x1c>)
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7fb fcbb 	bl	8002b26 <_close>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_close_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_close_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	200009a4 	.word	0x200009a4

080071c0 <_lseek_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	2200      	movs	r2, #0
 80071ca:	4d05      	ldr	r5, [pc, #20]	@ (80071e0 <_lseek_r+0x20>)
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7fb fccd 	bl	8002b6e <_lseek>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_lseek_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_lseek_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	200009a4 	.word	0x200009a4

080071e4 <_read_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	4611      	mov	r1, r2
 80071ec:	2200      	movs	r2, #0
 80071ee:	4d05      	ldr	r5, [pc, #20]	@ (8007204 <_read_r+0x20>)
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f7fb fc7a 	bl	8002aec <_read>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_read_r+0x1e>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_read_r+0x1e>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200009a4 	.word	0x200009a4

08007208 <_write_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	2200      	movs	r2, #0
 8007212:	4d05      	ldr	r5, [pc, #20]	@ (8007228 <_write_r+0x20>)
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fbe2 	bl	80019e0 <_write>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_write_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_write_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200009a4 	.word	0x200009a4

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	@ (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000048 	.word	0x20000048

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	2600      	movs	r6, #0
 800723c:	4d0c      	ldr	r5, [pc, #48]	@ (8007270 <__libc_init_array+0x38>)
 800723e:	4c0d      	ldr	r4, [pc, #52]	@ (8007274 <__libc_init_array+0x3c>)
 8007240:	1b64      	subs	r4, r4, r5
 8007242:	10a4      	asrs	r4, r4, #2
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	f002 ff8c 	bl	800a164 <_init>
 800724c:	2600      	movs	r6, #0
 800724e:	4d0a      	ldr	r5, [pc, #40]	@ (8007278 <__libc_init_array+0x40>)
 8007250:	4c0a      	ldr	r4, [pc, #40]	@ (800727c <__libc_init_array+0x44>)
 8007252:	1b64      	subs	r4, r4, r5
 8007254:	10a4      	asrs	r4, r4, #2
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	0800a5b0 	.word	0x0800a5b0
 8007274:	0800a5b0 	.word	0x0800a5b0
 8007278:	0800a5b0 	.word	0x0800a5b0
 800727c:	0800a5b4 	.word	0x0800a5b4

08007280 <__retarget_lock_init_recursive>:
 8007280:	4770      	bx	lr

08007282 <__retarget_lock_acquire_recursive>:
 8007282:	4770      	bx	lr

08007284 <__retarget_lock_release_recursive>:
 8007284:	4770      	bx	lr

08007286 <memchr>:
 8007286:	4603      	mov	r3, r0
 8007288:	b510      	push	{r4, lr}
 800728a:	b2c9      	uxtb	r1, r1
 800728c:	4402      	add	r2, r0
 800728e:	4293      	cmp	r3, r2
 8007290:	4618      	mov	r0, r3
 8007292:	d101      	bne.n	8007298 <memchr+0x12>
 8007294:	2000      	movs	r0, #0
 8007296:	e003      	b.n	80072a0 <memchr+0x1a>
 8007298:	7804      	ldrb	r4, [r0, #0]
 800729a:	3301      	adds	r3, #1
 800729c:	428c      	cmp	r4, r1
 800729e:	d1f6      	bne.n	800728e <memchr+0x8>
 80072a0:	bd10      	pop	{r4, pc}

080072a2 <quorem>:
 80072a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a6:	6903      	ldr	r3, [r0, #16]
 80072a8:	690c      	ldr	r4, [r1, #16]
 80072aa:	4607      	mov	r7, r0
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	db7e      	blt.n	80073ae <quorem+0x10c>
 80072b0:	3c01      	subs	r4, #1
 80072b2:	00a3      	lsls	r3, r4, #2
 80072b4:	f100 0514 	add.w	r5, r0, #20
 80072b8:	f101 0814 	add.w	r8, r1, #20
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072cc:	3301      	adds	r3, #1
 80072ce:	429a      	cmp	r2, r3
 80072d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80072d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072d8:	d32e      	bcc.n	8007338 <quorem+0x96>
 80072da:	f04f 0a00 	mov.w	sl, #0
 80072de:	46c4      	mov	ip, r8
 80072e0:	46ae      	mov	lr, r5
 80072e2:	46d3      	mov	fp, sl
 80072e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072e8:	b298      	uxth	r0, r3
 80072ea:	fb06 a000 	mla	r0, r6, r0, sl
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	0c02      	lsrs	r2, r0, #16
 80072f2:	fb06 2303 	mla	r3, r6, r3, r2
 80072f6:	f8de 2000 	ldr.w	r2, [lr]
 80072fa:	b280      	uxth	r0, r0
 80072fc:	b292      	uxth	r2, r2
 80072fe:	1a12      	subs	r2, r2, r0
 8007300:	445a      	add	r2, fp
 8007302:	f8de 0000 	ldr.w	r0, [lr]
 8007306:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800730a:	b29b      	uxth	r3, r3
 800730c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007310:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007314:	b292      	uxth	r2, r2
 8007316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800731a:	45e1      	cmp	r9, ip
 800731c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007320:	f84e 2b04 	str.w	r2, [lr], #4
 8007324:	d2de      	bcs.n	80072e4 <quorem+0x42>
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	58eb      	ldr	r3, [r5, r3]
 800732a:	b92b      	cbnz	r3, 8007338 <quorem+0x96>
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	3b04      	subs	r3, #4
 8007330:	429d      	cmp	r5, r3
 8007332:	461a      	mov	r2, r3
 8007334:	d32f      	bcc.n	8007396 <quorem+0xf4>
 8007336:	613c      	str	r4, [r7, #16]
 8007338:	4638      	mov	r0, r7
 800733a:	f001 f97b 	bl	8008634 <__mcmp>
 800733e:	2800      	cmp	r0, #0
 8007340:	db25      	blt.n	800738e <quorem+0xec>
 8007342:	4629      	mov	r1, r5
 8007344:	2000      	movs	r0, #0
 8007346:	f858 2b04 	ldr.w	r2, [r8], #4
 800734a:	f8d1 c000 	ldr.w	ip, [r1]
 800734e:	fa1f fe82 	uxth.w	lr, r2
 8007352:	fa1f f38c 	uxth.w	r3, ip
 8007356:	eba3 030e 	sub.w	r3, r3, lr
 800735a:	4403      	add	r3, r0
 800735c:	0c12      	lsrs	r2, r2, #16
 800735e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007362:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800736c:	45c1      	cmp	r9, r8
 800736e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007372:	f841 3b04 	str.w	r3, [r1], #4
 8007376:	d2e6      	bcs.n	8007346 <quorem+0xa4>
 8007378:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800737c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007380:	b922      	cbnz	r2, 800738c <quorem+0xea>
 8007382:	3b04      	subs	r3, #4
 8007384:	429d      	cmp	r5, r3
 8007386:	461a      	mov	r2, r3
 8007388:	d30b      	bcc.n	80073a2 <quorem+0x100>
 800738a:	613c      	str	r4, [r7, #16]
 800738c:	3601      	adds	r6, #1
 800738e:	4630      	mov	r0, r6
 8007390:	b003      	add	sp, #12
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	3b04      	subs	r3, #4
 800739a:	2a00      	cmp	r2, #0
 800739c:	d1cb      	bne.n	8007336 <quorem+0x94>
 800739e:	3c01      	subs	r4, #1
 80073a0:	e7c6      	b.n	8007330 <quorem+0x8e>
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	3b04      	subs	r3, #4
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	d1ef      	bne.n	800738a <quorem+0xe8>
 80073aa:	3c01      	subs	r4, #1
 80073ac:	e7ea      	b.n	8007384 <quorem+0xe2>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e7ee      	b.n	8007390 <quorem+0xee>
 80073b2:	0000      	movs	r0, r0
 80073b4:	0000      	movs	r0, r0
	...

080073b8 <_dtoa_r>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	4614      	mov	r4, r2
 80073be:	461d      	mov	r5, r3
 80073c0:	69c7      	ldr	r7, [r0, #28]
 80073c2:	b097      	sub	sp, #92	@ 0x5c
 80073c4:	4683      	mov	fp, r0
 80073c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80073ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80073cc:	b97f      	cbnz	r7, 80073ee <_dtoa_r+0x36>
 80073ce:	2010      	movs	r0, #16
 80073d0:	f000 fe02 	bl	8007fd8 <malloc>
 80073d4:	4602      	mov	r2, r0
 80073d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80073da:	b920      	cbnz	r0, 80073e6 <_dtoa_r+0x2e>
 80073dc:	21ef      	movs	r1, #239	@ 0xef
 80073de:	4ba8      	ldr	r3, [pc, #672]	@ (8007680 <_dtoa_r+0x2c8>)
 80073e0:	48a8      	ldr	r0, [pc, #672]	@ (8007684 <_dtoa_r+0x2cc>)
 80073e2:	f001 fcc9 	bl	8008d78 <__assert_func>
 80073e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80073ea:	6007      	str	r7, [r0, #0]
 80073ec:	60c7      	str	r7, [r0, #12]
 80073ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	b159      	cbz	r1, 800740e <_dtoa_r+0x56>
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	2301      	movs	r3, #1
 80073fa:	4093      	lsls	r3, r2
 80073fc:	604a      	str	r2, [r1, #4]
 80073fe:	608b      	str	r3, [r1, #8]
 8007400:	4658      	mov	r0, fp
 8007402:	f000 fedf 	bl	80081c4 <_Bfree>
 8007406:	2200      	movs	r2, #0
 8007408:	f8db 301c 	ldr.w	r3, [fp, #28]
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	1e2b      	subs	r3, r5, #0
 8007410:	bfaf      	iteee	ge
 8007412:	2300      	movge	r3, #0
 8007414:	2201      	movlt	r2, #1
 8007416:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800741a:	9303      	strlt	r3, [sp, #12]
 800741c:	bfa8      	it	ge
 800741e:	6033      	strge	r3, [r6, #0]
 8007420:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007424:	4b98      	ldr	r3, [pc, #608]	@ (8007688 <_dtoa_r+0x2d0>)
 8007426:	bfb8      	it	lt
 8007428:	6032      	strlt	r2, [r6, #0]
 800742a:	ea33 0308 	bics.w	r3, r3, r8
 800742e:	d112      	bne.n	8007456 <_dtoa_r+0x9e>
 8007430:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007434:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800743c:	4323      	orrs	r3, r4
 800743e:	f000 8550 	beq.w	8007ee2 <_dtoa_r+0xb2a>
 8007442:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007444:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800768c <_dtoa_r+0x2d4>
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8552 	beq.w	8007ef2 <_dtoa_r+0xb3a>
 800744e:	f10a 0303 	add.w	r3, sl, #3
 8007452:	f000 bd4c 	b.w	8007eee <_dtoa_r+0xb36>
 8007456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800745a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800745e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	f7f9 fa9f 	bl	80009a8 <__aeabi_dcmpeq>
 800746a:	4607      	mov	r7, r0
 800746c:	b158      	cbz	r0, 8007486 <_dtoa_r+0xce>
 800746e:	2301      	movs	r3, #1
 8007470:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007476:	b113      	cbz	r3, 800747e <_dtoa_r+0xc6>
 8007478:	4b85      	ldr	r3, [pc, #532]	@ (8007690 <_dtoa_r+0x2d8>)
 800747a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007694 <_dtoa_r+0x2dc>
 8007482:	f000 bd36 	b.w	8007ef2 <_dtoa_r+0xb3a>
 8007486:	ab14      	add	r3, sp, #80	@ 0x50
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	ab15      	add	r3, sp, #84	@ 0x54
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4658      	mov	r0, fp
 8007490:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007494:	f001 f97e 	bl	8008794 <__d2b>
 8007498:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800749c:	4681      	mov	r9, r0
 800749e:	2e00      	cmp	r6, #0
 80074a0:	d077      	beq.n	8007592 <_dtoa_r+0x1da>
 80074a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80074ba:	4619      	mov	r1, r3
 80074bc:	2200      	movs	r2, #0
 80074be:	4b76      	ldr	r3, [pc, #472]	@ (8007698 <_dtoa_r+0x2e0>)
 80074c0:	f7f8 fe52 	bl	8000168 <__aeabi_dsub>
 80074c4:	a368      	add	r3, pc, #416	@ (adr r3, 8007668 <_dtoa_r+0x2b0>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f9 f805 	bl	80004d8 <__aeabi_dmul>
 80074ce:	a368      	add	r3, pc, #416	@ (adr r3, 8007670 <_dtoa_r+0x2b8>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f8 fe4a 	bl	800016c <__adddf3>
 80074d8:	4604      	mov	r4, r0
 80074da:	4630      	mov	r0, r6
 80074dc:	460d      	mov	r5, r1
 80074de:	f7f8 ff91 	bl	8000404 <__aeabi_i2d>
 80074e2:	a365      	add	r3, pc, #404	@ (adr r3, 8007678 <_dtoa_r+0x2c0>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f8 fff6 	bl	80004d8 <__aeabi_dmul>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7f8 fe3a 	bl	800016c <__adddf3>
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 fa9c 	bl	8000a38 <__aeabi_d2iz>
 8007500:	2200      	movs	r2, #0
 8007502:	4607      	mov	r7, r0
 8007504:	2300      	movs	r3, #0
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f9 fa57 	bl	80009bc <__aeabi_dcmplt>
 800750e:	b140      	cbz	r0, 8007522 <_dtoa_r+0x16a>
 8007510:	4638      	mov	r0, r7
 8007512:	f7f8 ff77 	bl	8000404 <__aeabi_i2d>
 8007516:	4622      	mov	r2, r4
 8007518:	462b      	mov	r3, r5
 800751a:	f7f9 fa45 	bl	80009a8 <__aeabi_dcmpeq>
 800751e:	b900      	cbnz	r0, 8007522 <_dtoa_r+0x16a>
 8007520:	3f01      	subs	r7, #1
 8007522:	2f16      	cmp	r7, #22
 8007524:	d853      	bhi.n	80075ce <_dtoa_r+0x216>
 8007526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800752a:	4b5c      	ldr	r3, [pc, #368]	@ (800769c <_dtoa_r+0x2e4>)
 800752c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f7f9 fa42 	bl	80009bc <__aeabi_dcmplt>
 8007538:	2800      	cmp	r0, #0
 800753a:	d04a      	beq.n	80075d2 <_dtoa_r+0x21a>
 800753c:	2300      	movs	r3, #0
 800753e:	3f01      	subs	r7, #1
 8007540:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007542:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007544:	1b9b      	subs	r3, r3, r6
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	bf46      	itte	mi
 800754a:	f1c3 0801 	rsbmi	r8, r3, #1
 800754e:	2300      	movmi	r3, #0
 8007550:	f04f 0800 	movpl.w	r8, #0
 8007554:	9209      	str	r2, [sp, #36]	@ 0x24
 8007556:	bf48      	it	mi
 8007558:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800755a:	2f00      	cmp	r7, #0
 800755c:	db3b      	blt.n	80075d6 <_dtoa_r+0x21e>
 800755e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007560:	970e      	str	r7, [sp, #56]	@ 0x38
 8007562:	443b      	add	r3, r7
 8007564:	9309      	str	r3, [sp, #36]	@ 0x24
 8007566:	2300      	movs	r3, #0
 8007568:	930a      	str	r3, [sp, #40]	@ 0x28
 800756a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800756c:	2b09      	cmp	r3, #9
 800756e:	d866      	bhi.n	800763e <_dtoa_r+0x286>
 8007570:	2b05      	cmp	r3, #5
 8007572:	bfc4      	itt	gt
 8007574:	3b04      	subgt	r3, #4
 8007576:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007578:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800757a:	bfc8      	it	gt
 800757c:	2400      	movgt	r4, #0
 800757e:	f1a3 0302 	sub.w	r3, r3, #2
 8007582:	bfd8      	it	le
 8007584:	2401      	movle	r4, #1
 8007586:	2b03      	cmp	r3, #3
 8007588:	d864      	bhi.n	8007654 <_dtoa_r+0x29c>
 800758a:	e8df f003 	tbb	[pc, r3]
 800758e:	382b      	.short	0x382b
 8007590:	5636      	.short	0x5636
 8007592:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007596:	441e      	add	r6, r3
 8007598:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800759c:	2b20      	cmp	r3, #32
 800759e:	bfc1      	itttt	gt
 80075a0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80075a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075b0:	bfd6      	itet	le
 80075b2:	f1c3 0320 	rsble	r3, r3, #32
 80075b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80075ba:	fa04 f003 	lslle.w	r0, r4, r3
 80075be:	f7f8 ff11 	bl	80003e4 <__aeabi_ui2d>
 80075c2:	2201      	movs	r2, #1
 80075c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075c8:	3e01      	subs	r6, #1
 80075ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80075cc:	e775      	b.n	80074ba <_dtoa_r+0x102>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e7b6      	b.n	8007540 <_dtoa_r+0x188>
 80075d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80075d4:	e7b5      	b.n	8007542 <_dtoa_r+0x18a>
 80075d6:	427b      	negs	r3, r7
 80075d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075da:	2300      	movs	r3, #0
 80075dc:	eba8 0807 	sub.w	r8, r8, r7
 80075e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80075e2:	e7c2      	b.n	800756a <_dtoa_r+0x1b2>
 80075e4:	2300      	movs	r3, #0
 80075e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dc35      	bgt.n	800765a <_dtoa_r+0x2a2>
 80075ee:	2301      	movs	r3, #1
 80075f0:	461a      	mov	r2, r3
 80075f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80075f6:	9221      	str	r2, [sp, #132]	@ 0x84
 80075f8:	e00b      	b.n	8007612 <_dtoa_r+0x25a>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e7f3      	b.n	80075e6 <_dtoa_r+0x22e>
 80075fe:	2300      	movs	r3, #0
 8007600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007604:	18fb      	adds	r3, r7, r3
 8007606:	9308      	str	r3, [sp, #32]
 8007608:	3301      	adds	r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	9307      	str	r3, [sp, #28]
 800760e:	bfb8      	it	lt
 8007610:	2301      	movlt	r3, #1
 8007612:	2100      	movs	r1, #0
 8007614:	2204      	movs	r2, #4
 8007616:	f8db 001c 	ldr.w	r0, [fp, #28]
 800761a:	f102 0514 	add.w	r5, r2, #20
 800761e:	429d      	cmp	r5, r3
 8007620:	d91f      	bls.n	8007662 <_dtoa_r+0x2aa>
 8007622:	6041      	str	r1, [r0, #4]
 8007624:	4658      	mov	r0, fp
 8007626:	f000 fd8d 	bl	8008144 <_Balloc>
 800762a:	4682      	mov	sl, r0
 800762c:	2800      	cmp	r0, #0
 800762e:	d139      	bne.n	80076a4 <_dtoa_r+0x2ec>
 8007630:	4602      	mov	r2, r0
 8007632:	f240 11af 	movw	r1, #431	@ 0x1af
 8007636:	4b1a      	ldr	r3, [pc, #104]	@ (80076a0 <_dtoa_r+0x2e8>)
 8007638:	e6d2      	b.n	80073e0 <_dtoa_r+0x28>
 800763a:	2301      	movs	r3, #1
 800763c:	e7e0      	b.n	8007600 <_dtoa_r+0x248>
 800763e:	2401      	movs	r4, #1
 8007640:	2300      	movs	r3, #0
 8007642:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007644:	9320      	str	r3, [sp, #128]	@ 0x80
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	2200      	movs	r2, #0
 800764c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007650:	2312      	movs	r3, #18
 8007652:	e7d0      	b.n	80075f6 <_dtoa_r+0x23e>
 8007654:	2301      	movs	r3, #1
 8007656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007658:	e7f5      	b.n	8007646 <_dtoa_r+0x28e>
 800765a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800765c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007660:	e7d7      	b.n	8007612 <_dtoa_r+0x25a>
 8007662:	3101      	adds	r1, #1
 8007664:	0052      	lsls	r2, r2, #1
 8007666:	e7d8      	b.n	800761a <_dtoa_r+0x262>
 8007668:	636f4361 	.word	0x636f4361
 800766c:	3fd287a7 	.word	0x3fd287a7
 8007670:	8b60c8b3 	.word	0x8b60c8b3
 8007674:	3fc68a28 	.word	0x3fc68a28
 8007678:	509f79fb 	.word	0x509f79fb
 800767c:	3fd34413 	.word	0x3fd34413
 8007680:	0800a20b 	.word	0x0800a20b
 8007684:	0800a222 	.word	0x0800a222
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	0800a207 	.word	0x0800a207
 8007690:	0800a1db 	.word	0x0800a1db
 8007694:	0800a1da 	.word	0x0800a1da
 8007698:	3ff80000 	.word	0x3ff80000
 800769c:	0800a318 	.word	0x0800a318
 80076a0:	0800a27a 	.word	0x0800a27a
 80076a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076a8:	6018      	str	r0, [r3, #0]
 80076aa:	9b07      	ldr	r3, [sp, #28]
 80076ac:	2b0e      	cmp	r3, #14
 80076ae:	f200 80a4 	bhi.w	80077fa <_dtoa_r+0x442>
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	f000 80a1 	beq.w	80077fa <_dtoa_r+0x442>
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	dd33      	ble.n	8007724 <_dtoa_r+0x36c>
 80076bc:	4b86      	ldr	r3, [pc, #536]	@ (80078d8 <_dtoa_r+0x520>)
 80076be:	f007 020f 	and.w	r2, r7, #15
 80076c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c6:	05f8      	lsls	r0, r7, #23
 80076c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076d4:	d516      	bpl.n	8007704 <_dtoa_r+0x34c>
 80076d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076da:	4b80      	ldr	r3, [pc, #512]	@ (80078dc <_dtoa_r+0x524>)
 80076dc:	2603      	movs	r6, #3
 80076de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076e2:	f7f9 f823 	bl	800072c <__aeabi_ddiv>
 80076e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ea:	f004 040f 	and.w	r4, r4, #15
 80076ee:	4d7b      	ldr	r5, [pc, #492]	@ (80078dc <_dtoa_r+0x524>)
 80076f0:	b954      	cbnz	r4, 8007708 <_dtoa_r+0x350>
 80076f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fa:	f7f9 f817 	bl	800072c <__aeabi_ddiv>
 80076fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007702:	e028      	b.n	8007756 <_dtoa_r+0x39e>
 8007704:	2602      	movs	r6, #2
 8007706:	e7f2      	b.n	80076ee <_dtoa_r+0x336>
 8007708:	07e1      	lsls	r1, r4, #31
 800770a:	d508      	bpl.n	800771e <_dtoa_r+0x366>
 800770c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007710:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007714:	f7f8 fee0 	bl	80004d8 <__aeabi_dmul>
 8007718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800771c:	3601      	adds	r6, #1
 800771e:	1064      	asrs	r4, r4, #1
 8007720:	3508      	adds	r5, #8
 8007722:	e7e5      	b.n	80076f0 <_dtoa_r+0x338>
 8007724:	f000 80d2 	beq.w	80078cc <_dtoa_r+0x514>
 8007728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800772c:	427c      	negs	r4, r7
 800772e:	4b6a      	ldr	r3, [pc, #424]	@ (80078d8 <_dtoa_r+0x520>)
 8007730:	f004 020f 	and.w	r2, r4, #15
 8007734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f7f8 fecc 	bl	80004d8 <__aeabi_dmul>
 8007740:	2602      	movs	r6, #2
 8007742:	2300      	movs	r3, #0
 8007744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007748:	4d64      	ldr	r5, [pc, #400]	@ (80078dc <_dtoa_r+0x524>)
 800774a:	1124      	asrs	r4, r4, #4
 800774c:	2c00      	cmp	r4, #0
 800774e:	f040 80b2 	bne.w	80078b6 <_dtoa_r+0x4fe>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1d3      	bne.n	80076fe <_dtoa_r+0x346>
 8007756:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800775a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 80b7 	beq.w	80078d0 <_dtoa_r+0x518>
 8007762:	2200      	movs	r2, #0
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	4b5d      	ldr	r3, [pc, #372]	@ (80078e0 <_dtoa_r+0x528>)
 800776a:	f7f9 f927 	bl	80009bc <__aeabi_dcmplt>
 800776e:	2800      	cmp	r0, #0
 8007770:	f000 80ae 	beq.w	80078d0 <_dtoa_r+0x518>
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 80aa 	beq.w	80078d0 <_dtoa_r+0x518>
 800777c:	9b08      	ldr	r3, [sp, #32]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd37      	ble.n	80077f2 <_dtoa_r+0x43a>
 8007782:	1e7b      	subs	r3, r7, #1
 8007784:	4620      	mov	r0, r4
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	2200      	movs	r2, #0
 800778a:	4629      	mov	r1, r5
 800778c:	4b55      	ldr	r3, [pc, #340]	@ (80078e4 <_dtoa_r+0x52c>)
 800778e:	f7f8 fea3 	bl	80004d8 <__aeabi_dmul>
 8007792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007796:	9c08      	ldr	r4, [sp, #32]
 8007798:	3601      	adds	r6, #1
 800779a:	4630      	mov	r0, r6
 800779c:	f7f8 fe32 	bl	8000404 <__aeabi_i2d>
 80077a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077a4:	f7f8 fe98 	bl	80004d8 <__aeabi_dmul>
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b4f      	ldr	r3, [pc, #316]	@ (80078e8 <_dtoa_r+0x530>)
 80077ac:	f7f8 fcde 	bl	800016c <__adddf3>
 80077b0:	4605      	mov	r5, r0
 80077b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077b6:	2c00      	cmp	r4, #0
 80077b8:	f040 809a 	bne.w	80078f0 <_dtoa_r+0x538>
 80077bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	4b4a      	ldr	r3, [pc, #296]	@ (80078ec <_dtoa_r+0x534>)
 80077c4:	f7f8 fcd0 	bl	8000168 <__aeabi_dsub>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4633      	mov	r3, r6
 80077d4:	f7f9 f910 	bl	80009f8 <__aeabi_dcmpgt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f040 828e 	bne.w	8007cfa <_dtoa_r+0x942>
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	462a      	mov	r2, r5
 80077e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077e8:	f7f9 f8e8 	bl	80009bc <__aeabi_dcmplt>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f040 8127 	bne.w	8007a40 <_dtoa_r+0x688>
 80077f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80077f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80077fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f2c0 8163 	blt.w	8007ac8 <_dtoa_r+0x710>
 8007802:	2f0e      	cmp	r7, #14
 8007804:	f300 8160 	bgt.w	8007ac8 <_dtoa_r+0x710>
 8007808:	4b33      	ldr	r3, [pc, #204]	@ (80078d8 <_dtoa_r+0x520>)
 800780a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800780e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007812:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007816:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007818:	2b00      	cmp	r3, #0
 800781a:	da03      	bge.n	8007824 <_dtoa_r+0x46c>
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	2b00      	cmp	r3, #0
 8007820:	f340 8100 	ble.w	8007a24 <_dtoa_r+0x66c>
 8007824:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007828:	4656      	mov	r6, sl
 800782a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800782e:	4620      	mov	r0, r4
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 ff7b 	bl	800072c <__aeabi_ddiv>
 8007836:	f7f9 f8ff 	bl	8000a38 <__aeabi_d2iz>
 800783a:	4680      	mov	r8, r0
 800783c:	f7f8 fde2 	bl	8000404 <__aeabi_i2d>
 8007840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007844:	f7f8 fe48 	bl	80004d8 <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4620      	mov	r0, r4
 800784e:	4629      	mov	r1, r5
 8007850:	f7f8 fc8a 	bl	8000168 <__aeabi_dsub>
 8007854:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007858:	9d07      	ldr	r5, [sp, #28]
 800785a:	f806 4b01 	strb.w	r4, [r6], #1
 800785e:	eba6 040a 	sub.w	r4, r6, sl
 8007862:	42a5      	cmp	r5, r4
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	f040 8116 	bne.w	8007a98 <_dtoa_r+0x6e0>
 800786c:	f7f8 fc7e 	bl	800016c <__adddf3>
 8007870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007874:	4604      	mov	r4, r0
 8007876:	460d      	mov	r5, r1
 8007878:	f7f9 f8be 	bl	80009f8 <__aeabi_dcmpgt>
 800787c:	2800      	cmp	r0, #0
 800787e:	f040 80f8 	bne.w	8007a72 <_dtoa_r+0x6ba>
 8007882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f9 f88d 	bl	80009a8 <__aeabi_dcmpeq>
 800788e:	b118      	cbz	r0, 8007898 <_dtoa_r+0x4e0>
 8007890:	f018 0f01 	tst.w	r8, #1
 8007894:	f040 80ed 	bne.w	8007a72 <_dtoa_r+0x6ba>
 8007898:	4649      	mov	r1, r9
 800789a:	4658      	mov	r0, fp
 800789c:	f000 fc92 	bl	80081c4 <_Bfree>
 80078a0:	2300      	movs	r3, #0
 80078a2:	7033      	strb	r3, [r6, #0]
 80078a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078a6:	3701      	adds	r7, #1
 80078a8:	601f      	str	r7, [r3, #0]
 80078aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8320 	beq.w	8007ef2 <_dtoa_r+0xb3a>
 80078b2:	601e      	str	r6, [r3, #0]
 80078b4:	e31d      	b.n	8007ef2 <_dtoa_r+0xb3a>
 80078b6:	07e2      	lsls	r2, r4, #31
 80078b8:	d505      	bpl.n	80078c6 <_dtoa_r+0x50e>
 80078ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	2301      	movs	r3, #1
 80078c4:	3601      	adds	r6, #1
 80078c6:	1064      	asrs	r4, r4, #1
 80078c8:	3508      	adds	r5, #8
 80078ca:	e73f      	b.n	800774c <_dtoa_r+0x394>
 80078cc:	2602      	movs	r6, #2
 80078ce:	e742      	b.n	8007756 <_dtoa_r+0x39e>
 80078d0:	9c07      	ldr	r4, [sp, #28]
 80078d2:	9704      	str	r7, [sp, #16]
 80078d4:	e761      	b.n	800779a <_dtoa_r+0x3e2>
 80078d6:	bf00      	nop
 80078d8:	0800a318 	.word	0x0800a318
 80078dc:	0800a2f0 	.word	0x0800a2f0
 80078e0:	3ff00000 	.word	0x3ff00000
 80078e4:	40240000 	.word	0x40240000
 80078e8:	401c0000 	.word	0x401c0000
 80078ec:	40140000 	.word	0x40140000
 80078f0:	4b70      	ldr	r3, [pc, #448]	@ (8007ab4 <_dtoa_r+0x6fc>)
 80078f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078fc:	4454      	add	r4, sl
 80078fe:	2900      	cmp	r1, #0
 8007900:	d045      	beq.n	800798e <_dtoa_r+0x5d6>
 8007902:	2000      	movs	r0, #0
 8007904:	496c      	ldr	r1, [pc, #432]	@ (8007ab8 <_dtoa_r+0x700>)
 8007906:	f7f8 ff11 	bl	800072c <__aeabi_ddiv>
 800790a:	4633      	mov	r3, r6
 800790c:	462a      	mov	r2, r5
 800790e:	f7f8 fc2b 	bl	8000168 <__aeabi_dsub>
 8007912:	4656      	mov	r6, sl
 8007914:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800791c:	f7f9 f88c 	bl	8000a38 <__aeabi_d2iz>
 8007920:	4605      	mov	r5, r0
 8007922:	f7f8 fd6f 	bl	8000404 <__aeabi_i2d>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792e:	f7f8 fc1b 	bl	8000168 <__aeabi_dsub>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	3530      	adds	r5, #48	@ 0x30
 8007938:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800793c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007940:	f806 5b01 	strb.w	r5, [r6], #1
 8007944:	f7f9 f83a 	bl	80009bc <__aeabi_dcmplt>
 8007948:	2800      	cmp	r0, #0
 800794a:	d163      	bne.n	8007a14 <_dtoa_r+0x65c>
 800794c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007950:	2000      	movs	r0, #0
 8007952:	495a      	ldr	r1, [pc, #360]	@ (8007abc <_dtoa_r+0x704>)
 8007954:	f7f8 fc08 	bl	8000168 <__aeabi_dsub>
 8007958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800795c:	f7f9 f82e 	bl	80009bc <__aeabi_dcmplt>
 8007960:	2800      	cmp	r0, #0
 8007962:	f040 8087 	bne.w	8007a74 <_dtoa_r+0x6bc>
 8007966:	42a6      	cmp	r6, r4
 8007968:	f43f af43 	beq.w	80077f2 <_dtoa_r+0x43a>
 800796c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007970:	2200      	movs	r2, #0
 8007972:	4b53      	ldr	r3, [pc, #332]	@ (8007ac0 <_dtoa_r+0x708>)
 8007974:	f7f8 fdb0 	bl	80004d8 <__aeabi_dmul>
 8007978:	2200      	movs	r2, #0
 800797a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800797e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007982:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac0 <_dtoa_r+0x708>)
 8007984:	f7f8 fda8 	bl	80004d8 <__aeabi_dmul>
 8007988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800798c:	e7c4      	b.n	8007918 <_dtoa_r+0x560>
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	f7f8 fda1 	bl	80004d8 <__aeabi_dmul>
 8007996:	4656      	mov	r6, sl
 8007998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800799c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800799e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a2:	f7f9 f849 	bl	8000a38 <__aeabi_d2iz>
 80079a6:	4605      	mov	r5, r0
 80079a8:	f7f8 fd2c 	bl	8000404 <__aeabi_i2d>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b4:	f7f8 fbd8 	bl	8000168 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	3530      	adds	r5, #48	@ 0x30
 80079be:	f806 5b01 	strb.w	r5, [r6], #1
 80079c2:	42a6      	cmp	r6, r4
 80079c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	d124      	bne.n	8007a18 <_dtoa_r+0x660>
 80079ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079d2:	4b39      	ldr	r3, [pc, #228]	@ (8007ab8 <_dtoa_r+0x700>)
 80079d4:	f7f8 fbca 	bl	800016c <__adddf3>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079e0:	f7f9 f80a 	bl	80009f8 <__aeabi_dcmpgt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d145      	bne.n	8007a74 <_dtoa_r+0x6bc>
 80079e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079ec:	2000      	movs	r0, #0
 80079ee:	4932      	ldr	r1, [pc, #200]	@ (8007ab8 <_dtoa_r+0x700>)
 80079f0:	f7f8 fbba 	bl	8000168 <__aeabi_dsub>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fc:	f7f8 ffde 	bl	80009bc <__aeabi_dcmplt>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	f43f aef6 	beq.w	80077f2 <_dtoa_r+0x43a>
 8007a06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007a08:	1e73      	subs	r3, r6, #1
 8007a0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a10:	2b30      	cmp	r3, #48	@ 0x30
 8007a12:	d0f8      	beq.n	8007a06 <_dtoa_r+0x64e>
 8007a14:	9f04      	ldr	r7, [sp, #16]
 8007a16:	e73f      	b.n	8007898 <_dtoa_r+0x4e0>
 8007a18:	4b29      	ldr	r3, [pc, #164]	@ (8007ac0 <_dtoa_r+0x708>)
 8007a1a:	f7f8 fd5d 	bl	80004d8 <__aeabi_dmul>
 8007a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a22:	e7bc      	b.n	800799e <_dtoa_r+0x5e6>
 8007a24:	d10c      	bne.n	8007a40 <_dtoa_r+0x688>
 8007a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4b25      	ldr	r3, [pc, #148]	@ (8007ac4 <_dtoa_r+0x70c>)
 8007a2e:	f7f8 fd53 	bl	80004d8 <__aeabi_dmul>
 8007a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a36:	f7f8 ffd5 	bl	80009e4 <__aeabi_dcmpge>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f000 815b 	beq.w	8007cf6 <_dtoa_r+0x93e>
 8007a40:	2400      	movs	r4, #0
 8007a42:	4625      	mov	r5, r4
 8007a44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a46:	4656      	mov	r6, sl
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	2700      	movs	r7, #0
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4658      	mov	r0, fp
 8007a52:	f000 fbb7 	bl	80081c4 <_Bfree>
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	d0dc      	beq.n	8007a14 <_dtoa_r+0x65c>
 8007a5a:	b12f      	cbz	r7, 8007a68 <_dtoa_r+0x6b0>
 8007a5c:	42af      	cmp	r7, r5
 8007a5e:	d003      	beq.n	8007a68 <_dtoa_r+0x6b0>
 8007a60:	4639      	mov	r1, r7
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fbae 	bl	80081c4 <_Bfree>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	f000 fbaa 	bl	80081c4 <_Bfree>
 8007a70:	e7d0      	b.n	8007a14 <_dtoa_r+0x65c>
 8007a72:	9704      	str	r7, [sp, #16]
 8007a74:	4633      	mov	r3, r6
 8007a76:	461e      	mov	r6, r3
 8007a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a7c:	2a39      	cmp	r2, #57	@ 0x39
 8007a7e:	d107      	bne.n	8007a90 <_dtoa_r+0x6d8>
 8007a80:	459a      	cmp	sl, r3
 8007a82:	d1f8      	bne.n	8007a76 <_dtoa_r+0x6be>
 8007a84:	9a04      	ldr	r2, [sp, #16]
 8007a86:	3201      	adds	r2, #1
 8007a88:	9204      	str	r2, [sp, #16]
 8007a8a:	2230      	movs	r2, #48	@ 0x30
 8007a8c:	f88a 2000 	strb.w	r2, [sl]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	3201      	adds	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e7bd      	b.n	8007a14 <_dtoa_r+0x65c>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4b09      	ldr	r3, [pc, #36]	@ (8007ac0 <_dtoa_r+0x708>)
 8007a9c:	f7f8 fd1c 	bl	80004d8 <__aeabi_dmul>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	f7f8 ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f43f aebc 	beq.w	800782a <_dtoa_r+0x472>
 8007ab2:	e6f1      	b.n	8007898 <_dtoa_r+0x4e0>
 8007ab4:	0800a318 	.word	0x0800a318
 8007ab8:	3fe00000 	.word	0x3fe00000
 8007abc:	3ff00000 	.word	0x3ff00000
 8007ac0:	40240000 	.word	0x40240000
 8007ac4:	40140000 	.word	0x40140000
 8007ac8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	f000 80db 	beq.w	8007c86 <_dtoa_r+0x8ce>
 8007ad0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ad2:	2a01      	cmp	r2, #1
 8007ad4:	f300 80bf 	bgt.w	8007c56 <_dtoa_r+0x89e>
 8007ad8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	f000 80b7 	beq.w	8007c4e <_dtoa_r+0x896>
 8007ae0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ae4:	4646      	mov	r6, r8
 8007ae6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aea:	2101      	movs	r1, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	4658      	mov	r0, fp
 8007af0:	4498      	add	r8, r3
 8007af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007af4:	f000 fc1a 	bl	800832c <__i2b>
 8007af8:	4605      	mov	r5, r0
 8007afa:	b15e      	cbz	r6, 8007b14 <_dtoa_r+0x75c>
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dd08      	ble.n	8007b14 <_dtoa_r+0x75c>
 8007b02:	42b3      	cmp	r3, r6
 8007b04:	bfa8      	it	ge
 8007b06:	4633      	movge	r3, r6
 8007b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b0a:	eba8 0803 	sub.w	r8, r8, r3
 8007b0e:	1af6      	subs	r6, r6, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b16:	b1f3      	cbz	r3, 8007b56 <_dtoa_r+0x79e>
 8007b18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80b7 	beq.w	8007c8e <_dtoa_r+0x8d6>
 8007b20:	b18c      	cbz	r4, 8007b46 <_dtoa_r+0x78e>
 8007b22:	4629      	mov	r1, r5
 8007b24:	4622      	mov	r2, r4
 8007b26:	4658      	mov	r0, fp
 8007b28:	f000 fcbe 	bl	80084a8 <__pow5mult>
 8007b2c:	464a      	mov	r2, r9
 8007b2e:	4601      	mov	r1, r0
 8007b30:	4605      	mov	r5, r0
 8007b32:	4658      	mov	r0, fp
 8007b34:	f000 fc10 	bl	8008358 <__multiply>
 8007b38:	4649      	mov	r1, r9
 8007b3a:	9004      	str	r0, [sp, #16]
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	f000 fb41 	bl	80081c4 <_Bfree>
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	4699      	mov	r9, r3
 8007b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b48:	1b1a      	subs	r2, r3, r4
 8007b4a:	d004      	beq.n	8007b56 <_dtoa_r+0x79e>
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f000 fcaa 	bl	80084a8 <__pow5mult>
 8007b54:	4681      	mov	r9, r0
 8007b56:	2101      	movs	r1, #1
 8007b58:	4658      	mov	r0, fp
 8007b5a:	f000 fbe7 	bl	800832c <__i2b>
 8007b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b60:	4604      	mov	r4, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 81c9 	beq.w	8007efa <_dtoa_r+0xb42>
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	4658      	mov	r0, fp
 8007b6e:	f000 fc9b 	bl	80084a8 <__pow5mult>
 8007b72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b74:	4604      	mov	r4, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	f300 808f 	bgt.w	8007c9a <_dtoa_r+0x8e2>
 8007b7c:	9b02      	ldr	r3, [sp, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f040 8087 	bne.w	8007c92 <_dtoa_r+0x8da>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 8083 	bne.w	8007c96 <_dtoa_r+0x8de>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b96:	0d1b      	lsrs	r3, r3, #20
 8007b98:	051b      	lsls	r3, r3, #20
 8007b9a:	b12b      	cbz	r3, 8007ba8 <_dtoa_r+0x7f0>
 8007b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9e:	f108 0801 	add.w	r8, r8, #1
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 81aa 	beq.w	8007f06 <_dtoa_r+0xb4e>
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bb8:	6918      	ldr	r0, [r3, #16]
 8007bba:	f000 fb6b 	bl	8008294 <__hi0bits>
 8007bbe:	f1c0 0020 	rsb	r0, r0, #32
 8007bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc4:	4418      	add	r0, r3
 8007bc6:	f010 001f 	ands.w	r0, r0, #31
 8007bca:	d071      	beq.n	8007cb0 <_dtoa_r+0x8f8>
 8007bcc:	f1c0 0320 	rsb	r3, r0, #32
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	dd65      	ble.n	8007ca0 <_dtoa_r+0x8e8>
 8007bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd6:	f1c0 001c 	rsb	r0, r0, #28
 8007bda:	4403      	add	r3, r0
 8007bdc:	4480      	add	r8, r0
 8007bde:	4406      	add	r6, r0
 8007be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be2:	f1b8 0f00 	cmp.w	r8, #0
 8007be6:	dd05      	ble.n	8007bf4 <_dtoa_r+0x83c>
 8007be8:	4649      	mov	r1, r9
 8007bea:	4642      	mov	r2, r8
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fcb5 	bl	800855c <__lshift>
 8007bf2:	4681      	mov	r9, r0
 8007bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dd05      	ble.n	8007c06 <_dtoa_r+0x84e>
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4658      	mov	r0, fp
 8007c00:	f000 fcac 	bl	800855c <__lshift>
 8007c04:	4604      	mov	r4, r0
 8007c06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d053      	beq.n	8007cb4 <_dtoa_r+0x8fc>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4648      	mov	r0, r9
 8007c10:	f000 fd10 	bl	8008634 <__mcmp>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	da4d      	bge.n	8007cb4 <_dtoa_r+0x8fc>
 8007c18:	1e7b      	subs	r3, r7, #1
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	220a      	movs	r2, #10
 8007c20:	2300      	movs	r3, #0
 8007c22:	4658      	mov	r0, fp
 8007c24:	f000 faf0 	bl	8008208 <__multadd>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c2a:	4681      	mov	r9, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 816c 	beq.w	8007f0a <_dtoa_r+0xb52>
 8007c32:	2300      	movs	r3, #0
 8007c34:	4629      	mov	r1, r5
 8007c36:	220a      	movs	r2, #10
 8007c38:	4658      	mov	r0, fp
 8007c3a:	f000 fae5 	bl	8008208 <__multadd>
 8007c3e:	9b08      	ldr	r3, [sp, #32]
 8007c40:	4605      	mov	r5, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc61      	bgt.n	8007d0a <_dtoa_r+0x952>
 8007c46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	dc3b      	bgt.n	8007cc4 <_dtoa_r+0x90c>
 8007c4c:	e05d      	b.n	8007d0a <_dtoa_r+0x952>
 8007c4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c54:	e746      	b.n	8007ae4 <_dtoa_r+0x72c>
 8007c56:	9b07      	ldr	r3, [sp, #28]
 8007c58:	1e5c      	subs	r4, r3, #1
 8007c5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	bfbf      	itttt	lt
 8007c60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007c64:	1ae3      	sublt	r3, r4, r3
 8007c66:	18d2      	addlt	r2, r2, r3
 8007c68:	bfa8      	it	ge
 8007c6a:	1b1c      	subge	r4, r3, r4
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	bfbe      	ittt	lt
 8007c70:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007c74:	2400      	movlt	r4, #0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfb5      	itete	lt
 8007c7a:	eba8 0603 	sublt.w	r6, r8, r3
 8007c7e:	4646      	movge	r6, r8
 8007c80:	2300      	movlt	r3, #0
 8007c82:	9b07      	ldrge	r3, [sp, #28]
 8007c84:	e730      	b.n	8007ae8 <_dtoa_r+0x730>
 8007c86:	4646      	mov	r6, r8
 8007c88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c8c:	e735      	b.n	8007afa <_dtoa_r+0x742>
 8007c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c90:	e75c      	b.n	8007b4c <_dtoa_r+0x794>
 8007c92:	2300      	movs	r3, #0
 8007c94:	e788      	b.n	8007ba8 <_dtoa_r+0x7f0>
 8007c96:	9b02      	ldr	r3, [sp, #8]
 8007c98:	e786      	b.n	8007ba8 <_dtoa_r+0x7f0>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c9e:	e788      	b.n	8007bb2 <_dtoa_r+0x7fa>
 8007ca0:	d09f      	beq.n	8007be2 <_dtoa_r+0x82a>
 8007ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca4:	331c      	adds	r3, #28
 8007ca6:	441a      	add	r2, r3
 8007ca8:	4498      	add	r8, r3
 8007caa:	441e      	add	r6, r3
 8007cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cae:	e798      	b.n	8007be2 <_dtoa_r+0x82a>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	e7f6      	b.n	8007ca2 <_dtoa_r+0x8ea>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	9704      	str	r7, [sp, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc20      	bgt.n	8007cfe <_dtoa_r+0x946>
 8007cbc:	9308      	str	r3, [sp, #32]
 8007cbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	dd1e      	ble.n	8007d02 <_dtoa_r+0x94a>
 8007cc4:	9b08      	ldr	r3, [sp, #32]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f47f aebc 	bne.w	8007a44 <_dtoa_r+0x68c>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	2205      	movs	r2, #5
 8007cd0:	4658      	mov	r0, fp
 8007cd2:	f000 fa99 	bl	8008208 <__multadd>
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4604      	mov	r4, r0
 8007cda:	4648      	mov	r0, r9
 8007cdc:	f000 fcaa 	bl	8008634 <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f77f aeaf 	ble.w	8007a44 <_dtoa_r+0x68c>
 8007ce6:	2331      	movs	r3, #49	@ 0x31
 8007ce8:	4656      	mov	r6, sl
 8007cea:	f806 3b01 	strb.w	r3, [r6], #1
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	e6aa      	b.n	8007a4c <_dtoa_r+0x694>
 8007cf6:	9c07      	ldr	r4, [sp, #28]
 8007cf8:	9704      	str	r7, [sp, #16]
 8007cfa:	4625      	mov	r5, r4
 8007cfc:	e7f3      	b.n	8007ce6 <_dtoa_r+0x92e>
 8007cfe:	9b07      	ldr	r3, [sp, #28]
 8007d00:	9308      	str	r3, [sp, #32]
 8007d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8104 	beq.w	8007f12 <_dtoa_r+0xb5a>
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	dd05      	ble.n	8007d1a <_dtoa_r+0x962>
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4632      	mov	r2, r6
 8007d12:	4658      	mov	r0, fp
 8007d14:	f000 fc22 	bl	800855c <__lshift>
 8007d18:	4605      	mov	r5, r0
 8007d1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d05a      	beq.n	8007dd6 <_dtoa_r+0xa1e>
 8007d20:	4658      	mov	r0, fp
 8007d22:	6869      	ldr	r1, [r5, #4]
 8007d24:	f000 fa0e 	bl	8008144 <_Balloc>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	b928      	cbnz	r0, 8007d38 <_dtoa_r+0x980>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d32:	4b83      	ldr	r3, [pc, #524]	@ (8007f40 <_dtoa_r+0xb88>)
 8007d34:	f7ff bb54 	b.w	80073e0 <_dtoa_r+0x28>
 8007d38:	692a      	ldr	r2, [r5, #16]
 8007d3a:	f105 010c 	add.w	r1, r5, #12
 8007d3e:	3202      	adds	r2, #2
 8007d40:	0092      	lsls	r2, r2, #2
 8007d42:	300c      	adds	r0, #12
 8007d44:	f001 f80a 	bl	8008d5c <memcpy>
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4658      	mov	r0, fp
 8007d4e:	f000 fc05 	bl	800855c <__lshift>
 8007d52:	462f      	mov	r7, r5
 8007d54:	4605      	mov	r5, r0
 8007d56:	f10a 0301 	add.w	r3, sl, #1
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	4453      	add	r3, sl
 8007d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d62:	9b02      	ldr	r3, [sp, #8]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d6a:	9b07      	ldr	r3, [sp, #28]
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	4648      	mov	r0, r9
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	f7ff fa95 	bl	80072a2 <quorem>
 8007d78:	4639      	mov	r1, r7
 8007d7a:	9008      	str	r0, [sp, #32]
 8007d7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d80:	4648      	mov	r0, r9
 8007d82:	f000 fc57 	bl	8008634 <__mcmp>
 8007d86:	462a      	mov	r2, r5
 8007d88:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f000 fc6d 	bl	800866c <__mdiff>
 8007d92:	68c2      	ldr	r2, [r0, #12]
 8007d94:	4606      	mov	r6, r0
 8007d96:	bb02      	cbnz	r2, 8007dda <_dtoa_r+0xa22>
 8007d98:	4601      	mov	r1, r0
 8007d9a:	4648      	mov	r0, r9
 8007d9c:	f000 fc4a 	bl	8008634 <__mcmp>
 8007da0:	4602      	mov	r2, r0
 8007da2:	4631      	mov	r1, r6
 8007da4:	4658      	mov	r0, fp
 8007da6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007da8:	f000 fa0c 	bl	80081c4 <_Bfree>
 8007dac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007dae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007db0:	9e07      	ldr	r6, [sp, #28]
 8007db2:	ea43 0102 	orr.w	r1, r3, r2
 8007db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db8:	4319      	orrs	r1, r3
 8007dba:	d110      	bne.n	8007dde <_dtoa_r+0xa26>
 8007dbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dc0:	d029      	beq.n	8007e16 <_dtoa_r+0xa5e>
 8007dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	dd02      	ble.n	8007dce <_dtoa_r+0xa16>
 8007dc8:	9b08      	ldr	r3, [sp, #32]
 8007dca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007dce:	9b02      	ldr	r3, [sp, #8]
 8007dd0:	f883 8000 	strb.w	r8, [r3]
 8007dd4:	e63b      	b.n	8007a4e <_dtoa_r+0x696>
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	e7bb      	b.n	8007d52 <_dtoa_r+0x99a>
 8007dda:	2201      	movs	r2, #1
 8007ddc:	e7e1      	b.n	8007da2 <_dtoa_r+0x9ea>
 8007dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db04      	blt.n	8007dee <_dtoa_r+0xa36>
 8007de4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007de6:	430b      	orrs	r3, r1
 8007de8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dea:	430b      	orrs	r3, r1
 8007dec:	d120      	bne.n	8007e30 <_dtoa_r+0xa78>
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	dded      	ble.n	8007dce <_dtoa_r+0xa16>
 8007df2:	4649      	mov	r1, r9
 8007df4:	2201      	movs	r2, #1
 8007df6:	4658      	mov	r0, fp
 8007df8:	f000 fbb0 	bl	800855c <__lshift>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4681      	mov	r9, r0
 8007e00:	f000 fc18 	bl	8008634 <__mcmp>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	dc03      	bgt.n	8007e10 <_dtoa_r+0xa58>
 8007e08:	d1e1      	bne.n	8007dce <_dtoa_r+0xa16>
 8007e0a:	f018 0f01 	tst.w	r8, #1
 8007e0e:	d0de      	beq.n	8007dce <_dtoa_r+0xa16>
 8007e10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e14:	d1d8      	bne.n	8007dc8 <_dtoa_r+0xa10>
 8007e16:	2339      	movs	r3, #57	@ 0x39
 8007e18:	9a02      	ldr	r2, [sp, #8]
 8007e1a:	7013      	strb	r3, [r2, #0]
 8007e1c:	4633      	mov	r3, r6
 8007e1e:	461e      	mov	r6, r3
 8007e20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	2a39      	cmp	r2, #57	@ 0x39
 8007e28:	d052      	beq.n	8007ed0 <_dtoa_r+0xb18>
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	e60e      	b.n	8007a4e <_dtoa_r+0x696>
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	dd07      	ble.n	8007e44 <_dtoa_r+0xa8c>
 8007e34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e38:	d0ed      	beq.n	8007e16 <_dtoa_r+0xa5e>
 8007e3a:	9a02      	ldr	r2, [sp, #8]
 8007e3c:	f108 0301 	add.w	r3, r8, #1
 8007e40:	7013      	strb	r3, [r2, #0]
 8007e42:	e604      	b.n	8007a4e <_dtoa_r+0x696>
 8007e44:	9b07      	ldr	r3, [sp, #28]
 8007e46:	9a07      	ldr	r2, [sp, #28]
 8007e48:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d028      	beq.n	8007ea4 <_dtoa_r+0xaec>
 8007e52:	4649      	mov	r1, r9
 8007e54:	2300      	movs	r3, #0
 8007e56:	220a      	movs	r2, #10
 8007e58:	4658      	mov	r0, fp
 8007e5a:	f000 f9d5 	bl	8008208 <__multadd>
 8007e5e:	42af      	cmp	r7, r5
 8007e60:	4681      	mov	r9, r0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	f04f 020a 	mov.w	r2, #10
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	d107      	bne.n	8007e80 <_dtoa_r+0xac8>
 8007e70:	f000 f9ca 	bl	8008208 <__multadd>
 8007e74:	4607      	mov	r7, r0
 8007e76:	4605      	mov	r5, r0
 8007e78:	9b07      	ldr	r3, [sp, #28]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	9307      	str	r3, [sp, #28]
 8007e7e:	e774      	b.n	8007d6a <_dtoa_r+0x9b2>
 8007e80:	f000 f9c2 	bl	8008208 <__multadd>
 8007e84:	4629      	mov	r1, r5
 8007e86:	4607      	mov	r7, r0
 8007e88:	2300      	movs	r3, #0
 8007e8a:	220a      	movs	r2, #10
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f000 f9bb 	bl	8008208 <__multadd>
 8007e92:	4605      	mov	r5, r0
 8007e94:	e7f0      	b.n	8007e78 <_dtoa_r+0xac0>
 8007e96:	9b08      	ldr	r3, [sp, #32]
 8007e98:	2700      	movs	r7, #0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfcc      	ite	gt
 8007e9e:	461e      	movgt	r6, r3
 8007ea0:	2601      	movle	r6, #1
 8007ea2:	4456      	add	r6, sl
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4658      	mov	r0, fp
 8007eaa:	f000 fb57 	bl	800855c <__lshift>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4681      	mov	r9, r0
 8007eb2:	f000 fbbf 	bl	8008634 <__mcmp>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	dcb0      	bgt.n	8007e1c <_dtoa_r+0xa64>
 8007eba:	d102      	bne.n	8007ec2 <_dtoa_r+0xb0a>
 8007ebc:	f018 0f01 	tst.w	r8, #1
 8007ec0:	d1ac      	bne.n	8007e1c <_dtoa_r+0xa64>
 8007ec2:	4633      	mov	r3, r6
 8007ec4:	461e      	mov	r6, r3
 8007ec6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eca:	2a30      	cmp	r2, #48	@ 0x30
 8007ecc:	d0fa      	beq.n	8007ec4 <_dtoa_r+0xb0c>
 8007ece:	e5be      	b.n	8007a4e <_dtoa_r+0x696>
 8007ed0:	459a      	cmp	sl, r3
 8007ed2:	d1a4      	bne.n	8007e1e <_dtoa_r+0xa66>
 8007ed4:	9b04      	ldr	r3, [sp, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	2331      	movs	r3, #49	@ 0x31
 8007edc:	f88a 3000 	strb.w	r3, [sl]
 8007ee0:	e5b5      	b.n	8007a4e <_dtoa_r+0x696>
 8007ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ee4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f44 <_dtoa_r+0xb8c>
 8007ee8:	b11b      	cbz	r3, 8007ef2 <_dtoa_r+0xb3a>
 8007eea:	f10a 0308 	add.w	r3, sl, #8
 8007eee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	b017      	add	sp, #92	@ 0x5c
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	f77f ae3d 	ble.w	8007b7c <_dtoa_r+0x7c4>
 8007f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f06:	2001      	movs	r0, #1
 8007f08:	e65b      	b.n	8007bc2 <_dtoa_r+0x80a>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f77f aed6 	ble.w	8007cbe <_dtoa_r+0x906>
 8007f12:	4656      	mov	r6, sl
 8007f14:	4621      	mov	r1, r4
 8007f16:	4648      	mov	r0, r9
 8007f18:	f7ff f9c3 	bl	80072a2 <quorem>
 8007f1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	f806 8b01 	strb.w	r8, [r6], #1
 8007f26:	eba6 020a 	sub.w	r2, r6, sl
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	ddb3      	ble.n	8007e96 <_dtoa_r+0xade>
 8007f2e:	4649      	mov	r1, r9
 8007f30:	2300      	movs	r3, #0
 8007f32:	220a      	movs	r2, #10
 8007f34:	4658      	mov	r0, fp
 8007f36:	f000 f967 	bl	8008208 <__multadd>
 8007f3a:	4681      	mov	r9, r0
 8007f3c:	e7ea      	b.n	8007f14 <_dtoa_r+0xb5c>
 8007f3e:	bf00      	nop
 8007f40:	0800a27a 	.word	0x0800a27a
 8007f44:	0800a1fe 	.word	0x0800a1fe

08007f48 <_free_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	d040      	beq.n	8007fd2 <_free_r+0x8a>
 8007f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f54:	1f0c      	subs	r4, r1, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfb8      	it	lt
 8007f5a:	18e4      	addlt	r4, r4, r3
 8007f5c:	f000 f8e6 	bl	800812c <__malloc_lock>
 8007f60:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd4 <_free_r+0x8c>)
 8007f62:	6813      	ldr	r3, [r2, #0]
 8007f64:	b933      	cbnz	r3, 8007f74 <_free_r+0x2c>
 8007f66:	6063      	str	r3, [r4, #4]
 8007f68:	6014      	str	r4, [r2, #0]
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f70:	f000 b8e2 	b.w	8008138 <__malloc_unlock>
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d908      	bls.n	8007f8a <_free_r+0x42>
 8007f78:	6820      	ldr	r0, [r4, #0]
 8007f7a:	1821      	adds	r1, r4, r0
 8007f7c:	428b      	cmp	r3, r1
 8007f7e:	bf01      	itttt	eq
 8007f80:	6819      	ldreq	r1, [r3, #0]
 8007f82:	685b      	ldreq	r3, [r3, #4]
 8007f84:	1809      	addeq	r1, r1, r0
 8007f86:	6021      	streq	r1, [r4, #0]
 8007f88:	e7ed      	b.n	8007f66 <_free_r+0x1e>
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	b10b      	cbz	r3, 8007f94 <_free_r+0x4c>
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d9fa      	bls.n	8007f8a <_free_r+0x42>
 8007f94:	6811      	ldr	r1, [r2, #0]
 8007f96:	1850      	adds	r0, r2, r1
 8007f98:	42a0      	cmp	r0, r4
 8007f9a:	d10b      	bne.n	8007fb4 <_free_r+0x6c>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	4401      	add	r1, r0
 8007fa0:	1850      	adds	r0, r2, r1
 8007fa2:	4283      	cmp	r3, r0
 8007fa4:	6011      	str	r1, [r2, #0]
 8007fa6:	d1e0      	bne.n	8007f6a <_free_r+0x22>
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	4408      	add	r0, r1
 8007fae:	6010      	str	r0, [r2, #0]
 8007fb0:	6053      	str	r3, [r2, #4]
 8007fb2:	e7da      	b.n	8007f6a <_free_r+0x22>
 8007fb4:	d902      	bls.n	8007fbc <_free_r+0x74>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	e7d6      	b.n	8007f6a <_free_r+0x22>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	1821      	adds	r1, r4, r0
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	bf01      	itttt	eq
 8007fc4:	6819      	ldreq	r1, [r3, #0]
 8007fc6:	685b      	ldreq	r3, [r3, #4]
 8007fc8:	1809      	addeq	r1, r1, r0
 8007fca:	6021      	streq	r1, [r4, #0]
 8007fcc:	6063      	str	r3, [r4, #4]
 8007fce:	6054      	str	r4, [r2, #4]
 8007fd0:	e7cb      	b.n	8007f6a <_free_r+0x22>
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	200009b0 	.word	0x200009b0

08007fd8 <malloc>:
 8007fd8:	4b02      	ldr	r3, [pc, #8]	@ (8007fe4 <malloc+0xc>)
 8007fda:	4601      	mov	r1, r0
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	f000 b825 	b.w	800802c <_malloc_r>
 8007fe2:	bf00      	nop
 8007fe4:	20000048 	.word	0x20000048

08007fe8 <sbrk_aligned>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4e0f      	ldr	r6, [pc, #60]	@ (8008028 <sbrk_aligned+0x40>)
 8007fec:	460c      	mov	r4, r1
 8007fee:	6831      	ldr	r1, [r6, #0]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	b911      	cbnz	r1, 8007ffa <sbrk_aligned+0x12>
 8007ff4:	f000 fea2 	bl	8008d3c <_sbrk_r>
 8007ff8:	6030      	str	r0, [r6, #0]
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 fe9d 	bl	8008d3c <_sbrk_r>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	d103      	bne.n	800800e <sbrk_aligned+0x26>
 8008006:	f04f 34ff 	mov.w	r4, #4294967295
 800800a:	4620      	mov	r0, r4
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	1cc4      	adds	r4, r0, #3
 8008010:	f024 0403 	bic.w	r4, r4, #3
 8008014:	42a0      	cmp	r0, r4
 8008016:	d0f8      	beq.n	800800a <sbrk_aligned+0x22>
 8008018:	1a21      	subs	r1, r4, r0
 800801a:	4628      	mov	r0, r5
 800801c:	f000 fe8e 	bl	8008d3c <_sbrk_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d1f2      	bne.n	800800a <sbrk_aligned+0x22>
 8008024:	e7ef      	b.n	8008006 <sbrk_aligned+0x1e>
 8008026:	bf00      	nop
 8008028:	200009ac 	.word	0x200009ac

0800802c <_malloc_r>:
 800802c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008030:	1ccd      	adds	r5, r1, #3
 8008032:	f025 0503 	bic.w	r5, r5, #3
 8008036:	3508      	adds	r5, #8
 8008038:	2d0c      	cmp	r5, #12
 800803a:	bf38      	it	cc
 800803c:	250c      	movcc	r5, #12
 800803e:	2d00      	cmp	r5, #0
 8008040:	4606      	mov	r6, r0
 8008042:	db01      	blt.n	8008048 <_malloc_r+0x1c>
 8008044:	42a9      	cmp	r1, r5
 8008046:	d904      	bls.n	8008052 <_malloc_r+0x26>
 8008048:	230c      	movs	r3, #12
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	2000      	movs	r0, #0
 800804e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008128 <_malloc_r+0xfc>
 8008056:	f000 f869 	bl	800812c <__malloc_lock>
 800805a:	f8d8 3000 	ldr.w	r3, [r8]
 800805e:	461c      	mov	r4, r3
 8008060:	bb44      	cbnz	r4, 80080b4 <_malloc_r+0x88>
 8008062:	4629      	mov	r1, r5
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff ffbf 	bl	8007fe8 <sbrk_aligned>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	4604      	mov	r4, r0
 800806e:	d158      	bne.n	8008122 <_malloc_r+0xf6>
 8008070:	f8d8 4000 	ldr.w	r4, [r8]
 8008074:	4627      	mov	r7, r4
 8008076:	2f00      	cmp	r7, #0
 8008078:	d143      	bne.n	8008102 <_malloc_r+0xd6>
 800807a:	2c00      	cmp	r4, #0
 800807c:	d04b      	beq.n	8008116 <_malloc_r+0xea>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	4639      	mov	r1, r7
 8008082:	4630      	mov	r0, r6
 8008084:	eb04 0903 	add.w	r9, r4, r3
 8008088:	f000 fe58 	bl	8008d3c <_sbrk_r>
 800808c:	4581      	cmp	r9, r0
 800808e:	d142      	bne.n	8008116 <_malloc_r+0xea>
 8008090:	6821      	ldr	r1, [r4, #0]
 8008092:	4630      	mov	r0, r6
 8008094:	1a6d      	subs	r5, r5, r1
 8008096:	4629      	mov	r1, r5
 8008098:	f7ff ffa6 	bl	8007fe8 <sbrk_aligned>
 800809c:	3001      	adds	r0, #1
 800809e:	d03a      	beq.n	8008116 <_malloc_r+0xea>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	442b      	add	r3, r5
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	f8d8 3000 	ldr.w	r3, [r8]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	bb62      	cbnz	r2, 8008108 <_malloc_r+0xdc>
 80080ae:	f8c8 7000 	str.w	r7, [r8]
 80080b2:	e00f      	b.n	80080d4 <_malloc_r+0xa8>
 80080b4:	6822      	ldr	r2, [r4, #0]
 80080b6:	1b52      	subs	r2, r2, r5
 80080b8:	d420      	bmi.n	80080fc <_malloc_r+0xd0>
 80080ba:	2a0b      	cmp	r2, #11
 80080bc:	d917      	bls.n	80080ee <_malloc_r+0xc2>
 80080be:	1961      	adds	r1, r4, r5
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	6025      	str	r5, [r4, #0]
 80080c4:	bf18      	it	ne
 80080c6:	6059      	strne	r1, [r3, #4]
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	bf08      	it	eq
 80080cc:	f8c8 1000 	streq.w	r1, [r8]
 80080d0:	5162      	str	r2, [r4, r5]
 80080d2:	604b      	str	r3, [r1, #4]
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 f82f 	bl	8008138 <__malloc_unlock>
 80080da:	f104 000b 	add.w	r0, r4, #11
 80080de:	1d23      	adds	r3, r4, #4
 80080e0:	f020 0007 	bic.w	r0, r0, #7
 80080e4:	1ac2      	subs	r2, r0, r3
 80080e6:	bf1c      	itt	ne
 80080e8:	1a1b      	subne	r3, r3, r0
 80080ea:	50a3      	strne	r3, [r4, r2]
 80080ec:	e7af      	b.n	800804e <_malloc_r+0x22>
 80080ee:	6862      	ldr	r2, [r4, #4]
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	bf0c      	ite	eq
 80080f4:	f8c8 2000 	streq.w	r2, [r8]
 80080f8:	605a      	strne	r2, [r3, #4]
 80080fa:	e7eb      	b.n	80080d4 <_malloc_r+0xa8>
 80080fc:	4623      	mov	r3, r4
 80080fe:	6864      	ldr	r4, [r4, #4]
 8008100:	e7ae      	b.n	8008060 <_malloc_r+0x34>
 8008102:	463c      	mov	r4, r7
 8008104:	687f      	ldr	r7, [r7, #4]
 8008106:	e7b6      	b.n	8008076 <_malloc_r+0x4a>
 8008108:	461a      	mov	r2, r3
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	42a3      	cmp	r3, r4
 800810e:	d1fb      	bne.n	8008108 <_malloc_r+0xdc>
 8008110:	2300      	movs	r3, #0
 8008112:	6053      	str	r3, [r2, #4]
 8008114:	e7de      	b.n	80080d4 <_malloc_r+0xa8>
 8008116:	230c      	movs	r3, #12
 8008118:	4630      	mov	r0, r6
 800811a:	6033      	str	r3, [r6, #0]
 800811c:	f000 f80c 	bl	8008138 <__malloc_unlock>
 8008120:	e794      	b.n	800804c <_malloc_r+0x20>
 8008122:	6005      	str	r5, [r0, #0]
 8008124:	e7d6      	b.n	80080d4 <_malloc_r+0xa8>
 8008126:	bf00      	nop
 8008128:	200009b0 	.word	0x200009b0

0800812c <__malloc_lock>:
 800812c:	4801      	ldr	r0, [pc, #4]	@ (8008134 <__malloc_lock+0x8>)
 800812e:	f7ff b8a8 	b.w	8007282 <__retarget_lock_acquire_recursive>
 8008132:	bf00      	nop
 8008134:	200009a8 	.word	0x200009a8

08008138 <__malloc_unlock>:
 8008138:	4801      	ldr	r0, [pc, #4]	@ (8008140 <__malloc_unlock+0x8>)
 800813a:	f7ff b8a3 	b.w	8007284 <__retarget_lock_release_recursive>
 800813e:	bf00      	nop
 8008140:	200009a8 	.word	0x200009a8

08008144 <_Balloc>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	69c6      	ldr	r6, [r0, #28]
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	b976      	cbnz	r6, 800816c <_Balloc+0x28>
 800814e:	2010      	movs	r0, #16
 8008150:	f7ff ff42 	bl	8007fd8 <malloc>
 8008154:	4602      	mov	r2, r0
 8008156:	61e0      	str	r0, [r4, #28]
 8008158:	b920      	cbnz	r0, 8008164 <_Balloc+0x20>
 800815a:	216b      	movs	r1, #107	@ 0x6b
 800815c:	4b17      	ldr	r3, [pc, #92]	@ (80081bc <_Balloc+0x78>)
 800815e:	4818      	ldr	r0, [pc, #96]	@ (80081c0 <_Balloc+0x7c>)
 8008160:	f000 fe0a 	bl	8008d78 <__assert_func>
 8008164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008168:	6006      	str	r6, [r0, #0]
 800816a:	60c6      	str	r6, [r0, #12]
 800816c:	69e6      	ldr	r6, [r4, #28]
 800816e:	68f3      	ldr	r3, [r6, #12]
 8008170:	b183      	cbz	r3, 8008194 <_Balloc+0x50>
 8008172:	69e3      	ldr	r3, [r4, #28]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800817a:	b9b8      	cbnz	r0, 80081ac <_Balloc+0x68>
 800817c:	2101      	movs	r1, #1
 800817e:	fa01 f605 	lsl.w	r6, r1, r5
 8008182:	1d72      	adds	r2, r6, #5
 8008184:	4620      	mov	r0, r4
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	f000 fe14 	bl	8008db4 <_calloc_r>
 800818c:	b160      	cbz	r0, 80081a8 <_Balloc+0x64>
 800818e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008192:	e00e      	b.n	80081b2 <_Balloc+0x6e>
 8008194:	2221      	movs	r2, #33	@ 0x21
 8008196:	2104      	movs	r1, #4
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fe0b 	bl	8008db4 <_calloc_r>
 800819e:	69e3      	ldr	r3, [r4, #28]
 80081a0:	60f0      	str	r0, [r6, #12]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e4      	bne.n	8008172 <_Balloc+0x2e>
 80081a8:	2000      	movs	r0, #0
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	6802      	ldr	r2, [r0, #0]
 80081ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081b2:	2300      	movs	r3, #0
 80081b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081b8:	e7f7      	b.n	80081aa <_Balloc+0x66>
 80081ba:	bf00      	nop
 80081bc:	0800a20b 	.word	0x0800a20b
 80081c0:	0800a28b 	.word	0x0800a28b

080081c4 <_Bfree>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	69c6      	ldr	r6, [r0, #28]
 80081c8:	4605      	mov	r5, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	b976      	cbnz	r6, 80081ec <_Bfree+0x28>
 80081ce:	2010      	movs	r0, #16
 80081d0:	f7ff ff02 	bl	8007fd8 <malloc>
 80081d4:	4602      	mov	r2, r0
 80081d6:	61e8      	str	r0, [r5, #28]
 80081d8:	b920      	cbnz	r0, 80081e4 <_Bfree+0x20>
 80081da:	218f      	movs	r1, #143	@ 0x8f
 80081dc:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <_Bfree+0x3c>)
 80081de:	4809      	ldr	r0, [pc, #36]	@ (8008204 <_Bfree+0x40>)
 80081e0:	f000 fdca 	bl	8008d78 <__assert_func>
 80081e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e8:	6006      	str	r6, [r0, #0]
 80081ea:	60c6      	str	r6, [r0, #12]
 80081ec:	b13c      	cbz	r4, 80081fe <_Bfree+0x3a>
 80081ee:	69eb      	ldr	r3, [r5, #28]
 80081f0:	6862      	ldr	r2, [r4, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f8:	6021      	str	r1, [r4, #0]
 80081fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	0800a20b 	.word	0x0800a20b
 8008204:	0800a28b 	.word	0x0800a28b

08008208 <__multadd>:
 8008208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820c:	4607      	mov	r7, r0
 800820e:	460c      	mov	r4, r1
 8008210:	461e      	mov	r6, r3
 8008212:	2000      	movs	r0, #0
 8008214:	690d      	ldr	r5, [r1, #16]
 8008216:	f101 0c14 	add.w	ip, r1, #20
 800821a:	f8dc 3000 	ldr.w	r3, [ip]
 800821e:	3001      	adds	r0, #1
 8008220:	b299      	uxth	r1, r3
 8008222:	fb02 6101 	mla	r1, r2, r1, r6
 8008226:	0c1e      	lsrs	r6, r3, #16
 8008228:	0c0b      	lsrs	r3, r1, #16
 800822a:	fb02 3306 	mla	r3, r2, r6, r3
 800822e:	b289      	uxth	r1, r1
 8008230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008234:	4285      	cmp	r5, r0
 8008236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800823a:	f84c 1b04 	str.w	r1, [ip], #4
 800823e:	dcec      	bgt.n	800821a <__multadd+0x12>
 8008240:	b30e      	cbz	r6, 8008286 <__multadd+0x7e>
 8008242:	68a3      	ldr	r3, [r4, #8]
 8008244:	42ab      	cmp	r3, r5
 8008246:	dc19      	bgt.n	800827c <__multadd+0x74>
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	4638      	mov	r0, r7
 800824c:	3101      	adds	r1, #1
 800824e:	f7ff ff79 	bl	8008144 <_Balloc>
 8008252:	4680      	mov	r8, r0
 8008254:	b928      	cbnz	r0, 8008262 <__multadd+0x5a>
 8008256:	4602      	mov	r2, r0
 8008258:	21ba      	movs	r1, #186	@ 0xba
 800825a:	4b0c      	ldr	r3, [pc, #48]	@ (800828c <__multadd+0x84>)
 800825c:	480c      	ldr	r0, [pc, #48]	@ (8008290 <__multadd+0x88>)
 800825e:	f000 fd8b 	bl	8008d78 <__assert_func>
 8008262:	6922      	ldr	r2, [r4, #16]
 8008264:	f104 010c 	add.w	r1, r4, #12
 8008268:	3202      	adds	r2, #2
 800826a:	0092      	lsls	r2, r2, #2
 800826c:	300c      	adds	r0, #12
 800826e:	f000 fd75 	bl	8008d5c <memcpy>
 8008272:	4621      	mov	r1, r4
 8008274:	4638      	mov	r0, r7
 8008276:	f7ff ffa5 	bl	80081c4 <_Bfree>
 800827a:	4644      	mov	r4, r8
 800827c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008280:	3501      	adds	r5, #1
 8008282:	615e      	str	r6, [r3, #20]
 8008284:	6125      	str	r5, [r4, #16]
 8008286:	4620      	mov	r0, r4
 8008288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828c:	0800a27a 	.word	0x0800a27a
 8008290:	0800a28b 	.word	0x0800a28b

08008294 <__hi0bits>:
 8008294:	4603      	mov	r3, r0
 8008296:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800829a:	bf3a      	itte	cc
 800829c:	0403      	lslcc	r3, r0, #16
 800829e:	2010      	movcc	r0, #16
 80082a0:	2000      	movcs	r0, #0
 80082a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a6:	bf3c      	itt	cc
 80082a8:	021b      	lslcc	r3, r3, #8
 80082aa:	3008      	addcc	r0, #8
 80082ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082b0:	bf3c      	itt	cc
 80082b2:	011b      	lslcc	r3, r3, #4
 80082b4:	3004      	addcc	r0, #4
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ba:	bf3c      	itt	cc
 80082bc:	009b      	lslcc	r3, r3, #2
 80082be:	3002      	addcc	r0, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db05      	blt.n	80082d0 <__hi0bits+0x3c>
 80082c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082c8:	f100 0001 	add.w	r0, r0, #1
 80082cc:	bf08      	it	eq
 80082ce:	2020      	moveq	r0, #32
 80082d0:	4770      	bx	lr

080082d2 <__lo0bits>:
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	4602      	mov	r2, r0
 80082d6:	f013 0007 	ands.w	r0, r3, #7
 80082da:	d00b      	beq.n	80082f4 <__lo0bits+0x22>
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d421      	bmi.n	8008324 <__lo0bits+0x52>
 80082e0:	0798      	lsls	r0, r3, #30
 80082e2:	bf49      	itett	mi
 80082e4:	085b      	lsrmi	r3, r3, #1
 80082e6:	089b      	lsrpl	r3, r3, #2
 80082e8:	2001      	movmi	r0, #1
 80082ea:	6013      	strmi	r3, [r2, #0]
 80082ec:	bf5c      	itt	pl
 80082ee:	2002      	movpl	r0, #2
 80082f0:	6013      	strpl	r3, [r2, #0]
 80082f2:	4770      	bx	lr
 80082f4:	b299      	uxth	r1, r3
 80082f6:	b909      	cbnz	r1, 80082fc <__lo0bits+0x2a>
 80082f8:	2010      	movs	r0, #16
 80082fa:	0c1b      	lsrs	r3, r3, #16
 80082fc:	b2d9      	uxtb	r1, r3
 80082fe:	b909      	cbnz	r1, 8008304 <__lo0bits+0x32>
 8008300:	3008      	adds	r0, #8
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	0719      	lsls	r1, r3, #28
 8008306:	bf04      	itt	eq
 8008308:	091b      	lsreq	r3, r3, #4
 800830a:	3004      	addeq	r0, #4
 800830c:	0799      	lsls	r1, r3, #30
 800830e:	bf04      	itt	eq
 8008310:	089b      	lsreq	r3, r3, #2
 8008312:	3002      	addeq	r0, #2
 8008314:	07d9      	lsls	r1, r3, #31
 8008316:	d403      	bmi.n	8008320 <__lo0bits+0x4e>
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	f100 0001 	add.w	r0, r0, #1
 800831e:	d003      	beq.n	8008328 <__lo0bits+0x56>
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	4770      	bx	lr
 8008324:	2000      	movs	r0, #0
 8008326:	4770      	bx	lr
 8008328:	2020      	movs	r0, #32
 800832a:	4770      	bx	lr

0800832c <__i2b>:
 800832c:	b510      	push	{r4, lr}
 800832e:	460c      	mov	r4, r1
 8008330:	2101      	movs	r1, #1
 8008332:	f7ff ff07 	bl	8008144 <_Balloc>
 8008336:	4602      	mov	r2, r0
 8008338:	b928      	cbnz	r0, 8008346 <__i2b+0x1a>
 800833a:	f240 1145 	movw	r1, #325	@ 0x145
 800833e:	4b04      	ldr	r3, [pc, #16]	@ (8008350 <__i2b+0x24>)
 8008340:	4804      	ldr	r0, [pc, #16]	@ (8008354 <__i2b+0x28>)
 8008342:	f000 fd19 	bl	8008d78 <__assert_func>
 8008346:	2301      	movs	r3, #1
 8008348:	6144      	str	r4, [r0, #20]
 800834a:	6103      	str	r3, [r0, #16]
 800834c:	bd10      	pop	{r4, pc}
 800834e:	bf00      	nop
 8008350:	0800a27a 	.word	0x0800a27a
 8008354:	0800a28b 	.word	0x0800a28b

08008358 <__multiply>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	4614      	mov	r4, r2
 800835e:	690a      	ldr	r2, [r1, #16]
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	460f      	mov	r7, r1
 8008364:	429a      	cmp	r2, r3
 8008366:	bfa2      	ittt	ge
 8008368:	4623      	movge	r3, r4
 800836a:	460c      	movge	r4, r1
 800836c:	461f      	movge	r7, r3
 800836e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008372:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	6861      	ldr	r1, [r4, #4]
 800837a:	eb0a 0609 	add.w	r6, sl, r9
 800837e:	42b3      	cmp	r3, r6
 8008380:	b085      	sub	sp, #20
 8008382:	bfb8      	it	lt
 8008384:	3101      	addlt	r1, #1
 8008386:	f7ff fedd 	bl	8008144 <_Balloc>
 800838a:	b930      	cbnz	r0, 800839a <__multiply+0x42>
 800838c:	4602      	mov	r2, r0
 800838e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008392:	4b43      	ldr	r3, [pc, #268]	@ (80084a0 <__multiply+0x148>)
 8008394:	4843      	ldr	r0, [pc, #268]	@ (80084a4 <__multiply+0x14c>)
 8008396:	f000 fcef 	bl	8008d78 <__assert_func>
 800839a:	f100 0514 	add.w	r5, r0, #20
 800839e:	462b      	mov	r3, r5
 80083a0:	2200      	movs	r2, #0
 80083a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083a6:	4543      	cmp	r3, r8
 80083a8:	d321      	bcc.n	80083ee <__multiply+0x96>
 80083aa:	f107 0114 	add.w	r1, r7, #20
 80083ae:	f104 0214 	add.w	r2, r4, #20
 80083b2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083b6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083ba:	9302      	str	r3, [sp, #8]
 80083bc:	1b13      	subs	r3, r2, r4
 80083be:	3b15      	subs	r3, #21
 80083c0:	f023 0303 	bic.w	r3, r3, #3
 80083c4:	3304      	adds	r3, #4
 80083c6:	f104 0715 	add.w	r7, r4, #21
 80083ca:	42ba      	cmp	r2, r7
 80083cc:	bf38      	it	cc
 80083ce:	2304      	movcc	r3, #4
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	9103      	str	r1, [sp, #12]
 80083d6:	428b      	cmp	r3, r1
 80083d8:	d80c      	bhi.n	80083f4 <__multiply+0x9c>
 80083da:	2e00      	cmp	r6, #0
 80083dc:	dd03      	ble.n	80083e6 <__multiply+0x8e>
 80083de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d05a      	beq.n	800849c <__multiply+0x144>
 80083e6:	6106      	str	r6, [r0, #16]
 80083e8:	b005      	add	sp, #20
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	f843 2b04 	str.w	r2, [r3], #4
 80083f2:	e7d8      	b.n	80083a6 <__multiply+0x4e>
 80083f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80083f8:	f1ba 0f00 	cmp.w	sl, #0
 80083fc:	d023      	beq.n	8008446 <__multiply+0xee>
 80083fe:	46a9      	mov	r9, r5
 8008400:	f04f 0c00 	mov.w	ip, #0
 8008404:	f104 0e14 	add.w	lr, r4, #20
 8008408:	f85e 7b04 	ldr.w	r7, [lr], #4
 800840c:	f8d9 3000 	ldr.w	r3, [r9]
 8008410:	fa1f fb87 	uxth.w	fp, r7
 8008414:	b29b      	uxth	r3, r3
 8008416:	fb0a 330b 	mla	r3, sl, fp, r3
 800841a:	4463      	add	r3, ip
 800841c:	f8d9 c000 	ldr.w	ip, [r9]
 8008420:	0c3f      	lsrs	r7, r7, #16
 8008422:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008426:	fb0a c707 	mla	r7, sl, r7, ip
 800842a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800842e:	b29b      	uxth	r3, r3
 8008430:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008434:	4572      	cmp	r2, lr
 8008436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800843a:	f849 3b04 	str.w	r3, [r9], #4
 800843e:	d8e3      	bhi.n	8008408 <__multiply+0xb0>
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	f845 c003 	str.w	ip, [r5, r3]
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	3104      	adds	r1, #4
 800844a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800844e:	f1b9 0f00 	cmp.w	r9, #0
 8008452:	d021      	beq.n	8008498 <__multiply+0x140>
 8008454:	46ae      	mov	lr, r5
 8008456:	f04f 0a00 	mov.w	sl, #0
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	f104 0c14 	add.w	ip, r4, #20
 8008460:	f8bc b000 	ldrh.w	fp, [ip]
 8008464:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008468:	b29b      	uxth	r3, r3
 800846a:	fb09 770b 	mla	r7, r9, fp, r7
 800846e:	4457      	add	r7, sl
 8008470:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008474:	f84e 3b04 	str.w	r3, [lr], #4
 8008478:	f85c 3b04 	ldr.w	r3, [ip], #4
 800847c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008480:	f8be 3000 	ldrh.w	r3, [lr]
 8008484:	4562      	cmp	r2, ip
 8008486:	fb09 330a 	mla	r3, r9, sl, r3
 800848a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800848e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008492:	d8e5      	bhi.n	8008460 <__multiply+0x108>
 8008494:	9f01      	ldr	r7, [sp, #4]
 8008496:	51eb      	str	r3, [r5, r7]
 8008498:	3504      	adds	r5, #4
 800849a:	e79a      	b.n	80083d2 <__multiply+0x7a>
 800849c:	3e01      	subs	r6, #1
 800849e:	e79c      	b.n	80083da <__multiply+0x82>
 80084a0:	0800a27a 	.word	0x0800a27a
 80084a4:	0800a28b 	.word	0x0800a28b

080084a8 <__pow5mult>:
 80084a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	4615      	mov	r5, r2
 80084ae:	f012 0203 	ands.w	r2, r2, #3
 80084b2:	4607      	mov	r7, r0
 80084b4:	460e      	mov	r6, r1
 80084b6:	d007      	beq.n	80084c8 <__pow5mult+0x20>
 80084b8:	4c25      	ldr	r4, [pc, #148]	@ (8008550 <__pow5mult+0xa8>)
 80084ba:	3a01      	subs	r2, #1
 80084bc:	2300      	movs	r3, #0
 80084be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084c2:	f7ff fea1 	bl	8008208 <__multadd>
 80084c6:	4606      	mov	r6, r0
 80084c8:	10ad      	asrs	r5, r5, #2
 80084ca:	d03d      	beq.n	8008548 <__pow5mult+0xa0>
 80084cc:	69fc      	ldr	r4, [r7, #28]
 80084ce:	b97c      	cbnz	r4, 80084f0 <__pow5mult+0x48>
 80084d0:	2010      	movs	r0, #16
 80084d2:	f7ff fd81 	bl	8007fd8 <malloc>
 80084d6:	4602      	mov	r2, r0
 80084d8:	61f8      	str	r0, [r7, #28]
 80084da:	b928      	cbnz	r0, 80084e8 <__pow5mult+0x40>
 80084dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008554 <__pow5mult+0xac>)
 80084e2:	481d      	ldr	r0, [pc, #116]	@ (8008558 <__pow5mult+0xb0>)
 80084e4:	f000 fc48 	bl	8008d78 <__assert_func>
 80084e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084ec:	6004      	str	r4, [r0, #0]
 80084ee:	60c4      	str	r4, [r0, #12]
 80084f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084f8:	b94c      	cbnz	r4, 800850e <__pow5mult+0x66>
 80084fa:	f240 2171 	movw	r1, #625	@ 0x271
 80084fe:	4638      	mov	r0, r7
 8008500:	f7ff ff14 	bl	800832c <__i2b>
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	f8c8 0008 	str.w	r0, [r8, #8]
 800850c:	6003      	str	r3, [r0, #0]
 800850e:	f04f 0900 	mov.w	r9, #0
 8008512:	07eb      	lsls	r3, r5, #31
 8008514:	d50a      	bpl.n	800852c <__pow5mult+0x84>
 8008516:	4631      	mov	r1, r6
 8008518:	4622      	mov	r2, r4
 800851a:	4638      	mov	r0, r7
 800851c:	f7ff ff1c 	bl	8008358 <__multiply>
 8008520:	4680      	mov	r8, r0
 8008522:	4631      	mov	r1, r6
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff fe4d 	bl	80081c4 <_Bfree>
 800852a:	4646      	mov	r6, r8
 800852c:	106d      	asrs	r5, r5, #1
 800852e:	d00b      	beq.n	8008548 <__pow5mult+0xa0>
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	b938      	cbnz	r0, 8008544 <__pow5mult+0x9c>
 8008534:	4622      	mov	r2, r4
 8008536:	4621      	mov	r1, r4
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff0d 	bl	8008358 <__multiply>
 800853e:	6020      	str	r0, [r4, #0]
 8008540:	f8c0 9000 	str.w	r9, [r0]
 8008544:	4604      	mov	r4, r0
 8008546:	e7e4      	b.n	8008512 <__pow5mult+0x6a>
 8008548:	4630      	mov	r0, r6
 800854a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854e:	bf00      	nop
 8008550:	0800a2e4 	.word	0x0800a2e4
 8008554:	0800a20b 	.word	0x0800a20b
 8008558:	0800a28b 	.word	0x0800a28b

0800855c <__lshift>:
 800855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	460c      	mov	r4, r1
 8008562:	4607      	mov	r7, r0
 8008564:	4691      	mov	r9, r2
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	6849      	ldr	r1, [r1, #4]
 800856a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008574:	f108 0601 	add.w	r6, r8, #1
 8008578:	42b3      	cmp	r3, r6
 800857a:	db0b      	blt.n	8008594 <__lshift+0x38>
 800857c:	4638      	mov	r0, r7
 800857e:	f7ff fde1 	bl	8008144 <_Balloc>
 8008582:	4605      	mov	r5, r0
 8008584:	b948      	cbnz	r0, 800859a <__lshift+0x3e>
 8008586:	4602      	mov	r2, r0
 8008588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800858c:	4b27      	ldr	r3, [pc, #156]	@ (800862c <__lshift+0xd0>)
 800858e:	4828      	ldr	r0, [pc, #160]	@ (8008630 <__lshift+0xd4>)
 8008590:	f000 fbf2 	bl	8008d78 <__assert_func>
 8008594:	3101      	adds	r1, #1
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	e7ee      	b.n	8008578 <__lshift+0x1c>
 800859a:	2300      	movs	r3, #0
 800859c:	f100 0114 	add.w	r1, r0, #20
 80085a0:	f100 0210 	add.w	r2, r0, #16
 80085a4:	4618      	mov	r0, r3
 80085a6:	4553      	cmp	r3, sl
 80085a8:	db33      	blt.n	8008612 <__lshift+0xb6>
 80085aa:	6920      	ldr	r0, [r4, #16]
 80085ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b0:	f104 0314 	add.w	r3, r4, #20
 80085b4:	f019 091f 	ands.w	r9, r9, #31
 80085b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085c0:	d02b      	beq.n	800861a <__lshift+0xbe>
 80085c2:	468a      	mov	sl, r1
 80085c4:	2200      	movs	r2, #0
 80085c6:	f1c9 0e20 	rsb	lr, r9, #32
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	fa00 f009 	lsl.w	r0, r0, r9
 80085d0:	4310      	orrs	r0, r2
 80085d2:	f84a 0b04 	str.w	r0, [sl], #4
 80085d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085da:	459c      	cmp	ip, r3
 80085dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80085e0:	d8f3      	bhi.n	80085ca <__lshift+0x6e>
 80085e2:	ebac 0304 	sub.w	r3, ip, r4
 80085e6:	3b15      	subs	r3, #21
 80085e8:	f023 0303 	bic.w	r3, r3, #3
 80085ec:	3304      	adds	r3, #4
 80085ee:	f104 0015 	add.w	r0, r4, #21
 80085f2:	4584      	cmp	ip, r0
 80085f4:	bf38      	it	cc
 80085f6:	2304      	movcc	r3, #4
 80085f8:	50ca      	str	r2, [r1, r3]
 80085fa:	b10a      	cbz	r2, 8008600 <__lshift+0xa4>
 80085fc:	f108 0602 	add.w	r6, r8, #2
 8008600:	3e01      	subs	r6, #1
 8008602:	4638      	mov	r0, r7
 8008604:	4621      	mov	r1, r4
 8008606:	612e      	str	r6, [r5, #16]
 8008608:	f7ff fddc 	bl	80081c4 <_Bfree>
 800860c:	4628      	mov	r0, r5
 800860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008612:	f842 0f04 	str.w	r0, [r2, #4]!
 8008616:	3301      	adds	r3, #1
 8008618:	e7c5      	b.n	80085a6 <__lshift+0x4a>
 800861a:	3904      	subs	r1, #4
 800861c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008620:	459c      	cmp	ip, r3
 8008622:	f841 2f04 	str.w	r2, [r1, #4]!
 8008626:	d8f9      	bhi.n	800861c <__lshift+0xc0>
 8008628:	e7ea      	b.n	8008600 <__lshift+0xa4>
 800862a:	bf00      	nop
 800862c:	0800a27a 	.word	0x0800a27a
 8008630:	0800a28b 	.word	0x0800a28b

08008634 <__mcmp>:
 8008634:	4603      	mov	r3, r0
 8008636:	690a      	ldr	r2, [r1, #16]
 8008638:	6900      	ldr	r0, [r0, #16]
 800863a:	b530      	push	{r4, r5, lr}
 800863c:	1a80      	subs	r0, r0, r2
 800863e:	d10e      	bne.n	800865e <__mcmp+0x2a>
 8008640:	3314      	adds	r3, #20
 8008642:	3114      	adds	r1, #20
 8008644:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800864c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008650:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008654:	4295      	cmp	r5, r2
 8008656:	d003      	beq.n	8008660 <__mcmp+0x2c>
 8008658:	d205      	bcs.n	8008666 <__mcmp+0x32>
 800865a:	f04f 30ff 	mov.w	r0, #4294967295
 800865e:	bd30      	pop	{r4, r5, pc}
 8008660:	42a3      	cmp	r3, r4
 8008662:	d3f3      	bcc.n	800864c <__mcmp+0x18>
 8008664:	e7fb      	b.n	800865e <__mcmp+0x2a>
 8008666:	2001      	movs	r0, #1
 8008668:	e7f9      	b.n	800865e <__mcmp+0x2a>
	...

0800866c <__mdiff>:
 800866c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	4689      	mov	r9, r1
 8008672:	4606      	mov	r6, r0
 8008674:	4611      	mov	r1, r2
 8008676:	4648      	mov	r0, r9
 8008678:	4614      	mov	r4, r2
 800867a:	f7ff ffdb 	bl	8008634 <__mcmp>
 800867e:	1e05      	subs	r5, r0, #0
 8008680:	d112      	bne.n	80086a8 <__mdiff+0x3c>
 8008682:	4629      	mov	r1, r5
 8008684:	4630      	mov	r0, r6
 8008686:	f7ff fd5d 	bl	8008144 <_Balloc>
 800868a:	4602      	mov	r2, r0
 800868c:	b928      	cbnz	r0, 800869a <__mdiff+0x2e>
 800868e:	f240 2137 	movw	r1, #567	@ 0x237
 8008692:	4b3e      	ldr	r3, [pc, #248]	@ (800878c <__mdiff+0x120>)
 8008694:	483e      	ldr	r0, [pc, #248]	@ (8008790 <__mdiff+0x124>)
 8008696:	f000 fb6f 	bl	8008d78 <__assert_func>
 800869a:	2301      	movs	r3, #1
 800869c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086a0:	4610      	mov	r0, r2
 80086a2:	b003      	add	sp, #12
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	bfbc      	itt	lt
 80086aa:	464b      	movlt	r3, r9
 80086ac:	46a1      	movlt	r9, r4
 80086ae:	4630      	mov	r0, r6
 80086b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086b4:	bfba      	itte	lt
 80086b6:	461c      	movlt	r4, r3
 80086b8:	2501      	movlt	r5, #1
 80086ba:	2500      	movge	r5, #0
 80086bc:	f7ff fd42 	bl	8008144 <_Balloc>
 80086c0:	4602      	mov	r2, r0
 80086c2:	b918      	cbnz	r0, 80086cc <__mdiff+0x60>
 80086c4:	f240 2145 	movw	r1, #581	@ 0x245
 80086c8:	4b30      	ldr	r3, [pc, #192]	@ (800878c <__mdiff+0x120>)
 80086ca:	e7e3      	b.n	8008694 <__mdiff+0x28>
 80086cc:	f100 0b14 	add.w	fp, r0, #20
 80086d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086d4:	f109 0310 	add.w	r3, r9, #16
 80086d8:	60c5      	str	r5, [r0, #12]
 80086da:	f04f 0c00 	mov.w	ip, #0
 80086de:	f109 0514 	add.w	r5, r9, #20
 80086e2:	46d9      	mov	r9, fp
 80086e4:	6926      	ldr	r6, [r4, #16]
 80086e6:	f104 0e14 	add.w	lr, r4, #20
 80086ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086fe:	b281      	uxth	r1, r0
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	fa1f f38a 	uxth.w	r3, sl
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	0c00      	lsrs	r0, r0, #16
 800870a:	4463      	add	r3, ip
 800870c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008710:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008714:	b29b      	uxth	r3, r3
 8008716:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800871a:	4576      	cmp	r6, lr
 800871c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008720:	f849 3b04 	str.w	r3, [r9], #4
 8008724:	d8e6      	bhi.n	80086f4 <__mdiff+0x88>
 8008726:	1b33      	subs	r3, r6, r4
 8008728:	3b15      	subs	r3, #21
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	3415      	adds	r4, #21
 8008730:	3304      	adds	r3, #4
 8008732:	42a6      	cmp	r6, r4
 8008734:	bf38      	it	cc
 8008736:	2304      	movcc	r3, #4
 8008738:	441d      	add	r5, r3
 800873a:	445b      	add	r3, fp
 800873c:	461e      	mov	r6, r3
 800873e:	462c      	mov	r4, r5
 8008740:	4544      	cmp	r4, r8
 8008742:	d30e      	bcc.n	8008762 <__mdiff+0xf6>
 8008744:	f108 0103 	add.w	r1, r8, #3
 8008748:	1b49      	subs	r1, r1, r5
 800874a:	f021 0103 	bic.w	r1, r1, #3
 800874e:	3d03      	subs	r5, #3
 8008750:	45a8      	cmp	r8, r5
 8008752:	bf38      	it	cc
 8008754:	2100      	movcc	r1, #0
 8008756:	440b      	add	r3, r1
 8008758:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800875c:	b199      	cbz	r1, 8008786 <__mdiff+0x11a>
 800875e:	6117      	str	r7, [r2, #16]
 8008760:	e79e      	b.n	80086a0 <__mdiff+0x34>
 8008762:	46e6      	mov	lr, ip
 8008764:	f854 1b04 	ldr.w	r1, [r4], #4
 8008768:	fa1f fc81 	uxth.w	ip, r1
 800876c:	44f4      	add	ip, lr
 800876e:	0c08      	lsrs	r0, r1, #16
 8008770:	4471      	add	r1, lr
 8008772:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008776:	b289      	uxth	r1, r1
 8008778:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800877c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008780:	f846 1b04 	str.w	r1, [r6], #4
 8008784:	e7dc      	b.n	8008740 <__mdiff+0xd4>
 8008786:	3f01      	subs	r7, #1
 8008788:	e7e6      	b.n	8008758 <__mdiff+0xec>
 800878a:	bf00      	nop
 800878c:	0800a27a 	.word	0x0800a27a
 8008790:	0800a28b 	.word	0x0800a28b

08008794 <__d2b>:
 8008794:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008798:	2101      	movs	r1, #1
 800879a:	4690      	mov	r8, r2
 800879c:	4699      	mov	r9, r3
 800879e:	9e08      	ldr	r6, [sp, #32]
 80087a0:	f7ff fcd0 	bl	8008144 <_Balloc>
 80087a4:	4604      	mov	r4, r0
 80087a6:	b930      	cbnz	r0, 80087b6 <__d2b+0x22>
 80087a8:	4602      	mov	r2, r0
 80087aa:	f240 310f 	movw	r1, #783	@ 0x30f
 80087ae:	4b23      	ldr	r3, [pc, #140]	@ (800883c <__d2b+0xa8>)
 80087b0:	4823      	ldr	r0, [pc, #140]	@ (8008840 <__d2b+0xac>)
 80087b2:	f000 fae1 	bl	8008d78 <__assert_func>
 80087b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087be:	b10d      	cbz	r5, 80087c4 <__d2b+0x30>
 80087c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	f1b8 0300 	subs.w	r3, r8, #0
 80087ca:	d024      	beq.n	8008816 <__d2b+0x82>
 80087cc:	4668      	mov	r0, sp
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	f7ff fd7f 	bl	80082d2 <__lo0bits>
 80087d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087d8:	b1d8      	cbz	r0, 8008812 <__d2b+0x7e>
 80087da:	f1c0 0320 	rsb	r3, r0, #32
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	430b      	orrs	r3, r1
 80087e4:	40c2      	lsrs	r2, r0
 80087e6:	6163      	str	r3, [r4, #20]
 80087e8:	9201      	str	r2, [sp, #4]
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bf0c      	ite	eq
 80087f0:	2201      	moveq	r2, #1
 80087f2:	2202      	movne	r2, #2
 80087f4:	61a3      	str	r3, [r4, #24]
 80087f6:	6122      	str	r2, [r4, #16]
 80087f8:	b1ad      	cbz	r5, 8008826 <__d2b+0x92>
 80087fa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087fe:	4405      	add	r5, r0
 8008800:	6035      	str	r5, [r6, #0]
 8008802:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008808:	6018      	str	r0, [r3, #0]
 800880a:	4620      	mov	r0, r4
 800880c:	b002      	add	sp, #8
 800880e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008812:	6161      	str	r1, [r4, #20]
 8008814:	e7e9      	b.n	80087ea <__d2b+0x56>
 8008816:	a801      	add	r0, sp, #4
 8008818:	f7ff fd5b 	bl	80082d2 <__lo0bits>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	6163      	str	r3, [r4, #20]
 8008822:	3020      	adds	r0, #32
 8008824:	e7e7      	b.n	80087f6 <__d2b+0x62>
 8008826:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800882a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800882e:	6030      	str	r0, [r6, #0]
 8008830:	6918      	ldr	r0, [r3, #16]
 8008832:	f7ff fd2f 	bl	8008294 <__hi0bits>
 8008836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800883a:	e7e4      	b.n	8008806 <__d2b+0x72>
 800883c:	0800a27a 	.word	0x0800a27a
 8008840:	0800a28b 	.word	0x0800a28b

08008844 <__sfputc_r>:
 8008844:	6893      	ldr	r3, [r2, #8]
 8008846:	b410      	push	{r4}
 8008848:	3b01      	subs	r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	6093      	str	r3, [r2, #8]
 800884e:	da07      	bge.n	8008860 <__sfputc_r+0x1c>
 8008850:	6994      	ldr	r4, [r2, #24]
 8008852:	42a3      	cmp	r3, r4
 8008854:	db01      	blt.n	800885a <__sfputc_r+0x16>
 8008856:	290a      	cmp	r1, #10
 8008858:	d102      	bne.n	8008860 <__sfputc_r+0x1c>
 800885a:	bc10      	pop	{r4}
 800885c:	f000 b9da 	b.w	8008c14 <__swbuf_r>
 8008860:	6813      	ldr	r3, [r2, #0]
 8008862:	1c58      	adds	r0, r3, #1
 8008864:	6010      	str	r0, [r2, #0]
 8008866:	7019      	strb	r1, [r3, #0]
 8008868:	4608      	mov	r0, r1
 800886a:	bc10      	pop	{r4}
 800886c:	4770      	bx	lr

0800886e <__sfputs_r>:
 800886e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008870:	4606      	mov	r6, r0
 8008872:	460f      	mov	r7, r1
 8008874:	4614      	mov	r4, r2
 8008876:	18d5      	adds	r5, r2, r3
 8008878:	42ac      	cmp	r4, r5
 800887a:	d101      	bne.n	8008880 <__sfputs_r+0x12>
 800887c:	2000      	movs	r0, #0
 800887e:	e007      	b.n	8008890 <__sfputs_r+0x22>
 8008880:	463a      	mov	r2, r7
 8008882:	4630      	mov	r0, r6
 8008884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008888:	f7ff ffdc 	bl	8008844 <__sfputc_r>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d1f3      	bne.n	8008878 <__sfputs_r+0xa>
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008894 <_vfiprintf_r>:
 8008894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	460d      	mov	r5, r1
 800889a:	4614      	mov	r4, r2
 800889c:	4698      	mov	r8, r3
 800889e:	4606      	mov	r6, r0
 80088a0:	b09d      	sub	sp, #116	@ 0x74
 80088a2:	b118      	cbz	r0, 80088ac <_vfiprintf_r+0x18>
 80088a4:	6a03      	ldr	r3, [r0, #32]
 80088a6:	b90b      	cbnz	r3, 80088ac <_vfiprintf_r+0x18>
 80088a8:	f7fe fbe2 	bl	8007070 <__sinit>
 80088ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088ae:	07d9      	lsls	r1, r3, #31
 80088b0:	d405      	bmi.n	80088be <_vfiprintf_r+0x2a>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	059a      	lsls	r2, r3, #22
 80088b6:	d402      	bmi.n	80088be <_vfiprintf_r+0x2a>
 80088b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ba:	f7fe fce2 	bl	8007282 <__retarget_lock_acquire_recursive>
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	071b      	lsls	r3, r3, #28
 80088c2:	d501      	bpl.n	80088c8 <_vfiprintf_r+0x34>
 80088c4:	692b      	ldr	r3, [r5, #16]
 80088c6:	b99b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x5c>
 80088c8:	4629      	mov	r1, r5
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 f9e0 	bl	8008c90 <__swsetup_r>
 80088d0:	b170      	cbz	r0, 80088f0 <_vfiprintf_r+0x5c>
 80088d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088d4:	07dc      	lsls	r4, r3, #31
 80088d6:	d504      	bpl.n	80088e2 <_vfiprintf_r+0x4e>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b01d      	add	sp, #116	@ 0x74
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	0598      	lsls	r0, r3, #22
 80088e6:	d4f7      	bmi.n	80088d8 <_vfiprintf_r+0x44>
 80088e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ea:	f7fe fccb 	bl	8007284 <__retarget_lock_release_recursive>
 80088ee:	e7f3      	b.n	80088d8 <_vfiprintf_r+0x44>
 80088f0:	2300      	movs	r3, #0
 80088f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f4:	2320      	movs	r3, #32
 80088f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088fa:	2330      	movs	r3, #48	@ 0x30
 80088fc:	f04f 0901 	mov.w	r9, #1
 8008900:	f8cd 800c 	str.w	r8, [sp, #12]
 8008904:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ab0 <_vfiprintf_r+0x21c>
 8008908:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800890c:	4623      	mov	r3, r4
 800890e:	469a      	mov	sl, r3
 8008910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008914:	b10a      	cbz	r2, 800891a <_vfiprintf_r+0x86>
 8008916:	2a25      	cmp	r2, #37	@ 0x25
 8008918:	d1f9      	bne.n	800890e <_vfiprintf_r+0x7a>
 800891a:	ebba 0b04 	subs.w	fp, sl, r4
 800891e:	d00b      	beq.n	8008938 <_vfiprintf_r+0xa4>
 8008920:	465b      	mov	r3, fp
 8008922:	4622      	mov	r2, r4
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ffa1 	bl	800886e <__sfputs_r>
 800892c:	3001      	adds	r0, #1
 800892e:	f000 80a7 	beq.w	8008a80 <_vfiprintf_r+0x1ec>
 8008932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008934:	445a      	add	r2, fp
 8008936:	9209      	str	r2, [sp, #36]	@ 0x24
 8008938:	f89a 3000 	ldrb.w	r3, [sl]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 809f 	beq.w	8008a80 <_vfiprintf_r+0x1ec>
 8008942:	2300      	movs	r3, #0
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800894c:	f10a 0a01 	add.w	sl, sl, #1
 8008950:	9304      	str	r3, [sp, #16]
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008958:	931a      	str	r3, [sp, #104]	@ 0x68
 800895a:	4654      	mov	r4, sl
 800895c:	2205      	movs	r2, #5
 800895e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008962:	4853      	ldr	r0, [pc, #332]	@ (8008ab0 <_vfiprintf_r+0x21c>)
 8008964:	f7fe fc8f 	bl	8007286 <memchr>
 8008968:	9a04      	ldr	r2, [sp, #16]
 800896a:	b9d8      	cbnz	r0, 80089a4 <_vfiprintf_r+0x110>
 800896c:	06d1      	lsls	r1, r2, #27
 800896e:	bf44      	itt	mi
 8008970:	2320      	movmi	r3, #32
 8008972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008976:	0713      	lsls	r3, r2, #28
 8008978:	bf44      	itt	mi
 800897a:	232b      	movmi	r3, #43	@ 0x2b
 800897c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008980:	f89a 3000 	ldrb.w	r3, [sl]
 8008984:	2b2a      	cmp	r3, #42	@ 0x2a
 8008986:	d015      	beq.n	80089b4 <_vfiprintf_r+0x120>
 8008988:	4654      	mov	r4, sl
 800898a:	2000      	movs	r0, #0
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	4621      	mov	r1, r4
 8008994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008998:	3b30      	subs	r3, #48	@ 0x30
 800899a:	2b09      	cmp	r3, #9
 800899c:	d94b      	bls.n	8008a36 <_vfiprintf_r+0x1a2>
 800899e:	b1b0      	cbz	r0, 80089ce <_vfiprintf_r+0x13a>
 80089a0:	9207      	str	r2, [sp, #28]
 80089a2:	e014      	b.n	80089ce <_vfiprintf_r+0x13a>
 80089a4:	eba0 0308 	sub.w	r3, r0, r8
 80089a8:	fa09 f303 	lsl.w	r3, r9, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	46a2      	mov	sl, r4
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	e7d2      	b.n	800895a <_vfiprintf_r+0xc6>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	1d19      	adds	r1, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	9103      	str	r1, [sp, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfbb      	ittet	lt
 80089c0:	425b      	neglt	r3, r3
 80089c2:	f042 0202 	orrlt.w	r2, r2, #2
 80089c6:	9307      	strge	r3, [sp, #28]
 80089c8:	9307      	strlt	r3, [sp, #28]
 80089ca:	bfb8      	it	lt
 80089cc:	9204      	strlt	r2, [sp, #16]
 80089ce:	7823      	ldrb	r3, [r4, #0]
 80089d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80089d2:	d10a      	bne.n	80089ea <_vfiprintf_r+0x156>
 80089d4:	7863      	ldrb	r3, [r4, #1]
 80089d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d8:	d132      	bne.n	8008a40 <_vfiprintf_r+0x1ac>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	3402      	adds	r4, #2
 80089de:	1d1a      	adds	r2, r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	9203      	str	r2, [sp, #12]
 80089e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008ab4 <_vfiprintf_r+0x220>
 80089ee:	2203      	movs	r2, #3
 80089f0:	4650      	mov	r0, sl
 80089f2:	7821      	ldrb	r1, [r4, #0]
 80089f4:	f7fe fc47 	bl	8007286 <memchr>
 80089f8:	b138      	cbz	r0, 8008a0a <_vfiprintf_r+0x176>
 80089fa:	2240      	movs	r2, #64	@ 0x40
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	eba0 000a 	sub.w	r0, r0, sl
 8008a02:	4082      	lsls	r2, r0
 8008a04:	4313      	orrs	r3, r2
 8008a06:	3401      	adds	r4, #1
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0e:	2206      	movs	r2, #6
 8008a10:	4829      	ldr	r0, [pc, #164]	@ (8008ab8 <_vfiprintf_r+0x224>)
 8008a12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a16:	f7fe fc36 	bl	8007286 <memchr>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d03f      	beq.n	8008a9e <_vfiprintf_r+0x20a>
 8008a1e:	4b27      	ldr	r3, [pc, #156]	@ (8008abc <_vfiprintf_r+0x228>)
 8008a20:	bb1b      	cbnz	r3, 8008a6a <_vfiprintf_r+0x1d6>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	3307      	adds	r3, #7
 8008a26:	f023 0307 	bic.w	r3, r3, #7
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a30:	443b      	add	r3, r7
 8008a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a34:	e76a      	b.n	800890c <_vfiprintf_r+0x78>
 8008a36:	460c      	mov	r4, r1
 8008a38:	2001      	movs	r0, #1
 8008a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3e:	e7a8      	b.n	8008992 <_vfiprintf_r+0xfe>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f04f 0c0a 	mov.w	ip, #10
 8008a46:	4619      	mov	r1, r3
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9305      	str	r3, [sp, #20]
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a52:	3a30      	subs	r2, #48	@ 0x30
 8008a54:	2a09      	cmp	r2, #9
 8008a56:	d903      	bls.n	8008a60 <_vfiprintf_r+0x1cc>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0c6      	beq.n	80089ea <_vfiprintf_r+0x156>
 8008a5c:	9105      	str	r1, [sp, #20]
 8008a5e:	e7c4      	b.n	80089ea <_vfiprintf_r+0x156>
 8008a60:	4604      	mov	r4, r0
 8008a62:	2301      	movs	r3, #1
 8008a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a68:	e7f0      	b.n	8008a4c <_vfiprintf_r+0x1b8>
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4630      	mov	r0, r6
 8008a72:	4b13      	ldr	r3, [pc, #76]	@ (8008ac0 <_vfiprintf_r+0x22c>)
 8008a74:	a904      	add	r1, sp, #16
 8008a76:	f7fd feb1 	bl	80067dc <_printf_float>
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	1c78      	adds	r0, r7, #1
 8008a7e:	d1d6      	bne.n	8008a2e <_vfiprintf_r+0x19a>
 8008a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	d405      	bmi.n	8008a92 <_vfiprintf_r+0x1fe>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	059a      	lsls	r2, r3, #22
 8008a8a:	d402      	bmi.n	8008a92 <_vfiprintf_r+0x1fe>
 8008a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a8e:	f7fe fbf9 	bl	8007284 <__retarget_lock_release_recursive>
 8008a92:	89ab      	ldrh	r3, [r5, #12]
 8008a94:	065b      	lsls	r3, r3, #25
 8008a96:	f53f af1f 	bmi.w	80088d8 <_vfiprintf_r+0x44>
 8008a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a9c:	e71e      	b.n	80088dc <_vfiprintf_r+0x48>
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4b06      	ldr	r3, [pc, #24]	@ (8008ac0 <_vfiprintf_r+0x22c>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	f7fe f935 	bl	8006d18 <_printf_i>
 8008aae:	e7e4      	b.n	8008a7a <_vfiprintf_r+0x1e6>
 8008ab0:	0800a3e0 	.word	0x0800a3e0
 8008ab4:	0800a3e6 	.word	0x0800a3e6
 8008ab8:	0800a3ea 	.word	0x0800a3ea
 8008abc:	080067dd 	.word	0x080067dd
 8008ac0:	0800886f 	.word	0x0800886f

08008ac4 <__sflush_r>:
 8008ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	0716      	lsls	r6, r2, #28
 8008acc:	4605      	mov	r5, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	d454      	bmi.n	8008b7c <__sflush_r+0xb8>
 8008ad2:	684b      	ldr	r3, [r1, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	dc02      	bgt.n	8008ade <__sflush_r+0x1a>
 8008ad8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dd48      	ble.n	8008b70 <__sflush_r+0xac>
 8008ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	d045      	beq.n	8008b70 <__sflush_r+0xac>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008aea:	682f      	ldr	r7, [r5, #0]
 8008aec:	6a21      	ldr	r1, [r4, #32]
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	d030      	beq.n	8008b54 <__sflush_r+0x90>
 8008af2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	0759      	lsls	r1, r3, #29
 8008af8:	d505      	bpl.n	8008b06 <__sflush_r+0x42>
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	1ad2      	subs	r2, r2, r3
 8008afe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b00:	b10b      	cbz	r3, 8008b06 <__sflush_r+0x42>
 8008b02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	2300      	movs	r3, #0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b0c:	6a21      	ldr	r1, [r4, #32]
 8008b0e:	47b0      	blx	r6
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	d106      	bne.n	8008b24 <__sflush_r+0x60>
 8008b16:	6829      	ldr	r1, [r5, #0]
 8008b18:	291d      	cmp	r1, #29
 8008b1a:	d82b      	bhi.n	8008b74 <__sflush_r+0xb0>
 8008b1c:	4a28      	ldr	r2, [pc, #160]	@ (8008bc0 <__sflush_r+0xfc>)
 8008b1e:	410a      	asrs	r2, r1
 8008b20:	07d6      	lsls	r6, r2, #31
 8008b22:	d427      	bmi.n	8008b74 <__sflush_r+0xb0>
 8008b24:	2200      	movs	r2, #0
 8008b26:	6062      	str	r2, [r4, #4]
 8008b28:	6922      	ldr	r2, [r4, #16]
 8008b2a:	04d9      	lsls	r1, r3, #19
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	d504      	bpl.n	8008b3a <__sflush_r+0x76>
 8008b30:	1c42      	adds	r2, r0, #1
 8008b32:	d101      	bne.n	8008b38 <__sflush_r+0x74>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b903      	cbnz	r3, 8008b3a <__sflush_r+0x76>
 8008b38:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b3c:	602f      	str	r7, [r5, #0]
 8008b3e:	b1b9      	cbz	r1, 8008b70 <__sflush_r+0xac>
 8008b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <__sflush_r+0x8a>
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f7ff f9fd 	bl	8007f48 <_free_r>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b52:	e00d      	b.n	8008b70 <__sflush_r+0xac>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b0      	blx	r6
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	1c50      	adds	r0, r2, #1
 8008b5e:	d1c9      	bne.n	8008af4 <__sflush_r+0x30>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c6      	beq.n	8008af4 <__sflush_r+0x30>
 8008b66:	2b1d      	cmp	r3, #29
 8008b68:	d001      	beq.n	8008b6e <__sflush_r+0xaa>
 8008b6a:	2b16      	cmp	r3, #22
 8008b6c:	d11d      	bne.n	8008baa <__sflush_r+0xe6>
 8008b6e:	602f      	str	r7, [r5, #0]
 8008b70:	2000      	movs	r0, #0
 8008b72:	e021      	b.n	8008bb8 <__sflush_r+0xf4>
 8008b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	e01a      	b.n	8008bb2 <__sflush_r+0xee>
 8008b7c:	690f      	ldr	r7, [r1, #16]
 8008b7e:	2f00      	cmp	r7, #0
 8008b80:	d0f6      	beq.n	8008b70 <__sflush_r+0xac>
 8008b82:	0793      	lsls	r3, r2, #30
 8008b84:	bf18      	it	ne
 8008b86:	2300      	movne	r3, #0
 8008b88:	680e      	ldr	r6, [r1, #0]
 8008b8a:	bf08      	it	eq
 8008b8c:	694b      	ldreq	r3, [r1, #20]
 8008b8e:	1bf6      	subs	r6, r6, r7
 8008b90:	600f      	str	r7, [r1, #0]
 8008b92:	608b      	str	r3, [r1, #8]
 8008b94:	2e00      	cmp	r6, #0
 8008b96:	ddeb      	ble.n	8008b70 <__sflush_r+0xac>
 8008b98:	4633      	mov	r3, r6
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	6a21      	ldr	r1, [r4, #32]
 8008ba0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008ba4:	47e0      	blx	ip
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	dc07      	bgt.n	8008bba <__sflush_r+0xf6>
 8008baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bba:	4407      	add	r7, r0
 8008bbc:	1a36      	subs	r6, r6, r0
 8008bbe:	e7e9      	b.n	8008b94 <__sflush_r+0xd0>
 8008bc0:	dfbffffe 	.word	0xdfbffffe

08008bc4 <_fflush_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	b913      	cbnz	r3, 8008bd4 <_fflush_r+0x10>
 8008bce:	2500      	movs	r5, #0
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	b118      	cbz	r0, 8008bde <_fflush_r+0x1a>
 8008bd6:	6a03      	ldr	r3, [r0, #32]
 8008bd8:	b90b      	cbnz	r3, 8008bde <_fflush_r+0x1a>
 8008bda:	f7fe fa49 	bl	8007070 <__sinit>
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0f3      	beq.n	8008bce <_fflush_r+0xa>
 8008be6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008be8:	07d0      	lsls	r0, r2, #31
 8008bea:	d404      	bmi.n	8008bf6 <_fflush_r+0x32>
 8008bec:	0599      	lsls	r1, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_fflush_r+0x32>
 8008bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bf2:	f7fe fb46 	bl	8007282 <__retarget_lock_acquire_recursive>
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	f7ff ff63 	bl	8008ac4 <__sflush_r>
 8008bfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c00:	4605      	mov	r5, r0
 8008c02:	07da      	lsls	r2, r3, #31
 8008c04:	d4e4      	bmi.n	8008bd0 <_fflush_r+0xc>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	059b      	lsls	r3, r3, #22
 8008c0a:	d4e1      	bmi.n	8008bd0 <_fflush_r+0xc>
 8008c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c0e:	f7fe fb39 	bl	8007284 <__retarget_lock_release_recursive>
 8008c12:	e7dd      	b.n	8008bd0 <_fflush_r+0xc>

08008c14 <__swbuf_r>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	460e      	mov	r6, r1
 8008c18:	4614      	mov	r4, r2
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	b118      	cbz	r0, 8008c26 <__swbuf_r+0x12>
 8008c1e:	6a03      	ldr	r3, [r0, #32]
 8008c20:	b90b      	cbnz	r3, 8008c26 <__swbuf_r+0x12>
 8008c22:	f7fe fa25 	bl	8007070 <__sinit>
 8008c26:	69a3      	ldr	r3, [r4, #24]
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	071a      	lsls	r2, r3, #28
 8008c2e:	d501      	bpl.n	8008c34 <__swbuf_r+0x20>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	b943      	cbnz	r3, 8008c46 <__swbuf_r+0x32>
 8008c34:	4621      	mov	r1, r4
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 f82a 	bl	8008c90 <__swsetup_r>
 8008c3c:	b118      	cbz	r0, 8008c46 <__swbuf_r+0x32>
 8008c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8008c42:	4638      	mov	r0, r7
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	6922      	ldr	r2, [r4, #16]
 8008c4a:	b2f6      	uxtb	r6, r6
 8008c4c:	1a98      	subs	r0, r3, r2
 8008c4e:	6963      	ldr	r3, [r4, #20]
 8008c50:	4637      	mov	r7, r6
 8008c52:	4283      	cmp	r3, r0
 8008c54:	dc05      	bgt.n	8008c62 <__swbuf_r+0x4e>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f7ff ffb3 	bl	8008bc4 <_fflush_r>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d1ed      	bne.n	8008c3e <__swbuf_r+0x2a>
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	60a3      	str	r3, [r4, #8]
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	6022      	str	r2, [r4, #0]
 8008c6e:	701e      	strb	r6, [r3, #0]
 8008c70:	6962      	ldr	r2, [r4, #20]
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d004      	beq.n	8008c82 <__swbuf_r+0x6e>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	07db      	lsls	r3, r3, #31
 8008c7c:	d5e1      	bpl.n	8008c42 <__swbuf_r+0x2e>
 8008c7e:	2e0a      	cmp	r6, #10
 8008c80:	d1df      	bne.n	8008c42 <__swbuf_r+0x2e>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7ff ff9d 	bl	8008bc4 <_fflush_r>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d0d9      	beq.n	8008c42 <__swbuf_r+0x2e>
 8008c8e:	e7d6      	b.n	8008c3e <__swbuf_r+0x2a>

08008c90 <__swsetup_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4b29      	ldr	r3, [pc, #164]	@ (8008d38 <__swsetup_r+0xa8>)
 8008c94:	4605      	mov	r5, r0
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	460c      	mov	r4, r1
 8008c9a:	b118      	cbz	r0, 8008ca4 <__swsetup_r+0x14>
 8008c9c:	6a03      	ldr	r3, [r0, #32]
 8008c9e:	b90b      	cbnz	r3, 8008ca4 <__swsetup_r+0x14>
 8008ca0:	f7fe f9e6 	bl	8007070 <__sinit>
 8008ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca8:	0719      	lsls	r1, r3, #28
 8008caa:	d422      	bmi.n	8008cf2 <__swsetup_r+0x62>
 8008cac:	06da      	lsls	r2, r3, #27
 8008cae:	d407      	bmi.n	8008cc0 <__swsetup_r+0x30>
 8008cb0:	2209      	movs	r2, #9
 8008cb2:	602a      	str	r2, [r5, #0]
 8008cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	e033      	b.n	8008d28 <__swsetup_r+0x98>
 8008cc0:	0758      	lsls	r0, r3, #29
 8008cc2:	d512      	bpl.n	8008cea <__swsetup_r+0x5a>
 8008cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cc6:	b141      	cbz	r1, 8008cda <__swsetup_r+0x4a>
 8008cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	d002      	beq.n	8008cd6 <__swsetup_r+0x46>
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f7ff f939 	bl	8007f48 <_free_r>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f043 0308 	orr.w	r3, r3, #8
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	b94b      	cbnz	r3, 8008d0a <__swsetup_r+0x7a>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d00:	d003      	beq.n	8008d0a <__swsetup_r+0x7a>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4628      	mov	r0, r5
 8008d06:	f000 f8c0 	bl	8008e8a <__smakebuf_r>
 8008d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0e:	f013 0201 	ands.w	r2, r3, #1
 8008d12:	d00a      	beq.n	8008d2a <__swsetup_r+0x9a>
 8008d14:	2200      	movs	r2, #0
 8008d16:	60a2      	str	r2, [r4, #8]
 8008d18:	6962      	ldr	r2, [r4, #20]
 8008d1a:	4252      	negs	r2, r2
 8008d1c:	61a2      	str	r2, [r4, #24]
 8008d1e:	6922      	ldr	r2, [r4, #16]
 8008d20:	b942      	cbnz	r2, 8008d34 <__swsetup_r+0xa4>
 8008d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d26:	d1c5      	bne.n	8008cb4 <__swsetup_r+0x24>
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	0799      	lsls	r1, r3, #30
 8008d2c:	bf58      	it	pl
 8008d2e:	6962      	ldrpl	r2, [r4, #20]
 8008d30:	60a2      	str	r2, [r4, #8]
 8008d32:	e7f4      	b.n	8008d1e <__swsetup_r+0x8e>
 8008d34:	2000      	movs	r0, #0
 8008d36:	e7f7      	b.n	8008d28 <__swsetup_r+0x98>
 8008d38:	20000048 	.word	0x20000048

08008d3c <_sbrk_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4d05      	ldr	r5, [pc, #20]	@ (8008d58 <_sbrk_r+0x1c>)
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f7f9 ff1e 	bl	8002b88 <_sbrk>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_sbrk_r+0x1a>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_sbrk_r+0x1a>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	200009a4 	.word	0x200009a4

08008d5c <memcpy>:
 8008d5c:	440a      	add	r2, r1
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d64:	d100      	bne.n	8008d68 <memcpy+0xc>
 8008d66:	4770      	bx	lr
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	d1f9      	bne.n	8008d6a <memcpy+0xe>
 8008d76:	bd10      	pop	{r4, pc}

08008d78 <__assert_func>:
 8008d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <__assert_func+0x2c>)
 8008d80:	4605      	mov	r5, r0
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68d8      	ldr	r0, [r3, #12]
 8008d86:	b954      	cbnz	r4, 8008d9e <__assert_func+0x26>
 8008d88:	4b07      	ldr	r3, [pc, #28]	@ (8008da8 <__assert_func+0x30>)
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d90:	9100      	str	r1, [sp, #0]
 8008d92:	462b      	mov	r3, r5
 8008d94:	4905      	ldr	r1, [pc, #20]	@ (8008dac <__assert_func+0x34>)
 8008d96:	f000 f841 	bl	8008e1c <fiprintf>
 8008d9a:	f000 f8d5 	bl	8008f48 <abort>
 8008d9e:	4b04      	ldr	r3, [pc, #16]	@ (8008db0 <__assert_func+0x38>)
 8008da0:	e7f4      	b.n	8008d8c <__assert_func+0x14>
 8008da2:	bf00      	nop
 8008da4:	20000048 	.word	0x20000048
 8008da8:	0800a436 	.word	0x0800a436
 8008dac:	0800a408 	.word	0x0800a408
 8008db0:	0800a3fb 	.word	0x0800a3fb

08008db4 <_calloc_r>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	fba1 5402 	umull	r5, r4, r1, r2
 8008dba:	b93c      	cbnz	r4, 8008dcc <_calloc_r+0x18>
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7ff f935 	bl	800802c <_malloc_r>
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	b928      	cbnz	r0, 8008dd2 <_calloc_r+0x1e>
 8008dc6:	2600      	movs	r6, #0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	220c      	movs	r2, #12
 8008dce:	6002      	str	r2, [r0, #0]
 8008dd0:	e7f9      	b.n	8008dc6 <_calloc_r+0x12>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7fe f9d6 	bl	8007186 <memset>
 8008dda:	e7f5      	b.n	8008dc8 <_calloc_r+0x14>

08008ddc <__ascii_mbtowc>:
 8008ddc:	b082      	sub	sp, #8
 8008dde:	b901      	cbnz	r1, 8008de2 <__ascii_mbtowc+0x6>
 8008de0:	a901      	add	r1, sp, #4
 8008de2:	b142      	cbz	r2, 8008df6 <__ascii_mbtowc+0x1a>
 8008de4:	b14b      	cbz	r3, 8008dfa <__ascii_mbtowc+0x1e>
 8008de6:	7813      	ldrb	r3, [r2, #0]
 8008de8:	600b      	str	r3, [r1, #0]
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	1e10      	subs	r0, r2, #0
 8008dee:	bf18      	it	ne
 8008df0:	2001      	movne	r0, #1
 8008df2:	b002      	add	sp, #8
 8008df4:	4770      	bx	lr
 8008df6:	4610      	mov	r0, r2
 8008df8:	e7fb      	b.n	8008df2 <__ascii_mbtowc+0x16>
 8008dfa:	f06f 0001 	mvn.w	r0, #1
 8008dfe:	e7f8      	b.n	8008df2 <__ascii_mbtowc+0x16>

08008e00 <__ascii_wctomb>:
 8008e00:	4603      	mov	r3, r0
 8008e02:	4608      	mov	r0, r1
 8008e04:	b141      	cbz	r1, 8008e18 <__ascii_wctomb+0x18>
 8008e06:	2aff      	cmp	r2, #255	@ 0xff
 8008e08:	d904      	bls.n	8008e14 <__ascii_wctomb+0x14>
 8008e0a:	228a      	movs	r2, #138	@ 0x8a
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	4770      	bx	lr
 8008e14:	2001      	movs	r0, #1
 8008e16:	700a      	strb	r2, [r1, #0]
 8008e18:	4770      	bx	lr
	...

08008e1c <fiprintf>:
 8008e1c:	b40e      	push	{r1, r2, r3}
 8008e1e:	b503      	push	{r0, r1, lr}
 8008e20:	4601      	mov	r1, r0
 8008e22:	ab03      	add	r3, sp, #12
 8008e24:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <fiprintf+0x20>)
 8008e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f7ff fd31 	bl	8008894 <_vfiprintf_r>
 8008e32:	b002      	add	sp, #8
 8008e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e38:	b003      	add	sp, #12
 8008e3a:	4770      	bx	lr
 8008e3c:	20000048 	.word	0x20000048

08008e40 <__swhatbuf_r>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	460c      	mov	r4, r1
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	4615      	mov	r5, r2
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	461e      	mov	r6, r3
 8008e4e:	b096      	sub	sp, #88	@ 0x58
 8008e50:	da0c      	bge.n	8008e6c <__swhatbuf_r+0x2c>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	2100      	movs	r1, #0
 8008e56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e5a:	bf14      	ite	ne
 8008e5c:	2340      	movne	r3, #64	@ 0x40
 8008e5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e62:	2000      	movs	r0, #0
 8008e64:	6031      	str	r1, [r6, #0]
 8008e66:	602b      	str	r3, [r5, #0]
 8008e68:	b016      	add	sp, #88	@ 0x58
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	466a      	mov	r2, sp
 8008e6e:	f000 f849 	bl	8008f04 <_fstat_r>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	dbed      	blt.n	8008e52 <__swhatbuf_r+0x12>
 8008e76:	9901      	ldr	r1, [sp, #4]
 8008e78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e80:	4259      	negs	r1, r3
 8008e82:	4159      	adcs	r1, r3
 8008e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e88:	e7eb      	b.n	8008e62 <__swhatbuf_r+0x22>

08008e8a <__smakebuf_r>:
 8008e8a:	898b      	ldrh	r3, [r1, #12]
 8008e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e8e:	079d      	lsls	r5, r3, #30
 8008e90:	4606      	mov	r6, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	d507      	bpl.n	8008ea6 <__smakebuf_r+0x1c>
 8008e96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e9a:	6023      	str	r3, [r4, #0]
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	6163      	str	r3, [r4, #20]
 8008ea2:	b003      	add	sp, #12
 8008ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea6:	466a      	mov	r2, sp
 8008ea8:	ab01      	add	r3, sp, #4
 8008eaa:	f7ff ffc9 	bl	8008e40 <__swhatbuf_r>
 8008eae:	9f00      	ldr	r7, [sp, #0]
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff f8b9 	bl	800802c <_malloc_r>
 8008eba:	b948      	cbnz	r0, 8008ed0 <__smakebuf_r+0x46>
 8008ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec0:	059a      	lsls	r2, r3, #22
 8008ec2:	d4ee      	bmi.n	8008ea2 <__smakebuf_r+0x18>
 8008ec4:	f023 0303 	bic.w	r3, r3, #3
 8008ec8:	f043 0302 	orr.w	r3, r3, #2
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	e7e2      	b.n	8008e96 <__smakebuf_r+0xc>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	6020      	str	r0, [r4, #0]
 8008ee0:	b15b      	cbz	r3, 8008efa <__smakebuf_r+0x70>
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee8:	f000 f81e 	bl	8008f28 <_isatty_r>
 8008eec:	b128      	cbz	r0, 8008efa <__smakebuf_r+0x70>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f023 0303 	bic.w	r3, r3, #3
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	431d      	orrs	r5, r3
 8008efe:	81a5      	strh	r5, [r4, #12]
 8008f00:	e7cf      	b.n	8008ea2 <__smakebuf_r+0x18>
	...

08008f04 <_fstat_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	2300      	movs	r3, #0
 8008f08:	4d06      	ldr	r5, [pc, #24]	@ (8008f24 <_fstat_r+0x20>)
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	f7f9 fe13 	bl	8002b3c <_fstat>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d102      	bne.n	8008f20 <_fstat_r+0x1c>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	b103      	cbz	r3, 8008f20 <_fstat_r+0x1c>
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
 8008f22:	bf00      	nop
 8008f24:	200009a4 	.word	0x200009a4

08008f28 <_isatty_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4d05      	ldr	r5, [pc, #20]	@ (8008f44 <_isatty_r+0x1c>)
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f9 fe11 	bl	8002b5a <_isatty>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_isatty_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_isatty_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	200009a4 	.word	0x200009a4

08008f48 <abort>:
 8008f48:	2006      	movs	r0, #6
 8008f4a:	b508      	push	{r3, lr}
 8008f4c:	f000 f82c 	bl	8008fa8 <raise>
 8008f50:	2001      	movs	r0, #1
 8008f52:	f7f9 fdc0 	bl	8002ad6 <_exit>

08008f56 <_raise_r>:
 8008f56:	291f      	cmp	r1, #31
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	d904      	bls.n	8008f6a <_raise_r+0x14>
 8008f60:	2316      	movs	r3, #22
 8008f62:	6003      	str	r3, [r0, #0]
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f6c:	b112      	cbz	r2, 8008f74 <_raise_r+0x1e>
 8008f6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f72:	b94b      	cbnz	r3, 8008f88 <_raise_r+0x32>
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 f831 	bl	8008fdc <_getpid_r>
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4628      	mov	r0, r5
 8008f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f84:	f000 b818 	b.w	8008fb8 <_kill_r>
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d00a      	beq.n	8008fa2 <_raise_r+0x4c>
 8008f8c:	1c59      	adds	r1, r3, #1
 8008f8e:	d103      	bne.n	8008f98 <_raise_r+0x42>
 8008f90:	2316      	movs	r3, #22
 8008f92:	6003      	str	r3, [r0, #0]
 8008f94:	2001      	movs	r0, #1
 8008f96:	e7e7      	b.n	8008f68 <_raise_r+0x12>
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008fa0:	4798      	blx	r3
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e7e0      	b.n	8008f68 <_raise_r+0x12>
	...

08008fa8 <raise>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	@ (8008fb4 <raise+0xc>)
 8008faa:	4601      	mov	r1, r0
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	f7ff bfd2 	b.w	8008f56 <_raise_r>
 8008fb2:	bf00      	nop
 8008fb4:	20000048 	.word	0x20000048

08008fb8 <_kill_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4d06      	ldr	r5, [pc, #24]	@ (8008fd8 <_kill_r+0x20>)
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	f7f9 fd76 	bl	8002ab6 <_kill>
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	d102      	bne.n	8008fd4 <_kill_r+0x1c>
 8008fce:	682b      	ldr	r3, [r5, #0]
 8008fd0:	b103      	cbz	r3, 8008fd4 <_kill_r+0x1c>
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	bd38      	pop	{r3, r4, r5, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200009a4 	.word	0x200009a4

08008fdc <_getpid_r>:
 8008fdc:	f7f9 bd64 	b.w	8002aa8 <_getpid>

08008fe0 <pow>:
 8008fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	461d      	mov	r5, r3
 8008fe8:	4680      	mov	r8, r0
 8008fea:	4689      	mov	r9, r1
 8008fec:	f000 faf4 	bl	80095d8 <__ieee754_pow>
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460f      	mov	r7, r1
 8008ff6:	462b      	mov	r3, r5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 fd06 	bl	8000a0c <__aeabi_dcmpun>
 8009000:	bbc8      	cbnz	r0, 8009076 <pow+0x96>
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800900e:	b1b8      	cbz	r0, 8009040 <pow+0x60>
 8009010:	2200      	movs	r2, #0
 8009012:	2300      	movs	r3, #0
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	f7f7 fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800901c:	2800      	cmp	r0, #0
 800901e:	d141      	bne.n	80090a4 <pow+0xc4>
 8009020:	4620      	mov	r0, r4
 8009022:	4629      	mov	r1, r5
 8009024:	f000 f9fc 	bl	8009420 <finite>
 8009028:	b328      	cbz	r0, 8009076 <pow+0x96>
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	4620      	mov	r0, r4
 8009030:	4629      	mov	r1, r5
 8009032:	f7f7 fcc3 	bl	80009bc <__aeabi_dcmplt>
 8009036:	b1f0      	cbz	r0, 8009076 <pow+0x96>
 8009038:	f7fe f8f8 	bl	800722c <__errno>
 800903c:	2322      	movs	r3, #34	@ 0x22
 800903e:	e019      	b.n	8009074 <pow+0x94>
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f000 f9ec 	bl	8009420 <finite>
 8009048:	b9c8      	cbnz	r0, 800907e <pow+0x9e>
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	f000 f9e7 	bl	8009420 <finite>
 8009052:	b1a0      	cbz	r0, 800907e <pow+0x9e>
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f000 f9e2 	bl	8009420 <finite>
 800905c:	b178      	cbz	r0, 800907e <pow+0x9e>
 800905e:	4632      	mov	r2, r6
 8009060:	463b      	mov	r3, r7
 8009062:	4630      	mov	r0, r6
 8009064:	4639      	mov	r1, r7
 8009066:	f7f7 fcd1 	bl	8000a0c <__aeabi_dcmpun>
 800906a:	2800      	cmp	r0, #0
 800906c:	d0e4      	beq.n	8009038 <pow+0x58>
 800906e:	f7fe f8dd 	bl	800722c <__errno>
 8009072:	2321      	movs	r3, #33	@ 0x21
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	4630      	mov	r0, r6
 8009078:	4639      	mov	r1, r7
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800907e:	2200      	movs	r2, #0
 8009080:	2300      	movs	r3, #0
 8009082:	4630      	mov	r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	f7f7 fc8f 	bl	80009a8 <__aeabi_dcmpeq>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0f3      	beq.n	8009076 <pow+0x96>
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f000 f9c5 	bl	8009420 <finite>
 8009096:	2800      	cmp	r0, #0
 8009098:	d0ed      	beq.n	8009076 <pow+0x96>
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	f000 f9bf 	bl	8009420 <finite>
 80090a2:	e7c8      	b.n	8009036 <pow+0x56>
 80090a4:	2600      	movs	r6, #0
 80090a6:	4f01      	ldr	r7, [pc, #4]	@ (80090ac <pow+0xcc>)
 80090a8:	e7e5      	b.n	8009076 <pow+0x96>
 80090aa:	bf00      	nop
 80090ac:	3ff00000 	.word	0x3ff00000

080090b0 <sqrt>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	4606      	mov	r6, r0
 80090b4:	460f      	mov	r7, r1
 80090b6:	f000 f9b9 	bl	800942c <__ieee754_sqrt>
 80090ba:	4632      	mov	r2, r6
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	463b      	mov	r3, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	4639      	mov	r1, r7
 80090c6:	f7f7 fca1 	bl	8000a0c <__aeabi_dcmpun>
 80090ca:	b990      	cbnz	r0, 80090f2 <sqrt+0x42>
 80090cc:	2200      	movs	r2, #0
 80090ce:	2300      	movs	r3, #0
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 fc72 	bl	80009bc <__aeabi_dcmplt>
 80090d8:	b158      	cbz	r0, 80090f2 <sqrt+0x42>
 80090da:	f7fe f8a7 	bl	800722c <__errno>
 80090de:	2321      	movs	r3, #33	@ 0x21
 80090e0:	2200      	movs	r2, #0
 80090e2:	6003      	str	r3, [r0, #0]
 80090e4:	2300      	movs	r3, #0
 80090e6:	4610      	mov	r0, r2
 80090e8:	4619      	mov	r1, r3
 80090ea:	f7f7 fb1f 	bl	800072c <__aeabi_ddiv>
 80090ee:	4604      	mov	r4, r0
 80090f0:	460d      	mov	r5, r1
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090f8 <atan>:
 80090f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	4bbc      	ldr	r3, [pc, #752]	@ (80093f0 <atan+0x2f8>)
 80090fe:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009102:	429e      	cmp	r6, r3
 8009104:	4604      	mov	r4, r0
 8009106:	460d      	mov	r5, r1
 8009108:	468b      	mov	fp, r1
 800910a:	d918      	bls.n	800913e <atan+0x46>
 800910c:	4bb9      	ldr	r3, [pc, #740]	@ (80093f4 <atan+0x2fc>)
 800910e:	429e      	cmp	r6, r3
 8009110:	d801      	bhi.n	8009116 <atan+0x1e>
 8009112:	d109      	bne.n	8009128 <atan+0x30>
 8009114:	b140      	cbz	r0, 8009128 <atan+0x30>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 f825 	bl	800016c <__adddf3>
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	e006      	b.n	8009136 <atan+0x3e>
 8009128:	f1bb 0f00 	cmp.w	fp, #0
 800912c:	f340 8123 	ble.w	8009376 <atan+0x27e>
 8009130:	a593      	add	r5, pc, #588	@ (adr r5, 8009380 <atan+0x288>)
 8009132:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	4bae      	ldr	r3, [pc, #696]	@ (80093f8 <atan+0x300>)
 8009140:	429e      	cmp	r6, r3
 8009142:	d811      	bhi.n	8009168 <atan+0x70>
 8009144:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009148:	429e      	cmp	r6, r3
 800914a:	d80a      	bhi.n	8009162 <atan+0x6a>
 800914c:	a38e      	add	r3, pc, #568	@ (adr r3, 8009388 <atan+0x290>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f80b 	bl	800016c <__adddf3>
 8009156:	2200      	movs	r2, #0
 8009158:	4ba8      	ldr	r3, [pc, #672]	@ (80093fc <atan+0x304>)
 800915a:	f7f7 fc4d 	bl	80009f8 <__aeabi_dcmpgt>
 800915e:	2800      	cmp	r0, #0
 8009160:	d1e9      	bne.n	8009136 <atan+0x3e>
 8009162:	f04f 3aff 	mov.w	sl, #4294967295
 8009166:	e027      	b.n	80091b8 <atan+0xc0>
 8009168:	f000 f956 	bl	8009418 <fabs>
 800916c:	4ba4      	ldr	r3, [pc, #656]	@ (8009400 <atan+0x308>)
 800916e:	4604      	mov	r4, r0
 8009170:	429e      	cmp	r6, r3
 8009172:	460d      	mov	r5, r1
 8009174:	f200 80b8 	bhi.w	80092e8 <atan+0x1f0>
 8009178:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800917c:	429e      	cmp	r6, r3
 800917e:	f200 809c 	bhi.w	80092ba <atan+0x1c2>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	f7f6 fff1 	bl	800016c <__adddf3>
 800918a:	2200      	movs	r2, #0
 800918c:	4b9b      	ldr	r3, [pc, #620]	@ (80093fc <atan+0x304>)
 800918e:	f7f6 ffeb 	bl	8000168 <__aeabi_dsub>
 8009192:	2200      	movs	r2, #0
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f6 ffe4 	bl	800016c <__adddf3>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fabe 	bl	800072c <__aeabi_ddiv>
 80091b0:	f04f 0a00 	mov.w	sl, #0
 80091b4:	4604      	mov	r4, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	4622      	mov	r2, r4
 80091ba:	462b      	mov	r3, r5
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 f98a 	bl	80004d8 <__aeabi_dmul>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4680      	mov	r8, r0
 80091ca:	4689      	mov	r9, r1
 80091cc:	f7f7 f984 	bl	80004d8 <__aeabi_dmul>
 80091d0:	a36f      	add	r3, pc, #444	@ (adr r3, 8009390 <atan+0x298>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	4606      	mov	r6, r0
 80091d8:	460f      	mov	r7, r1
 80091da:	f7f7 f97d 	bl	80004d8 <__aeabi_dmul>
 80091de:	a36e      	add	r3, pc, #440	@ (adr r3, 8009398 <atan+0x2a0>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f7f6 ffc2 	bl	800016c <__adddf3>
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	f7f7 f974 	bl	80004d8 <__aeabi_dmul>
 80091f0:	a36b      	add	r3, pc, #428	@ (adr r3, 80093a0 <atan+0x2a8>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f6 ffb9 	bl	800016c <__adddf3>
 80091fa:	4632      	mov	r2, r6
 80091fc:	463b      	mov	r3, r7
 80091fe:	f7f7 f96b 	bl	80004d8 <__aeabi_dmul>
 8009202:	a369      	add	r3, pc, #420	@ (adr r3, 80093a8 <atan+0x2b0>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	f7f6 ffb0 	bl	800016c <__adddf3>
 800920c:	4632      	mov	r2, r6
 800920e:	463b      	mov	r3, r7
 8009210:	f7f7 f962 	bl	80004d8 <__aeabi_dmul>
 8009214:	a366      	add	r3, pc, #408	@ (adr r3, 80093b0 <atan+0x2b8>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f6 ffa7 	bl	800016c <__adddf3>
 800921e:	4632      	mov	r2, r6
 8009220:	463b      	mov	r3, r7
 8009222:	f7f7 f959 	bl	80004d8 <__aeabi_dmul>
 8009226:	a364      	add	r3, pc, #400	@ (adr r3, 80093b8 <atan+0x2c0>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f6 ff9e 	bl	800016c <__adddf3>
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	f7f7 f950 	bl	80004d8 <__aeabi_dmul>
 8009238:	a361      	add	r3, pc, #388	@ (adr r3, 80093c0 <atan+0x2c8>)
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	4680      	mov	r8, r0
 8009240:	4689      	mov	r9, r1
 8009242:	4630      	mov	r0, r6
 8009244:	4639      	mov	r1, r7
 8009246:	f7f7 f947 	bl	80004d8 <__aeabi_dmul>
 800924a:	a35f      	add	r3, pc, #380	@ (adr r3, 80093c8 <atan+0x2d0>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f6 ff8a 	bl	8000168 <__aeabi_dsub>
 8009254:	4632      	mov	r2, r6
 8009256:	463b      	mov	r3, r7
 8009258:	f7f7 f93e 	bl	80004d8 <__aeabi_dmul>
 800925c:	a35c      	add	r3, pc, #368	@ (adr r3, 80093d0 <atan+0x2d8>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f6 ff81 	bl	8000168 <__aeabi_dsub>
 8009266:	4632      	mov	r2, r6
 8009268:	463b      	mov	r3, r7
 800926a:	f7f7 f935 	bl	80004d8 <__aeabi_dmul>
 800926e:	a35a      	add	r3, pc, #360	@ (adr r3, 80093d8 <atan+0x2e0>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f6 ff78 	bl	8000168 <__aeabi_dsub>
 8009278:	4632      	mov	r2, r6
 800927a:	463b      	mov	r3, r7
 800927c:	f7f7 f92c 	bl	80004d8 <__aeabi_dmul>
 8009280:	a357      	add	r3, pc, #348	@ (adr r3, 80093e0 <atan+0x2e8>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f6 ff6f 	bl	8000168 <__aeabi_dsub>
 800928a:	4632      	mov	r2, r6
 800928c:	463b      	mov	r3, r7
 800928e:	f7f7 f923 	bl	80004d8 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4640      	mov	r0, r8
 8009298:	4649      	mov	r1, r9
 800929a:	f7f6 ff67 	bl	800016c <__adddf3>
 800929e:	4622      	mov	r2, r4
 80092a0:	462b      	mov	r3, r5
 80092a2:	f7f7 f919 	bl	80004d8 <__aeabi_dmul>
 80092a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	d144      	bne.n	800933a <atan+0x242>
 80092b0:	4620      	mov	r0, r4
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f6 ff58 	bl	8000168 <__aeabi_dsub>
 80092b8:	e733      	b.n	8009122 <atan+0x2a>
 80092ba:	2200      	movs	r2, #0
 80092bc:	4b4f      	ldr	r3, [pc, #316]	@ (80093fc <atan+0x304>)
 80092be:	f7f6 ff53 	bl	8000168 <__aeabi_dsub>
 80092c2:	2200      	movs	r2, #0
 80092c4:	4606      	mov	r6, r0
 80092c6:	460f      	mov	r7, r1
 80092c8:	4620      	mov	r0, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	4b4b      	ldr	r3, [pc, #300]	@ (80093fc <atan+0x304>)
 80092ce:	f7f6 ff4d 	bl	800016c <__adddf3>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	f7f7 fa27 	bl	800072c <__aeabi_ddiv>
 80092de:	f04f 0a01 	mov.w	sl, #1
 80092e2:	4604      	mov	r4, r0
 80092e4:	460d      	mov	r5, r1
 80092e6:	e767      	b.n	80091b8 <atan+0xc0>
 80092e8:	4b46      	ldr	r3, [pc, #280]	@ (8009404 <atan+0x30c>)
 80092ea:	429e      	cmp	r6, r3
 80092ec:	d21a      	bcs.n	8009324 <atan+0x22c>
 80092ee:	2200      	movs	r2, #0
 80092f0:	4b45      	ldr	r3, [pc, #276]	@ (8009408 <atan+0x310>)
 80092f2:	f7f6 ff39 	bl	8000168 <__aeabi_dsub>
 80092f6:	2200      	movs	r2, #0
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	4b41      	ldr	r3, [pc, #260]	@ (8009408 <atan+0x310>)
 8009302:	f7f7 f8e9 	bl	80004d8 <__aeabi_dmul>
 8009306:	2200      	movs	r2, #0
 8009308:	4b3c      	ldr	r3, [pc, #240]	@ (80093fc <atan+0x304>)
 800930a:	f7f6 ff2f 	bl	800016c <__adddf3>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 fa09 	bl	800072c <__aeabi_ddiv>
 800931a:	f04f 0a02 	mov.w	sl, #2
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	e749      	b.n	80091b8 <atan+0xc0>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	2000      	movs	r0, #0
 800932a:	4938      	ldr	r1, [pc, #224]	@ (800940c <atan+0x314>)
 800932c:	f7f7 f9fe 	bl	800072c <__aeabi_ddiv>
 8009330:	f04f 0a03 	mov.w	sl, #3
 8009334:	4604      	mov	r4, r0
 8009336:	460d      	mov	r5, r1
 8009338:	e73e      	b.n	80091b8 <atan+0xc0>
 800933a:	4b35      	ldr	r3, [pc, #212]	@ (8009410 <atan+0x318>)
 800933c:	4e35      	ldr	r6, [pc, #212]	@ (8009414 <atan+0x31c>)
 800933e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ff0f 	bl	8000168 <__aeabi_dsub>
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f6 ff0b 	bl	8000168 <__aeabi_dsub>
 8009352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800935e:	f7f6 ff03 	bl	8000168 <__aeabi_dsub>
 8009362:	f1bb 0f00 	cmp.w	fp, #0
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	f6bf aee4 	bge.w	8009136 <atan+0x3e>
 800936e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009372:	461d      	mov	r5, r3
 8009374:	e6df      	b.n	8009136 <atan+0x3e>
 8009376:	a51c      	add	r5, pc, #112	@ (adr r5, 80093e8 <atan+0x2f0>)
 8009378:	e9d5 4500 	ldrd	r4, r5, [r5]
 800937c:	e6db      	b.n	8009136 <atan+0x3e>
 800937e:	bf00      	nop
 8009380:	54442d18 	.word	0x54442d18
 8009384:	3ff921fb 	.word	0x3ff921fb
 8009388:	8800759c 	.word	0x8800759c
 800938c:	7e37e43c 	.word	0x7e37e43c
 8009390:	e322da11 	.word	0xe322da11
 8009394:	3f90ad3a 	.word	0x3f90ad3a
 8009398:	24760deb 	.word	0x24760deb
 800939c:	3fa97b4b 	.word	0x3fa97b4b
 80093a0:	a0d03d51 	.word	0xa0d03d51
 80093a4:	3fb10d66 	.word	0x3fb10d66
 80093a8:	c54c206e 	.word	0xc54c206e
 80093ac:	3fb745cd 	.word	0x3fb745cd
 80093b0:	920083ff 	.word	0x920083ff
 80093b4:	3fc24924 	.word	0x3fc24924
 80093b8:	5555550d 	.word	0x5555550d
 80093bc:	3fd55555 	.word	0x3fd55555
 80093c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80093c4:	bfa2b444 	.word	0xbfa2b444
 80093c8:	52defd9a 	.word	0x52defd9a
 80093cc:	3fadde2d 	.word	0x3fadde2d
 80093d0:	af749a6d 	.word	0xaf749a6d
 80093d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80093d8:	fe231671 	.word	0xfe231671
 80093dc:	3fbc71c6 	.word	0x3fbc71c6
 80093e0:	9998ebc4 	.word	0x9998ebc4
 80093e4:	3fc99999 	.word	0x3fc99999
 80093e8:	54442d18 	.word	0x54442d18
 80093ec:	bff921fb 	.word	0xbff921fb
 80093f0:	440fffff 	.word	0x440fffff
 80093f4:	7ff00000 	.word	0x7ff00000
 80093f8:	3fdbffff 	.word	0x3fdbffff
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	3ff2ffff 	.word	0x3ff2ffff
 8009404:	40038000 	.word	0x40038000
 8009408:	3ff80000 	.word	0x3ff80000
 800940c:	bff00000 	.word	0xbff00000
 8009410:	0800a538 	.word	0x0800a538
 8009414:	0800a558 	.word	0x0800a558

08009418 <fabs>:
 8009418:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800941c:	4619      	mov	r1, r3
 800941e:	4770      	bx	lr

08009420 <finite>:
 8009420:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009424:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009428:	0fc0      	lsrs	r0, r0, #31
 800942a:	4770      	bx	lr

0800942c <__ieee754_sqrt>:
 800942c:	4a67      	ldr	r2, [pc, #412]	@ (80095cc <__ieee754_sqrt+0x1a0>)
 800942e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009432:	438a      	bics	r2, r1
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	460b      	mov	r3, r1
 800943a:	4604      	mov	r4, r0
 800943c:	d10e      	bne.n	800945c <__ieee754_sqrt+0x30>
 800943e:	4602      	mov	r2, r0
 8009440:	f7f7 f84a 	bl	80004d8 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	f7f6 fe8e 	bl	800016c <__adddf3>
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945c:	2900      	cmp	r1, #0
 800945e:	dc0c      	bgt.n	800947a <__ieee754_sqrt+0x4e>
 8009460:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009464:	4302      	orrs	r2, r0
 8009466:	d0f5      	beq.n	8009454 <__ieee754_sqrt+0x28>
 8009468:	b189      	cbz	r1, 800948e <__ieee754_sqrt+0x62>
 800946a:	4602      	mov	r2, r0
 800946c:	f7f6 fe7c 	bl	8000168 <__aeabi_dsub>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	f7f7 f95a 	bl	800072c <__aeabi_ddiv>
 8009478:	e7ea      	b.n	8009450 <__ieee754_sqrt+0x24>
 800947a:	150a      	asrs	r2, r1, #20
 800947c:	d115      	bne.n	80094aa <__ieee754_sqrt+0x7e>
 800947e:	2100      	movs	r1, #0
 8009480:	e009      	b.n	8009496 <__ieee754_sqrt+0x6a>
 8009482:	0ae3      	lsrs	r3, r4, #11
 8009484:	3a15      	subs	r2, #21
 8009486:	0564      	lsls	r4, r4, #21
 8009488:	2b00      	cmp	r3, #0
 800948a:	d0fa      	beq.n	8009482 <__ieee754_sqrt+0x56>
 800948c:	e7f7      	b.n	800947e <__ieee754_sqrt+0x52>
 800948e:	460a      	mov	r2, r1
 8009490:	e7fa      	b.n	8009488 <__ieee754_sqrt+0x5c>
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	3101      	adds	r1, #1
 8009496:	02d8      	lsls	r0, r3, #11
 8009498:	d5fb      	bpl.n	8009492 <__ieee754_sqrt+0x66>
 800949a:	1e48      	subs	r0, r1, #1
 800949c:	1a12      	subs	r2, r2, r0
 800949e:	f1c1 0020 	rsb	r0, r1, #32
 80094a2:	fa24 f000 	lsr.w	r0, r4, r0
 80094a6:	4303      	orrs	r3, r0
 80094a8:	408c      	lsls	r4, r1
 80094aa:	2600      	movs	r6, #0
 80094ac:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80094b0:	2116      	movs	r1, #22
 80094b2:	07d2      	lsls	r2, r2, #31
 80094b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80094b8:	4632      	mov	r2, r6
 80094ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094c2:	bf5c      	itt	pl
 80094c4:	005b      	lslpl	r3, r3, #1
 80094c6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80094ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094ce:	bf58      	it	pl
 80094d0:	0064      	lslpl	r4, r4, #1
 80094d2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80094d6:	107f      	asrs	r7, r7, #1
 80094d8:	0064      	lsls	r4, r4, #1
 80094da:	1815      	adds	r5, r2, r0
 80094dc:	429d      	cmp	r5, r3
 80094de:	bfde      	ittt	le
 80094e0:	182a      	addle	r2, r5, r0
 80094e2:	1b5b      	suble	r3, r3, r5
 80094e4:	1836      	addle	r6, r6, r0
 80094e6:	0fe5      	lsrs	r5, r4, #31
 80094e8:	3901      	subs	r1, #1
 80094ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80094ee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80094f2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80094f6:	d1f0      	bne.n	80094da <__ieee754_sqrt+0xae>
 80094f8:	460d      	mov	r5, r1
 80094fa:	f04f 0a20 	mov.w	sl, #32
 80094fe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009502:	429a      	cmp	r2, r3
 8009504:	eb01 0c00 	add.w	ip, r1, r0
 8009508:	db02      	blt.n	8009510 <__ieee754_sqrt+0xe4>
 800950a:	d113      	bne.n	8009534 <__ieee754_sqrt+0x108>
 800950c:	45a4      	cmp	ip, r4
 800950e:	d811      	bhi.n	8009534 <__ieee754_sqrt+0x108>
 8009510:	f1bc 0f00 	cmp.w	ip, #0
 8009514:	eb0c 0100 	add.w	r1, ip, r0
 8009518:	da42      	bge.n	80095a0 <__ieee754_sqrt+0x174>
 800951a:	2900      	cmp	r1, #0
 800951c:	db40      	blt.n	80095a0 <__ieee754_sqrt+0x174>
 800951e:	f102 0e01 	add.w	lr, r2, #1
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	4672      	mov	r2, lr
 8009526:	45a4      	cmp	ip, r4
 8009528:	bf88      	it	hi
 800952a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800952e:	eba4 040c 	sub.w	r4, r4, ip
 8009532:	4405      	add	r5, r0
 8009534:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009538:	f1ba 0a01 	subs.w	sl, sl, #1
 800953c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009540:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009544:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009548:	d1db      	bne.n	8009502 <__ieee754_sqrt+0xd6>
 800954a:	431c      	orrs	r4, r3
 800954c:	d01a      	beq.n	8009584 <__ieee754_sqrt+0x158>
 800954e:	4c20      	ldr	r4, [pc, #128]	@ (80095d0 <__ieee754_sqrt+0x1a4>)
 8009550:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80095d4 <__ieee754_sqrt+0x1a8>
 8009554:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009558:	e9db 2300 	ldrd	r2, r3, [fp]
 800955c:	f7f6 fe04 	bl	8000168 <__aeabi_dsub>
 8009560:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4640      	mov	r0, r8
 800956a:	4649      	mov	r1, r9
 800956c:	f7f7 fa30 	bl	80009d0 <__aeabi_dcmple>
 8009570:	b140      	cbz	r0, 8009584 <__ieee754_sqrt+0x158>
 8009572:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009576:	e9db 2300 	ldrd	r2, r3, [fp]
 800957a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800957e:	d111      	bne.n	80095a4 <__ieee754_sqrt+0x178>
 8009580:	4655      	mov	r5, sl
 8009582:	3601      	adds	r6, #1
 8009584:	1072      	asrs	r2, r6, #1
 8009586:	086b      	lsrs	r3, r5, #1
 8009588:	07f1      	lsls	r1, r6, #31
 800958a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800958e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009592:	bf48      	it	mi
 8009594:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009598:	4618      	mov	r0, r3
 800959a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800959e:	e757      	b.n	8009450 <__ieee754_sqrt+0x24>
 80095a0:	4696      	mov	lr, r2
 80095a2:	e7be      	b.n	8009522 <__ieee754_sqrt+0xf6>
 80095a4:	f7f6 fde2 	bl	800016c <__adddf3>
 80095a8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 fa02 	bl	80009bc <__aeabi_dcmplt>
 80095b8:	b120      	cbz	r0, 80095c4 <__ieee754_sqrt+0x198>
 80095ba:	1ca8      	adds	r0, r5, #2
 80095bc:	bf08      	it	eq
 80095be:	3601      	addeq	r6, #1
 80095c0:	3502      	adds	r5, #2
 80095c2:	e7df      	b.n	8009584 <__ieee754_sqrt+0x158>
 80095c4:	1c6b      	adds	r3, r5, #1
 80095c6:	f023 0501 	bic.w	r5, r3, #1
 80095ca:	e7db      	b.n	8009584 <__ieee754_sqrt+0x158>
 80095cc:	7ff00000 	.word	0x7ff00000
 80095d0:	20000210 	.word	0x20000210
 80095d4:	20000208 	.word	0x20000208

080095d8 <__ieee754_pow>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	b091      	sub	sp, #68	@ 0x44
 80095de:	e9cd 2300 	strd	r2, r3, [sp]
 80095e2:	468b      	mov	fp, r1
 80095e4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80095e8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80095ec:	4682      	mov	sl, r0
 80095ee:	ea57 0001 	orrs.w	r0, r7, r1
 80095f2:	d112      	bne.n	800961a <__ieee754_pow+0x42>
 80095f4:	4653      	mov	r3, sl
 80095f6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80095fa:	18db      	adds	r3, r3, r3
 80095fc:	4152      	adcs	r2, r2
 80095fe:	4298      	cmp	r0, r3
 8009600:	4b91      	ldr	r3, [pc, #580]	@ (8009848 <__ieee754_pow+0x270>)
 8009602:	4193      	sbcs	r3, r2
 8009604:	f080 84ce 	bcs.w	8009fa4 <__ieee754_pow+0x9cc>
 8009608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800960c:	4650      	mov	r0, sl
 800960e:	4659      	mov	r1, fp
 8009610:	f7f6 fdac 	bl	800016c <__adddf3>
 8009614:	b011      	add	sp, #68	@ 0x44
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	4b8c      	ldr	r3, [pc, #560]	@ (800984c <__ieee754_pow+0x274>)
 800961c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009620:	429e      	cmp	r6, r3
 8009622:	465d      	mov	r5, fp
 8009624:	46d1      	mov	r9, sl
 8009626:	d807      	bhi.n	8009638 <__ieee754_pow+0x60>
 8009628:	d102      	bne.n	8009630 <__ieee754_pow+0x58>
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d1eb      	bne.n	8009608 <__ieee754_pow+0x30>
 8009630:	429f      	cmp	r7, r3
 8009632:	d801      	bhi.n	8009638 <__ieee754_pow+0x60>
 8009634:	d10f      	bne.n	8009656 <__ieee754_pow+0x7e>
 8009636:	b171      	cbz	r1, 8009656 <__ieee754_pow+0x7e>
 8009638:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800963c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009640:	ea55 0509 	orrs.w	r5, r5, r9
 8009644:	d1e0      	bne.n	8009608 <__ieee754_pow+0x30>
 8009646:	e9dd 3200 	ldrd	r3, r2, [sp]
 800964a:	18db      	adds	r3, r3, r3
 800964c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009650:	4152      	adcs	r2, r2
 8009652:	429d      	cmp	r5, r3
 8009654:	e7d4      	b.n	8009600 <__ieee754_pow+0x28>
 8009656:	2d00      	cmp	r5, #0
 8009658:	4633      	mov	r3, r6
 800965a:	da39      	bge.n	80096d0 <__ieee754_pow+0xf8>
 800965c:	4a7c      	ldr	r2, [pc, #496]	@ (8009850 <__ieee754_pow+0x278>)
 800965e:	4297      	cmp	r7, r2
 8009660:	d84e      	bhi.n	8009700 <__ieee754_pow+0x128>
 8009662:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009666:	4297      	cmp	r7, r2
 8009668:	f240 84ab 	bls.w	8009fc2 <__ieee754_pow+0x9ea>
 800966c:	153a      	asrs	r2, r7, #20
 800966e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009672:	2a14      	cmp	r2, #20
 8009674:	dd0f      	ble.n	8009696 <__ieee754_pow+0xbe>
 8009676:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800967a:	fa21 f402 	lsr.w	r4, r1, r2
 800967e:	fa04 f202 	lsl.w	r2, r4, r2
 8009682:	428a      	cmp	r2, r1
 8009684:	f040 849d 	bne.w	8009fc2 <__ieee754_pow+0x9ea>
 8009688:	f004 0401 	and.w	r4, r4, #1
 800968c:	f1c4 0402 	rsb	r4, r4, #2
 8009690:	2900      	cmp	r1, #0
 8009692:	d15a      	bne.n	800974a <__ieee754_pow+0x172>
 8009694:	e00e      	b.n	80096b4 <__ieee754_pow+0xdc>
 8009696:	2900      	cmp	r1, #0
 8009698:	d156      	bne.n	8009748 <__ieee754_pow+0x170>
 800969a:	f1c2 0214 	rsb	r2, r2, #20
 800969e:	fa47 f402 	asr.w	r4, r7, r2
 80096a2:	fa04 f202 	lsl.w	r2, r4, r2
 80096a6:	42ba      	cmp	r2, r7
 80096a8:	f040 8488 	bne.w	8009fbc <__ieee754_pow+0x9e4>
 80096ac:	f004 0401 	and.w	r4, r4, #1
 80096b0:	f1c4 0402 	rsb	r4, r4, #2
 80096b4:	4a67      	ldr	r2, [pc, #412]	@ (8009854 <__ieee754_pow+0x27c>)
 80096b6:	4297      	cmp	r7, r2
 80096b8:	d130      	bne.n	800971c <__ieee754_pow+0x144>
 80096ba:	f1b8 0f00 	cmp.w	r8, #0
 80096be:	f280 8479 	bge.w	8009fb4 <__ieee754_pow+0x9dc>
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	2000      	movs	r0, #0
 80096c8:	4962      	ldr	r1, [pc, #392]	@ (8009854 <__ieee754_pow+0x27c>)
 80096ca:	f7f7 f82f 	bl	800072c <__aeabi_ddiv>
 80096ce:	e7a1      	b.n	8009614 <__ieee754_pow+0x3c>
 80096d0:	2400      	movs	r4, #0
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d139      	bne.n	800974a <__ieee754_pow+0x172>
 80096d6:	4a5d      	ldr	r2, [pc, #372]	@ (800984c <__ieee754_pow+0x274>)
 80096d8:	4297      	cmp	r7, r2
 80096da:	d1eb      	bne.n	80096b4 <__ieee754_pow+0xdc>
 80096dc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80096e0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80096e4:	ea53 0309 	orrs.w	r3, r3, r9
 80096e8:	f000 845c 	beq.w	8009fa4 <__ieee754_pow+0x9cc>
 80096ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009858 <__ieee754_pow+0x280>)
 80096ee:	429e      	cmp	r6, r3
 80096f0:	d908      	bls.n	8009704 <__ieee754_pow+0x12c>
 80096f2:	f1b8 0f00 	cmp.w	r8, #0
 80096f6:	f2c0 8459 	blt.w	8009fac <__ieee754_pow+0x9d4>
 80096fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096fe:	e789      	b.n	8009614 <__ieee754_pow+0x3c>
 8009700:	2402      	movs	r4, #2
 8009702:	e7e6      	b.n	80096d2 <__ieee754_pow+0xfa>
 8009704:	f1b8 0f00 	cmp.w	r8, #0
 8009708:	f04f 0000 	mov.w	r0, #0
 800970c:	f04f 0100 	mov.w	r1, #0
 8009710:	da80      	bge.n	8009614 <__ieee754_pow+0x3c>
 8009712:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009716:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800971a:	e77b      	b.n	8009614 <__ieee754_pow+0x3c>
 800971c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009720:	d106      	bne.n	8009730 <__ieee754_pow+0x158>
 8009722:	4652      	mov	r2, sl
 8009724:	465b      	mov	r3, fp
 8009726:	4650      	mov	r0, sl
 8009728:	4659      	mov	r1, fp
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	e771      	b.n	8009614 <__ieee754_pow+0x3c>
 8009730:	4a4a      	ldr	r2, [pc, #296]	@ (800985c <__ieee754_pow+0x284>)
 8009732:	4590      	cmp	r8, r2
 8009734:	d109      	bne.n	800974a <__ieee754_pow+0x172>
 8009736:	2d00      	cmp	r5, #0
 8009738:	db07      	blt.n	800974a <__ieee754_pow+0x172>
 800973a:	4650      	mov	r0, sl
 800973c:	4659      	mov	r1, fp
 800973e:	b011      	add	sp, #68	@ 0x44
 8009740:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	f7ff be72 	b.w	800942c <__ieee754_sqrt>
 8009748:	2400      	movs	r4, #0
 800974a:	4650      	mov	r0, sl
 800974c:	4659      	mov	r1, fp
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	f7ff fe62 	bl	8009418 <fabs>
 8009754:	9b02      	ldr	r3, [sp, #8]
 8009756:	f1b9 0f00 	cmp.w	r9, #0
 800975a:	d127      	bne.n	80097ac <__ieee754_pow+0x1d4>
 800975c:	4a3d      	ldr	r2, [pc, #244]	@ (8009854 <__ieee754_pow+0x27c>)
 800975e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009762:	4594      	cmp	ip, r2
 8009764:	d000      	beq.n	8009768 <__ieee754_pow+0x190>
 8009766:	bb0e      	cbnz	r6, 80097ac <__ieee754_pow+0x1d4>
 8009768:	f1b8 0f00 	cmp.w	r8, #0
 800976c:	da05      	bge.n	800977a <__ieee754_pow+0x1a2>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	2000      	movs	r0, #0
 8009774:	4937      	ldr	r1, [pc, #220]	@ (8009854 <__ieee754_pow+0x27c>)
 8009776:	f7f6 ffd9 	bl	800072c <__aeabi_ddiv>
 800977a:	2d00      	cmp	r5, #0
 800977c:	f6bf af4a 	bge.w	8009614 <__ieee754_pow+0x3c>
 8009780:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009784:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009788:	4326      	orrs	r6, r4
 800978a:	d108      	bne.n	800979e <__ieee754_pow+0x1c6>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4610      	mov	r0, r2
 8009792:	4619      	mov	r1, r3
 8009794:	f7f6 fce8 	bl	8000168 <__aeabi_dsub>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	e795      	b.n	80096ca <__ieee754_pow+0xf2>
 800979e:	2c01      	cmp	r4, #1
 80097a0:	f47f af38 	bne.w	8009614 <__ieee754_pow+0x3c>
 80097a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097a8:	4619      	mov	r1, r3
 80097aa:	e733      	b.n	8009614 <__ieee754_pow+0x3c>
 80097ac:	0fea      	lsrs	r2, r5, #31
 80097ae:	3a01      	subs	r2, #1
 80097b0:	ea52 0c04 	orrs.w	ip, r2, r4
 80097b4:	d102      	bne.n	80097bc <__ieee754_pow+0x1e4>
 80097b6:	4652      	mov	r2, sl
 80097b8:	465b      	mov	r3, fp
 80097ba:	e7e9      	b.n	8009790 <__ieee754_pow+0x1b8>
 80097bc:	f04f 0900 	mov.w	r9, #0
 80097c0:	3c01      	subs	r4, #1
 80097c2:	4314      	orrs	r4, r2
 80097c4:	bf14      	ite	ne
 80097c6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009854 <__ieee754_pow+0x27c>
 80097ca:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009860 <__ieee754_pow+0x288>
 80097ce:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80097d2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80097d6:	f240 8107 	bls.w	80099e8 <__ieee754_pow+0x410>
 80097da:	4b22      	ldr	r3, [pc, #136]	@ (8009864 <__ieee754_pow+0x28c>)
 80097dc:	429f      	cmp	r7, r3
 80097de:	4b1e      	ldr	r3, [pc, #120]	@ (8009858 <__ieee754_pow+0x280>)
 80097e0:	d913      	bls.n	800980a <__ieee754_pow+0x232>
 80097e2:	429e      	cmp	r6, r3
 80097e4:	d808      	bhi.n	80097f8 <__ieee754_pow+0x220>
 80097e6:	f1b8 0f00 	cmp.w	r8, #0
 80097ea:	da08      	bge.n	80097fe <__ieee754_pow+0x226>
 80097ec:	2000      	movs	r0, #0
 80097ee:	b011      	add	sp, #68	@ 0x44
 80097f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	f000 bcb0 	b.w	800a158 <__math_oflow>
 80097f8:	f1b8 0f00 	cmp.w	r8, #0
 80097fc:	dcf6      	bgt.n	80097ec <__ieee754_pow+0x214>
 80097fe:	2000      	movs	r0, #0
 8009800:	b011      	add	sp, #68	@ 0x44
 8009802:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009806:	f000 bca2 	b.w	800a14e <__math_uflow>
 800980a:	429e      	cmp	r6, r3
 800980c:	d20c      	bcs.n	8009828 <__ieee754_pow+0x250>
 800980e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	2300      	movs	r3, #0
 8009816:	f7f7 f8d1 	bl	80009bc <__aeabi_dcmplt>
 800981a:	3800      	subs	r0, #0
 800981c:	bf18      	it	ne
 800981e:	2001      	movne	r0, #1
 8009820:	f1b8 0f00 	cmp.w	r8, #0
 8009824:	daec      	bge.n	8009800 <__ieee754_pow+0x228>
 8009826:	e7e2      	b.n	80097ee <__ieee754_pow+0x216>
 8009828:	4b0a      	ldr	r3, [pc, #40]	@ (8009854 <__ieee754_pow+0x27c>)
 800982a:	2200      	movs	r2, #0
 800982c:	429e      	cmp	r6, r3
 800982e:	d91b      	bls.n	8009868 <__ieee754_pow+0x290>
 8009830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009834:	2300      	movs	r3, #0
 8009836:	f7f7 f8c1 	bl	80009bc <__aeabi_dcmplt>
 800983a:	3800      	subs	r0, #0
 800983c:	bf18      	it	ne
 800983e:	2001      	movne	r0, #1
 8009840:	f1b8 0f00 	cmp.w	r8, #0
 8009844:	dcd3      	bgt.n	80097ee <__ieee754_pow+0x216>
 8009846:	e7db      	b.n	8009800 <__ieee754_pow+0x228>
 8009848:	fff00000 	.word	0xfff00000
 800984c:	7ff00000 	.word	0x7ff00000
 8009850:	433fffff 	.word	0x433fffff
 8009854:	3ff00000 	.word	0x3ff00000
 8009858:	3fefffff 	.word	0x3fefffff
 800985c:	3fe00000 	.word	0x3fe00000
 8009860:	bff00000 	.word	0xbff00000
 8009864:	43f00000 	.word	0x43f00000
 8009868:	4b5b      	ldr	r3, [pc, #364]	@ (80099d8 <__ieee754_pow+0x400>)
 800986a:	f7f6 fc7d 	bl	8000168 <__aeabi_dsub>
 800986e:	a352      	add	r3, pc, #328	@ (adr r3, 80099b8 <__ieee754_pow+0x3e0>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	4604      	mov	r4, r0
 8009876:	460d      	mov	r5, r1
 8009878:	f7f6 fe2e 	bl	80004d8 <__aeabi_dmul>
 800987c:	a350      	add	r3, pc, #320	@ (adr r3, 80099c0 <__ieee754_pow+0x3e8>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	4620      	mov	r0, r4
 8009888:	4629      	mov	r1, r5
 800988a:	f7f6 fe25 	bl	80004d8 <__aeabi_dmul>
 800988e:	2200      	movs	r2, #0
 8009890:	4682      	mov	sl, r0
 8009892:	468b      	mov	fp, r1
 8009894:	4620      	mov	r0, r4
 8009896:	4629      	mov	r1, r5
 8009898:	4b50      	ldr	r3, [pc, #320]	@ (80099dc <__ieee754_pow+0x404>)
 800989a:	f7f6 fe1d 	bl	80004d8 <__aeabi_dmul>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	a149      	add	r1, pc, #292	@ (adr r1, 80099c8 <__ieee754_pow+0x3f0>)
 80098a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a8:	f7f6 fc5e 	bl	8000168 <__aeabi_dsub>
 80098ac:	4622      	mov	r2, r4
 80098ae:	462b      	mov	r3, r5
 80098b0:	f7f6 fe12 	bl	80004d8 <__aeabi_dmul>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	2000      	movs	r0, #0
 80098ba:	4949      	ldr	r1, [pc, #292]	@ (80099e0 <__ieee754_pow+0x408>)
 80098bc:	f7f6 fc54 	bl	8000168 <__aeabi_dsub>
 80098c0:	4622      	mov	r2, r4
 80098c2:	4680      	mov	r8, r0
 80098c4:	4689      	mov	r9, r1
 80098c6:	462b      	mov	r3, r5
 80098c8:	4620      	mov	r0, r4
 80098ca:	4629      	mov	r1, r5
 80098cc:	f7f6 fe04 	bl	80004d8 <__aeabi_dmul>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f6 fdfe 	bl	80004d8 <__aeabi_dmul>
 80098dc:	a33c      	add	r3, pc, #240	@ (adr r3, 80099d0 <__ieee754_pow+0x3f8>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fdf9 	bl	80004d8 <__aeabi_dmul>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	f7f6 fc3b 	bl	8000168 <__aeabi_dsub>
 80098f2:	2400      	movs	r4, #0
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4680      	mov	r8, r0
 80098fa:	4689      	mov	r9, r1
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f6 fc34 	bl	800016c <__adddf3>
 8009904:	4632      	mov	r2, r6
 8009906:	463b      	mov	r3, r7
 8009908:	4620      	mov	r0, r4
 800990a:	460d      	mov	r5, r1
 800990c:	f7f6 fc2c 	bl	8000168 <__aeabi_dsub>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4640      	mov	r0, r8
 8009916:	4649      	mov	r1, r9
 8009918:	f7f6 fc26 	bl	8000168 <__aeabi_dsub>
 800991c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009924:	2300      	movs	r3, #0
 8009926:	9304      	str	r3, [sp, #16]
 8009928:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009934:	4652      	mov	r2, sl
 8009936:	465b      	mov	r3, fp
 8009938:	f7f6 fc16 	bl	8000168 <__aeabi_dsub>
 800993c:	4622      	mov	r2, r4
 800993e:	462b      	mov	r3, r5
 8009940:	f7f6 fdca 	bl	80004d8 <__aeabi_dmul>
 8009944:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009948:	4680      	mov	r8, r0
 800994a:	4689      	mov	r9, r1
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f6 fdc2 	bl	80004d8 <__aeabi_dmul>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4640      	mov	r0, r8
 800995a:	4649      	mov	r1, r9
 800995c:	f7f6 fc06 	bl	800016c <__adddf3>
 8009960:	4652      	mov	r2, sl
 8009962:	465b      	mov	r3, fp
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	4620      	mov	r0, r4
 800996a:	4629      	mov	r1, r5
 800996c:	f7f6 fdb4 	bl	80004d8 <__aeabi_dmul>
 8009970:	460b      	mov	r3, r1
 8009972:	4602      	mov	r2, r0
 8009974:	4680      	mov	r8, r0
 8009976:	4689      	mov	r9, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fbf6 	bl	800016c <__adddf3>
 8009980:	4b18      	ldr	r3, [pc, #96]	@ (80099e4 <__ieee754_pow+0x40c>)
 8009982:	4604      	mov	r4, r0
 8009984:	4299      	cmp	r1, r3
 8009986:	460d      	mov	r5, r1
 8009988:	468a      	mov	sl, r1
 800998a:	468b      	mov	fp, r1
 800998c:	f340 82e0 	ble.w	8009f50 <__ieee754_pow+0x978>
 8009990:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009994:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009998:	4303      	orrs	r3, r0
 800999a:	f000 81df 	beq.w	8009d5c <__ieee754_pow+0x784>
 800999e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	2300      	movs	r3, #0
 80099a6:	f7f7 f809 	bl	80009bc <__aeabi_dcmplt>
 80099aa:	3800      	subs	r0, #0
 80099ac:	bf18      	it	ne
 80099ae:	2001      	movne	r0, #1
 80099b0:	e71d      	b.n	80097ee <__ieee754_pow+0x216>
 80099b2:	bf00      	nop
 80099b4:	f3af 8000 	nop.w
 80099b8:	60000000 	.word	0x60000000
 80099bc:	3ff71547 	.word	0x3ff71547
 80099c0:	f85ddf44 	.word	0xf85ddf44
 80099c4:	3e54ae0b 	.word	0x3e54ae0b
 80099c8:	55555555 	.word	0x55555555
 80099cc:	3fd55555 	.word	0x3fd55555
 80099d0:	652b82fe 	.word	0x652b82fe
 80099d4:	3ff71547 	.word	0x3ff71547
 80099d8:	3ff00000 	.word	0x3ff00000
 80099dc:	3fd00000 	.word	0x3fd00000
 80099e0:	3fe00000 	.word	0x3fe00000
 80099e4:	408fffff 	.word	0x408fffff
 80099e8:	4ad3      	ldr	r2, [pc, #844]	@ (8009d38 <__ieee754_pow+0x760>)
 80099ea:	402a      	ands	r2, r5
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	f040 817a 	bne.w	8009ce6 <__ieee754_pow+0x70e>
 80099f2:	4bd2      	ldr	r3, [pc, #840]	@ (8009d3c <__ieee754_pow+0x764>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	f7f6 fd6f 	bl	80004d8 <__aeabi_dmul>
 80099fa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80099fe:	460b      	mov	r3, r1
 8009a00:	151a      	asrs	r2, r3, #20
 8009a02:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009a06:	4422      	add	r2, r4
 8009a08:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a0a:	4acd      	ldr	r2, [pc, #820]	@ (8009d40 <__ieee754_pow+0x768>)
 8009a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a10:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a14:	4293      	cmp	r3, r2
 8009a16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009a1a:	dd08      	ble.n	8009a2e <__ieee754_pow+0x456>
 8009a1c:	4ac9      	ldr	r2, [pc, #804]	@ (8009d44 <__ieee754_pow+0x76c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	f340 8163 	ble.w	8009cea <__ieee754_pow+0x712>
 8009a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a26:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a2e:	2600      	movs	r6, #0
 8009a30:	00f3      	lsls	r3, r6, #3
 8009a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a34:	4bc4      	ldr	r3, [pc, #784]	@ (8009d48 <__ieee754_pow+0x770>)
 8009a36:	4629      	mov	r1, r5
 8009a38:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a40:	461a      	mov	r2, r3
 8009a42:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009a46:	4623      	mov	r3, r4
 8009a48:	4682      	mov	sl, r0
 8009a4a:	f7f6 fb8d 	bl	8000168 <__aeabi_dsub>
 8009a4e:	4652      	mov	r2, sl
 8009a50:	462b      	mov	r3, r5
 8009a52:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009a56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a5a:	f7f6 fb87 	bl	800016c <__adddf3>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	2000      	movs	r0, #0
 8009a64:	49b9      	ldr	r1, [pc, #740]	@ (8009d4c <__ieee754_pow+0x774>)
 8009a66:	f7f6 fe61 	bl	800072c <__aeabi_ddiv>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a76:	f7f6 fd2f 	bl	80004d8 <__aeabi_dmul>
 8009a7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a7e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009a82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a86:	2300      	movs	r3, #0
 8009a88:	2200      	movs	r2, #0
 8009a8a:	46ab      	mov	fp, r5
 8009a8c:	106d      	asrs	r5, r5, #1
 8009a8e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009a98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a9c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	461d      	mov	r5, r3
 8009aa8:	f7f6 fd16 	bl	80004d8 <__aeabi_dmul>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ab4:	f7f6 fb58 	bl	8000168 <__aeabi_dsub>
 8009ab8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009abc:	4606      	mov	r6, r0
 8009abe:	460f      	mov	r7, r1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	f7f6 fb50 	bl	8000168 <__aeabi_dsub>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4650      	mov	r0, sl
 8009ace:	4659      	mov	r1, fp
 8009ad0:	f7f6 fb4a 	bl	8000168 <__aeabi_dsub>
 8009ad4:	4642      	mov	r2, r8
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	f7f6 fcfe 	bl	80004d8 <__aeabi_dmul>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f7f6 fb40 	bl	8000168 <__aeabi_dsub>
 8009ae8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aec:	f7f6 fcf4 	bl	80004d8 <__aeabi_dmul>
 8009af0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009af4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009af8:	4610      	mov	r0, r2
 8009afa:	4619      	mov	r1, r3
 8009afc:	f7f6 fcec 	bl	80004d8 <__aeabi_dmul>
 8009b00:	a37b      	add	r3, pc, #492	@ (adr r3, 8009cf0 <__ieee754_pow+0x718>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	4604      	mov	r4, r0
 8009b08:	460d      	mov	r5, r1
 8009b0a:	f7f6 fce5 	bl	80004d8 <__aeabi_dmul>
 8009b0e:	a37a      	add	r3, pc, #488	@ (adr r3, 8009cf8 <__ieee754_pow+0x720>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fb2a 	bl	800016c <__adddf3>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	f7f6 fcdc 	bl	80004d8 <__aeabi_dmul>
 8009b20:	a377      	add	r3, pc, #476	@ (adr r3, 8009d00 <__ieee754_pow+0x728>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fb21 	bl	800016c <__adddf3>
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	f7f6 fcd3 	bl	80004d8 <__aeabi_dmul>
 8009b32:	a375      	add	r3, pc, #468	@ (adr r3, 8009d08 <__ieee754_pow+0x730>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fb18 	bl	800016c <__adddf3>
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	462b      	mov	r3, r5
 8009b40:	f7f6 fcca 	bl	80004d8 <__aeabi_dmul>
 8009b44:	a372      	add	r3, pc, #456	@ (adr r3, 8009d10 <__ieee754_pow+0x738>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f7f6 fb0f 	bl	800016c <__adddf3>
 8009b4e:	4622      	mov	r2, r4
 8009b50:	462b      	mov	r3, r5
 8009b52:	f7f6 fcc1 	bl	80004d8 <__aeabi_dmul>
 8009b56:	a370      	add	r3, pc, #448	@ (adr r3, 8009d18 <__ieee754_pow+0x740>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fb06 	bl	800016c <__adddf3>
 8009b60:	4622      	mov	r2, r4
 8009b62:	4606      	mov	r6, r0
 8009b64:	460f      	mov	r7, r1
 8009b66:	462b      	mov	r3, r5
 8009b68:	4620      	mov	r0, r4
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f7f6 fcb4 	bl	80004d8 <__aeabi_dmul>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	4630      	mov	r0, r6
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 fcae 	bl	80004d8 <__aeabi_dmul>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	f7f6 faf0 	bl	800016c <__adddf3>
 8009b8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b90:	f7f6 fca2 	bl	80004d8 <__aeabi_dmul>
 8009b94:	4622      	mov	r2, r4
 8009b96:	462b      	mov	r3, r5
 8009b98:	f7f6 fae8 	bl	800016c <__adddf3>
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	4682      	mov	sl, r0
 8009ba0:	468b      	mov	fp, r1
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	2200      	movs	r2, #0
 8009bae:	4b68      	ldr	r3, [pc, #416]	@ (8009d50 <__ieee754_pow+0x778>)
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	f7f6 fada 	bl	800016c <__adddf3>
 8009bb8:	4652      	mov	r2, sl
 8009bba:	465b      	mov	r3, fp
 8009bbc:	f7f6 fad6 	bl	800016c <__adddf3>
 8009bc0:	2400      	movs	r4, #0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4640      	mov	r0, r8
 8009bca:	4649      	mov	r1, r9
 8009bcc:	f7f6 fc84 	bl	80004d8 <__aeabi_dmul>
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4689      	mov	r9, r1
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4b5d      	ldr	r3, [pc, #372]	@ (8009d50 <__ieee754_pow+0x778>)
 8009bdc:	f7f6 fac4 	bl	8000168 <__aeabi_dsub>
 8009be0:	4632      	mov	r2, r6
 8009be2:	463b      	mov	r3, r7
 8009be4:	f7f6 fac0 	bl	8000168 <__aeabi_dsub>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4650      	mov	r0, sl
 8009bee:	4659      	mov	r1, fp
 8009bf0:	f7f6 faba 	bl	8000168 <__aeabi_dsub>
 8009bf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bf8:	f7f6 fc6e 	bl	80004d8 <__aeabi_dmul>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c06:	462b      	mov	r3, r5
 8009c08:	f7f6 fc66 	bl	80004d8 <__aeabi_dmul>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 faaa 	bl	800016c <__adddf3>
 8009c18:	2400      	movs	r4, #0
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 faa1 	bl	800016c <__adddf3>
 8009c2a:	a33d      	add	r3, pc, #244	@ (adr r3, 8009d20 <__ieee754_pow+0x748>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	4620      	mov	r0, r4
 8009c32:	460d      	mov	r5, r1
 8009c34:	f7f6 fc50 	bl	80004d8 <__aeabi_dmul>
 8009c38:	4642      	mov	r2, r8
 8009c3a:	464b      	mov	r3, r9
 8009c3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fa90 	bl	8000168 <__aeabi_dsub>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	4639      	mov	r1, r7
 8009c50:	f7f6 fa8a 	bl	8000168 <__aeabi_dsub>
 8009c54:	a334      	add	r3, pc, #208	@ (adr r3, 8009d28 <__ieee754_pow+0x750>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fc3d 	bl	80004d8 <__aeabi_dmul>
 8009c5e:	a334      	add	r3, pc, #208	@ (adr r3, 8009d30 <__ieee754_pow+0x758>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fc34 	bl	80004d8 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4630      	mov	r0, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7f6 fa78 	bl	800016c <__adddf3>
 8009c7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c7e:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <__ieee754_pow+0x77c>)
 8009c80:	2400      	movs	r4, #0
 8009c82:	4413      	add	r3, r2
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fa70 	bl	800016c <__adddf3>
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c90:	468b      	mov	fp, r1
 8009c92:	f7f6 fbb7 	bl	8000404 <__aeabi_i2d>
 8009c96:	4606      	mov	r6, r0
 8009c98:	460f      	mov	r7, r1
 8009c9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8009d58 <__ieee754_pow+0x780>)
 8009c9e:	4413      	add	r3, r2
 8009ca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009caa:	465b      	mov	r3, fp
 8009cac:	f7f6 fa5e 	bl	800016c <__adddf3>
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f7f6 fa5a 	bl	800016c <__adddf3>
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	f7f6 fa56 	bl	800016c <__adddf3>
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	f7f6 fa4e 	bl	8000168 <__aeabi_dsub>
 8009ccc:	4642      	mov	r2, r8
 8009cce:	464b      	mov	r3, r9
 8009cd0:	f7f6 fa4a 	bl	8000168 <__aeabi_dsub>
 8009cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cd8:	f7f6 fa46 	bl	8000168 <__aeabi_dsub>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	e618      	b.n	8009918 <__ieee754_pow+0x340>
 8009ce6:	2400      	movs	r4, #0
 8009ce8:	e68a      	b.n	8009a00 <__ieee754_pow+0x428>
 8009cea:	2601      	movs	r6, #1
 8009cec:	e6a0      	b.n	8009a30 <__ieee754_pow+0x458>
 8009cee:	bf00      	nop
 8009cf0:	4a454eef 	.word	0x4a454eef
 8009cf4:	3fca7e28 	.word	0x3fca7e28
 8009cf8:	93c9db65 	.word	0x93c9db65
 8009cfc:	3fcd864a 	.word	0x3fcd864a
 8009d00:	a91d4101 	.word	0xa91d4101
 8009d04:	3fd17460 	.word	0x3fd17460
 8009d08:	518f264d 	.word	0x518f264d
 8009d0c:	3fd55555 	.word	0x3fd55555
 8009d10:	db6fabff 	.word	0xdb6fabff
 8009d14:	3fdb6db6 	.word	0x3fdb6db6
 8009d18:	33333303 	.word	0x33333303
 8009d1c:	3fe33333 	.word	0x3fe33333
 8009d20:	e0000000 	.word	0xe0000000
 8009d24:	3feec709 	.word	0x3feec709
 8009d28:	dc3a03fd 	.word	0xdc3a03fd
 8009d2c:	3feec709 	.word	0x3feec709
 8009d30:	145b01f5 	.word	0x145b01f5
 8009d34:	be3e2fe0 	.word	0xbe3e2fe0
 8009d38:	7ff00000 	.word	0x7ff00000
 8009d3c:	43400000 	.word	0x43400000
 8009d40:	0003988e 	.word	0x0003988e
 8009d44:	000bb679 	.word	0x000bb679
 8009d48:	0800a598 	.word	0x0800a598
 8009d4c:	3ff00000 	.word	0x3ff00000
 8009d50:	40080000 	.word	0x40080000
 8009d54:	0800a578 	.word	0x0800a578
 8009d58:	0800a588 	.word	0x0800a588
 8009d5c:	a39a      	add	r3, pc, #616	@ (adr r3, 8009fc8 <__ieee754_pow+0x9f0>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fa01 	bl	800016c <__adddf3>
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	e9cd 0100 	strd	r0, r1, [sp]
 8009d70:	464b      	mov	r3, r9
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 f9f7 	bl	8000168 <__aeabi_dsub>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d82:	f7f6 fe39 	bl	80009f8 <__aeabi_dcmpgt>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f47f ae09 	bne.w	800999e <__ieee754_pow+0x3c6>
 8009d8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009d90:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009d94:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009d98:	fa43 fa0a 	asr.w	sl, r3, sl
 8009d9c:	44da      	add	sl, fp
 8009d9e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009da2:	489b      	ldr	r0, [pc, #620]	@ (800a010 <__ieee754_pow+0xa38>)
 8009da4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009da8:	4108      	asrs	r0, r1
 8009daa:	ea00 030a 	and.w	r3, r0, sl
 8009dae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009db2:	f1c1 0114 	rsb	r1, r1, #20
 8009db6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009dba:	4640      	mov	r0, r8
 8009dbc:	fa4a fa01 	asr.w	sl, sl, r1
 8009dc0:	f1bb 0f00 	cmp.w	fp, #0
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	f04f 0200 	mov.w	r2, #0
 8009dca:	bfb8      	it	lt
 8009dcc:	f1ca 0a00 	rsblt	sl, sl, #0
 8009dd0:	f7f6 f9ca 	bl	8000168 <__aeabi_dsub>
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	4689      	mov	r9, r1
 8009dd8:	2400      	movs	r4, #0
 8009dda:	4632      	mov	r2, r6
 8009ddc:	463b      	mov	r3, r7
 8009dde:	4640      	mov	r0, r8
 8009de0:	4649      	mov	r1, r9
 8009de2:	f7f6 f9c3 	bl	800016c <__adddf3>
 8009de6:	a37a      	add	r3, pc, #488	@ (adr r3, 8009fd0 <__ieee754_pow+0x9f8>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	4620      	mov	r0, r4
 8009dee:	460d      	mov	r5, r1
 8009df0:	f7f6 fb72 	bl	80004d8 <__aeabi_dmul>
 8009df4:	4642      	mov	r2, r8
 8009df6:	464b      	mov	r3, r9
 8009df8:	e9cd 0100 	strd	r0, r1, [sp]
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f7f6 f9b2 	bl	8000168 <__aeabi_dsub>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 f9ac 	bl	8000168 <__aeabi_dsub>
 8009e10:	a371      	add	r3, pc, #452	@ (adr r3, 8009fd8 <__ieee754_pow+0xa00>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 fb5f 	bl	80004d8 <__aeabi_dmul>
 8009e1a:	a371      	add	r3, pc, #452	@ (adr r3, 8009fe0 <__ieee754_pow+0xa08>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	4680      	mov	r8, r0
 8009e22:	4689      	mov	r9, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fb56 	bl	80004d8 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 f99a 	bl	800016c <__adddf3>
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e44:	f7f6 f992 	bl	800016c <__adddf3>
 8009e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	4689      	mov	r9, r1
 8009e50:	f7f6 f98a 	bl	8000168 <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 f984 	bl	8000168 <__aeabi_dsub>
 8009e60:	4642      	mov	r2, r8
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	464b      	mov	r3, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fb34 	bl	80004d8 <__aeabi_dmul>
 8009e70:	a35d      	add	r3, pc, #372	@ (adr r3, 8009fe8 <__ieee754_pow+0xa10>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	f7f6 fb2d 	bl	80004d8 <__aeabi_dmul>
 8009e7e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009ff0 <__ieee754_pow+0xa18>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 f970 	bl	8000168 <__aeabi_dsub>
 8009e88:	4622      	mov	r2, r4
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	f7f6 fb24 	bl	80004d8 <__aeabi_dmul>
 8009e90:	a359      	add	r3, pc, #356	@ (adr r3, 8009ff8 <__ieee754_pow+0xa20>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 f969 	bl	800016c <__adddf3>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	f7f6 fb1b 	bl	80004d8 <__aeabi_dmul>
 8009ea2:	a357      	add	r3, pc, #348	@ (adr r3, 800a000 <__ieee754_pow+0xa28>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7f6 f95e 	bl	8000168 <__aeabi_dsub>
 8009eac:	4622      	mov	r2, r4
 8009eae:	462b      	mov	r3, r5
 8009eb0:	f7f6 fb12 	bl	80004d8 <__aeabi_dmul>
 8009eb4:	a354      	add	r3, pc, #336	@ (adr r3, 800a008 <__ieee754_pow+0xa30>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7f6 f957 	bl	800016c <__adddf3>
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	f7f6 fb09 	bl	80004d8 <__aeabi_dmul>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4649      	mov	r1, r9
 8009ece:	f7f6 f94b 	bl	8000168 <__aeabi_dsub>
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	f7f6 fafb 	bl	80004d8 <__aeabi_dmul>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 f93a 	bl	8000168 <__aeabi_dsub>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009efc:	f7f6 fc16 	bl	800072c <__aeabi_ddiv>
 8009f00:	4632      	mov	r2, r6
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	463b      	mov	r3, r7
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 fae4 	bl	80004d8 <__aeabi_dmul>
 8009f10:	4632      	mov	r2, r6
 8009f12:	463b      	mov	r3, r7
 8009f14:	f7f6 f92a 	bl	800016c <__adddf3>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 f922 	bl	8000168 <__aeabi_dsub>
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	f7f6 f91e 	bl	8000168 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	2000      	movs	r0, #0
 8009f32:	4938      	ldr	r1, [pc, #224]	@ (800a014 <__ieee754_pow+0xa3c>)
 8009f34:	f7f6 f918 	bl	8000168 <__aeabi_dsub>
 8009f38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009f3c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009f40:	da2e      	bge.n	8009fa0 <__ieee754_pow+0x9c8>
 8009f42:	4652      	mov	r2, sl
 8009f44:	f000 f870 	bl	800a028 <scalbn>
 8009f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f4c:	f7ff bbed 	b.w	800972a <__ieee754_pow+0x152>
 8009f50:	4c31      	ldr	r4, [pc, #196]	@ (800a018 <__ieee754_pow+0xa40>)
 8009f52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	d91a      	bls.n	8009f90 <__ieee754_pow+0x9b8>
 8009f5a:	4b30      	ldr	r3, [pc, #192]	@ (800a01c <__ieee754_pow+0xa44>)
 8009f5c:	440b      	add	r3, r1
 8009f5e:	4303      	orrs	r3, r0
 8009f60:	d009      	beq.n	8009f76 <__ieee754_pow+0x99e>
 8009f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f7f6 fd27 	bl	80009bc <__aeabi_dcmplt>
 8009f6e:	3800      	subs	r0, #0
 8009f70:	bf18      	it	ne
 8009f72:	2001      	movne	r0, #1
 8009f74:	e444      	b.n	8009800 <__ieee754_pow+0x228>
 8009f76:	4642      	mov	r2, r8
 8009f78:	464b      	mov	r3, r9
 8009f7a:	f7f6 f8f5 	bl	8000168 <__aeabi_dsub>
 8009f7e:	4632      	mov	r2, r6
 8009f80:	463b      	mov	r3, r7
 8009f82:	f7f6 fd2f 	bl	80009e4 <__aeabi_dcmpge>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d1eb      	bne.n	8009f62 <__ieee754_pow+0x98a>
 8009f8a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a020 <__ieee754_pow+0xa48>
 8009f8e:	e6fd      	b.n	8009d8c <__ieee754_pow+0x7b4>
 8009f90:	469a      	mov	sl, r3
 8009f92:	4b24      	ldr	r3, [pc, #144]	@ (800a024 <__ieee754_pow+0xa4c>)
 8009f94:	459a      	cmp	sl, r3
 8009f96:	f63f aef9 	bhi.w	8009d8c <__ieee754_pow+0x7b4>
 8009f9a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009f9e:	e71b      	b.n	8009dd8 <__ieee754_pow+0x800>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	e7d1      	b.n	8009f48 <__ieee754_pow+0x970>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	491b      	ldr	r1, [pc, #108]	@ (800a014 <__ieee754_pow+0xa3c>)
 8009fa8:	f7ff bb34 	b.w	8009614 <__ieee754_pow+0x3c>
 8009fac:	2000      	movs	r0, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	f7ff bb30 	b.w	8009614 <__ieee754_pow+0x3c>
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	4659      	mov	r1, fp
 8009fb8:	f7ff bb2c 	b.w	8009614 <__ieee754_pow+0x3c>
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	f7ff bb79 	b.w	80096b4 <__ieee754_pow+0xdc>
 8009fc2:	2400      	movs	r4, #0
 8009fc4:	f7ff bb64 	b.w	8009690 <__ieee754_pow+0xb8>
 8009fc8:	652b82fe 	.word	0x652b82fe
 8009fcc:	3c971547 	.word	0x3c971547
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	3fe62e43 	.word	0x3fe62e43
 8009fd8:	fefa39ef 	.word	0xfefa39ef
 8009fdc:	3fe62e42 	.word	0x3fe62e42
 8009fe0:	0ca86c39 	.word	0x0ca86c39
 8009fe4:	be205c61 	.word	0xbe205c61
 8009fe8:	72bea4d0 	.word	0x72bea4d0
 8009fec:	3e663769 	.word	0x3e663769
 8009ff0:	c5d26bf1 	.word	0xc5d26bf1
 8009ff4:	3ebbbd41 	.word	0x3ebbbd41
 8009ff8:	af25de2c 	.word	0xaf25de2c
 8009ffc:	3f11566a 	.word	0x3f11566a
 800a000:	16bebd93 	.word	0x16bebd93
 800a004:	3f66c16c 	.word	0x3f66c16c
 800a008:	5555553e 	.word	0x5555553e
 800a00c:	3fc55555 	.word	0x3fc55555
 800a010:	fff00000 	.word	0xfff00000
 800a014:	3ff00000 	.word	0x3ff00000
 800a018:	4090cbff 	.word	0x4090cbff
 800a01c:	3f6f3400 	.word	0x3f6f3400
 800a020:	4090cc00 	.word	0x4090cc00
 800a024:	3fe00000 	.word	0x3fe00000

0800a028 <scalbn>:
 800a028:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a02c:	4616      	mov	r6, r2
 800a02e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a032:	4683      	mov	fp, r0
 800a034:	468c      	mov	ip, r1
 800a036:	460b      	mov	r3, r1
 800a038:	b982      	cbnz	r2, 800a05c <scalbn+0x34>
 800a03a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a03e:	4303      	orrs	r3, r0
 800a040:	d039      	beq.n	800a0b6 <scalbn+0x8e>
 800a042:	4b2f      	ldr	r3, [pc, #188]	@ (800a100 <scalbn+0xd8>)
 800a044:	2200      	movs	r2, #0
 800a046:	f7f6 fa47 	bl	80004d8 <__aeabi_dmul>
 800a04a:	4b2e      	ldr	r3, [pc, #184]	@ (800a104 <scalbn+0xdc>)
 800a04c:	4683      	mov	fp, r0
 800a04e:	429e      	cmp	r6, r3
 800a050:	468c      	mov	ip, r1
 800a052:	da0d      	bge.n	800a070 <scalbn+0x48>
 800a054:	a326      	add	r3, pc, #152	@ (adr r3, 800a0f0 <scalbn+0xc8>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	e01b      	b.n	800a094 <scalbn+0x6c>
 800a05c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a060:	42ba      	cmp	r2, r7
 800a062:	d109      	bne.n	800a078 <scalbn+0x50>
 800a064:	4602      	mov	r2, r0
 800a066:	f7f6 f881 	bl	800016c <__adddf3>
 800a06a:	4683      	mov	fp, r0
 800a06c:	468c      	mov	ip, r1
 800a06e:	e022      	b.n	800a0b6 <scalbn+0x8e>
 800a070:	460b      	mov	r3, r1
 800a072:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a076:	3a36      	subs	r2, #54	@ 0x36
 800a078:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a07c:	428e      	cmp	r6, r1
 800a07e:	dd0c      	ble.n	800a09a <scalbn+0x72>
 800a080:	a31d      	add	r3, pc, #116	@ (adr r3, 800a0f8 <scalbn+0xd0>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	461c      	mov	r4, r3
 800a088:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a08c:	f361 74df 	bfi	r4, r1, #31, #1
 800a090:	4621      	mov	r1, r4
 800a092:	481d      	ldr	r0, [pc, #116]	@ (800a108 <scalbn+0xe0>)
 800a094:	f7f6 fa20 	bl	80004d8 <__aeabi_dmul>
 800a098:	e7e7      	b.n	800a06a <scalbn+0x42>
 800a09a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a09e:	4432      	add	r2, r6
 800a0a0:	428a      	cmp	r2, r1
 800a0a2:	dced      	bgt.n	800a080 <scalbn+0x58>
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	dd0a      	ble.n	800a0be <scalbn+0x96>
 800a0a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a0b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0b4:	46ac      	mov	ip, r5
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	4661      	mov	r1, ip
 800a0ba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a0be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a0c2:	da09      	bge.n	800a0d8 <scalbn+0xb0>
 800a0c4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a0c8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a0cc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a0d0:	480e      	ldr	r0, [pc, #56]	@ (800a10c <scalbn+0xe4>)
 800a0d2:	f041 011f 	orr.w	r1, r1, #31
 800a0d6:	e7bd      	b.n	800a054 <scalbn+0x2c>
 800a0d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0dc:	3236      	adds	r2, #54	@ 0x36
 800a0de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a0e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	4b08      	ldr	r3, [pc, #32]	@ (800a110 <scalbn+0xe8>)
 800a0ee:	e7d1      	b.n	800a094 <scalbn+0x6c>
 800a0f0:	c2f8f359 	.word	0xc2f8f359
 800a0f4:	01a56e1f 	.word	0x01a56e1f
 800a0f8:	8800759c 	.word	0x8800759c
 800a0fc:	7e37e43c 	.word	0x7e37e43c
 800a100:	43500000 	.word	0x43500000
 800a104:	ffff3cb0 	.word	0xffff3cb0
 800a108:	8800759c 	.word	0x8800759c
 800a10c:	c2f8f359 	.word	0xc2f8f359
 800a110:	3c900000 	.word	0x3c900000

0800a114 <with_errno>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	4616      	mov	r6, r2
 800a11c:	f7fd f886 	bl	800722c <__errno>
 800a120:	4629      	mov	r1, r5
 800a122:	6006      	str	r6, [r0, #0]
 800a124:	4620      	mov	r0, r4
 800a126:	bd70      	pop	{r4, r5, r6, pc}

0800a128 <xflow>:
 800a128:	b513      	push	{r0, r1, r4, lr}
 800a12a:	4604      	mov	r4, r0
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	b10c      	cbz	r4, 800a136 <xflow+0xe>
 800a132:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a136:	e9cd 2300 	strd	r2, r3, [sp]
 800a13a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13e:	f7f6 f9cb 	bl	80004d8 <__aeabi_dmul>
 800a142:	2222      	movs	r2, #34	@ 0x22
 800a144:	b002      	add	sp, #8
 800a146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a14a:	f7ff bfe3 	b.w	800a114 <with_errno>

0800a14e <__math_uflow>:
 800a14e:	2200      	movs	r2, #0
 800a150:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a154:	f7ff bfe8 	b.w	800a128 <xflow>

0800a158 <__math_oflow>:
 800a158:	2200      	movs	r2, #0
 800a15a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a15e:	f7ff bfe3 	b.w	800a128 <xflow>
	...

0800a164 <_init>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	bf00      	nop
 800a168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16a:	bc08      	pop	{r3}
 800a16c:	469e      	mov	lr, r3
 800a16e:	4770      	bx	lr

0800a170 <_fini>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	bf00      	nop
 800a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a176:	bc08      	pop	{r3}
 800a178:	469e      	mov	lr, r3
 800a17a:	4770      	bx	lr
